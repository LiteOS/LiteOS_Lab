	
CC=gcc
CPP=g++
LD=ld
AR=ar

BUILD_DIR=build

FILE_PATTERN = "*ota_flag.c" "*pcp.c"

FOR32 := true
BIN:= bin
LIB:= $(BUILD_DIR)/libliteos.a

TOP_DIR:=../../..
SDK_DIR:=$(TOP_DIR)
include ./config.mk
#include $(SDK_DIR)/iot_link/iot.mk

ifeq ($(FOR32), true)
CFLAGS := -m32  -march=i386 -mtune=i386
else
CFLAGS := 
endif

CFLAGS += -fprofile-arcs -ftest-coverage $(C_DEFS)
GCOV_FLAGS := --rc lcov_branch_coverage=1 --rc  genhtml_branch_coverage=1
CPP_FLAGS :=  -std=c++11

#compile dynamic library of liteos module	
SRC+= $(C_SOURCES) 

LIB_OBJ:=$(addprefix $(BUILD_DIR)/, $(notdir $(patsubst %.c, %.o, $(SRC))))
vpath %.c $(sort $(dir $(SRC)))
	
INCLUDES:= $(C_INCLUDES) -I. -I./pcp
	

CPP_SRC := $(wildcard *.cpp) ${wildcard ./pcp/*.cpp}
CPP_OBJ = $(addprefix $(BUILD_DIR)/, $(notdir $(patsubst %.cpp, %.o, $(CPP_SRC))))
vpath %.cpp $(sort $(dir $(CPP_SRC)))

C_SRC   := $(wildcard *.c)
C_OBJ:=$(addprefix $(BUILD_DIR)/, $(notdir $(patsubst %.c, %.o, $(C_SRC))))

all:$(BUILD_DIR) lib $(BIN) 
	@echo "OK"
lib:$(LIB)
TEST_GCDA:=$(patsubst %.o, %.gcda, $(CPP_OBJ))
TEST_GCDA+=$(patsubst %.o, %.gcda, $(C_OBJ))
TEST_GCDA+=$(patsubst %.o, %.gcda, $(LIB_OBJ))
	
TEST_GCNO:=$(patsubst %.o, %.gcno, $(CPP_OBJ))
TEST_GCNO+=$(patsubst %.o, %.gcno, $(C_OBJ))
TEST_GCNO+=$(patsubst %.o, %.gcno, $(LIB_OBJ))
	
$(BIN):$(C_OBJ) $(CPP_OBJ)
	@$(CPP) $(CFLAGS) $(CPP_FLAGS) $(INCLUDES) -o $@ $^ -lliteos -L$(BUILD_DIR) -L./ -lcpptest -lpthread -lrt -static

$(CPP_OBJ):$(BUILD_DIR)/%.o:%.cpp
	@$(CPP) -c $< $(INCLUDES) $(CFLAGS) $(CPP_FLAGS) -o $@ -L./ -lcpptest

$(C_OBJ):$(BUILD_DIR)/%.o:%.c
	@$(CC) -c $< $(INCLUDES) $(CFLAGS) -o $@

$(LIB):$(LIB_OBJ)
#	$(CPP) -shared -o $@ $^
	@$(AR) -r $@ $^

$(LIB_OBJ):$(BUILD_DIR)/%.o:%.c
	@$(CC) $(CFLAGS)	$(INCLUDES) -c $< -o $@

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)
    
clean:
	rm -rf $(BUILD_DIR) bin gcov *.htm *.log

run:
	./$(BIN)

cov:
	mkdir -p gcov
	./$(BIN)
	lcov -c -o gcov/gcov.info -d . -b . #--rc lcov_branch_coverage=1
	lcov -e gcov/gcov.info $(FILE_PATTERN) -o gcov/gcov.info #--rc lcov_branch_coverage=1
	genhtml -o gcov/html gcov/gcov.info #--rc genhtml_branch_coverage=1

memcheck:
	valgrind --tool=memcheck --leak-check=full --show-reachable=yes --trace-children=yes --track-origins=yes --smc-check=all ./$(BIN) 2>&1 | tee memcheck.log
