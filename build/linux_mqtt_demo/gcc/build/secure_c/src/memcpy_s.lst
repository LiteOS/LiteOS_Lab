GAS LISTING /tmp/ccPqxGpM.s 			page 1


   1              		.file	"memcpy_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.SecDoMemcpy,"ax",@progbits
   6              	SecDoMemcpy:
   7              	.LFB6:
   8              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/securecutil.h"
   1:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  16:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  17:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  18:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #include "securec.h"
  19:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  20:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_MSC_VER)) && (_MSC_VER >= 1400)
  21:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING __pragma(warning(push)) \
  22:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     __pragma(warning(disable:4996 4127))
  23:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING  __pragma(warning(pop))
  24:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  25:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING
  26:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING
  27:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  28:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_WHILE_ZERO SECUREC_MASK_MSVC_CRT_WARNING while (0) SECUREC_END_MASK_MSVC_CRT_WARNIN
  29:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  30:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_STRNLEN
  31:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 700) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURC
  32:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  33:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  34:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  35:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__GLIBC__) && __GLIBC__ >= 2 && defined(__GLIBC_MINOR__) && __GLIBC_MINOR__ >= 10
  36:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 1
  37:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  38:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  39:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  40:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  41:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  42:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  43:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  44:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  45:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  46:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  47:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* in kernel disbale functions */
  48:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  49:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 0
  50:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
GAS LISTING /tmp/ccPqxGpM.s 			page 2


  51:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  52:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 0
  53:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  54:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  55:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 0
  56:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  57:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  58:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 0
  59:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  60:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  61:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 0
  62:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  63:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  64:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 0
  65:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  66:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no in kernel */
  67:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support file, can define this macro to 0. */
  68:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  69:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 1
  70:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  71:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  72:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 1
  73:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  74:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support float, can define this macro to 0. */
  75:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  76:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 1
  77:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  78:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  79:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 1
  80:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  81:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  82:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 1
  83:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  84:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  85:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 1
  86:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  87:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  88:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  89:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  90:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_INT_MAX                     2147483647
  91:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_SIXTEEN(x)              ((x) << 4)
  92:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_EIGHT(x)                ((x) << 3)
  93:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN(x)                  ((((x) << 2) + (x)) << 1)
  94:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Limited format input and output width */
  95:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN_DIV_TEN       21474836
  96:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN               SECUREC_MUL_TEN(SECUREC_MAX_WIDTH_LEN_DIV_TEN)
  97:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Is the x multiplied by 10 greater than */
  98:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN_ADD_BEYOND_MAX(x)   (((x) > SECUREC_MAX_WIDTH_LEN_DIV_TEN))
  99:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 100:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE               (309 + 40)  /* Max length of double value */
 101:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE_LB            (4932 + 40) /* Max length of long double value */
 102:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_DEFAULT_PRECISION     6
 103:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 104:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* This macro does not handle pointer equality or integer overflow */
 105:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_NO_OVERLAP(dest, src, count) \
 106:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) <= (char *)(dest)) || \
 107:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) <= (const char *)(src)))
GAS LISTING /tmp/ccPqxGpM.s 			page 3


 108:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 109:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_IS_OVERLAP(dest, src, count) \
 110:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) > (char *)(dest)) || \
 111:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) > (const char *)(src)))
 112:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 113:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 114:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap, len is the length of the string not include terminator
 115:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 116:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 117:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_NO_OVERLAP(dest, src, len) \
 118:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) < (dest)) || \
 119:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) < (src)))
 120:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 121:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 122:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcpy wcscpy function, dest len and src Len are not inclu
 123:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 124:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 125:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_IS_OVERLAP(dest, src, len) \
 126:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) >= (dest)) || \
 127:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) >= (src)))
 128:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 129:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 130:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcat wcscat function, dest len and src Len are not inclu
 131:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 132:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 133:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CAT_STRING_IS_OVERLAP(dest, destLen, src, srcLen) \
 134:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((dest) < (src) && ((dest) + (destLen) + (srcLen)) >= (src)) || \
 135:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((src) < (dest) && ((src) + (srcLen)) >= (dest)))
 136:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 137:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 138:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_HAVE_STRNLEN
 139:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 140:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = strnlen((str), (maxLen)); \
 141:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 142:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT(str, maxLen, outLen) do { \
 143:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     if ((maxLen) > 8) { \
 144:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         /* Optimization or len less then 8 */ \
 145:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         if (*((str) + 0) == '\0') { \
 146:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 0; \
 147:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 1) == '\0') { \
 148:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 1; \
 149:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 2) == '\0') { \
 150:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 2; \
 151:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 3) == '\0') { \
 152:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 3; \
 153:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 4) == '\0') { \
 154:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 4; \
 155:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 5) == '\0') { \
 156:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 5; \
 157:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 6) == '\0') { \
 158:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 6; \
 159:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 7) == '\0') { \
 160:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 7; \
 161:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 8) == '\0') { \
 162:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* Optimization with a length of 8 */ \
 163:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8; \
 164:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else { \
GAS LISTING /tmp/ccPqxGpM.s 			page 4


 165:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* The offset is 8 because the performance of 8 byte alignment is high */ \
 166:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8 + strnlen((str) + 8, (maxLen) - 8); \
 167:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } \
 168:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } else { \
 169:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         SECUREC_CALC_STR_LEN((str), (maxLen), (outLen)); \
 170:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 171:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 172:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 173:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 174:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const char *strEnd = (const char *)(str); \
 175:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     size_t availableSize = (size_t)(maxLen); \
 176:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (availableSize > 0 && *strEnd != '\0') { \
 177:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         --availableSize; \
 178:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 179:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 180:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = (size_t)(strEnd - (str)); \
 181:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 182:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT SECUREC_CALC_STR_LEN
 183:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 184:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 185:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_WSTR_LEN(str, maxLen, outLen) do { \
 186:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const wchar_t *strEnd = (const wchar_t *)(str); \
 187:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = 0; \
 188:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (*(outLen) < (maxLen) && *strEnd != L'\0') { \
 189:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         *(outLen) = *(outLen) + 1; \
 190:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 191:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 192:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 193:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 194:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 195:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FORMAT_OUTPUT_INPUT
 196:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT) || defined(__ARMCC_VERSION)
 197:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef __int64 SecInt64;
 198:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int64 SecUnsignedInt64;
 199:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__ARMCC_VERSION)
 200:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 201:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 202:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int32 SecUnsignedInt32;
 203:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 204:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 205:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 206:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef long long SecInt64;
 207:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned long long SecUnsignedInt64;
 208:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 209:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 210:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FOR_WCHAR
 211:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_VXWORKS_PLATFORM) && !defined(__WINT_TYPE__)
 212:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t wint_t;
 213:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 214:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecChar;
 215:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecUnsignedChar;
 216:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecInt;
 217:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecUnsignedInt;
 218:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /*  no SECUREC_FOR_WCHAR */
 219:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef char SecChar;
 220:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned char SecUnsignedChar;
 221:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef int SecInt;
GAS LISTING /tmp/ccPqxGpM.s 			page 5


 222:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt;
 223:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 224:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 225:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 226:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Determine whether the address is 8-byte aligned
 227:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Some systems do not have uintptr_t type, so  use NULL to clear tool alarm 507
 228:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 229:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ADDR_ALIGNED_8(addr) (SecIsAddrAligned8((addr), NULL) == 0)
 230:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 231:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* If you define the memory allocation function,
 232:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * you need to define the function prototype. You can define this macro as a header file.
 233:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 234:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_MALLOC_PROTOTYPE)
 235:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** SECUREC_MALLOC_PROTOTYPE
 236:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 237:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 238:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_MALLOC
 239:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MALLOC(x) malloc((size_t)(x))
 240:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 241:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 242:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_FREE
 243:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FREE(x)   free((void *)(x))
 244:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 245:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 246:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* struct for performance */
 247:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 248:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[1]; /* Performance optimization code structure assignment length 1 bytes */
 249:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf1;
 250:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 251:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[2]; /* Performance optimization code structure assignment length 2 bytes */
 252:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf2;
 253:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 254:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[3]; /* Performance optimization code structure assignment length 3 bytes */
 255:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf3;
 256:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 257:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[4]; /* Performance optimization code structure assignment length 4 bytes */
 258:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf4;
 259:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 260:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[5]; /* Performance optimization code structure assignment length 5 bytes */
 261:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf5;
 262:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 263:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[6]; /* Performance optimization code structure assignment length 6 bytes */
 264:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf6;
 265:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 266:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[7]; /* Performance optimization code structure assignment length 7 bytes */
 267:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf7;
 268:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 269:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[8]; /* Performance optimization code structure assignment length 8 bytes */
 270:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf8;
 271:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 272:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[9]; /* Performance optimization code structure assignment length 9 bytes */
 273:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf9;
 274:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 275:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[10]; /* Performance optimization code structure assignment length 10 bytes */
 276:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf10;
 277:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 278:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[11]; /* Performance optimization code structure assignment length 11 bytes */
GAS LISTING /tmp/ccPqxGpM.s 			page 6


 279:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf11;
 280:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 281:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[12]; /* Performance optimization code structure assignment length 12 bytes */
 282:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf12;
 283:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 284:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[13]; /* Performance optimization code structure assignment length 13 bytes */
 285:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf13;
 286:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 287:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[14]; /* Performance optimization code structure assignment length 14 bytes */
 288:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf14;
 289:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 290:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[15]; /* Performance optimization code structure assignment length 15 bytes */
 291:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf15;
 292:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 293:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[16]; /* Performance optimization code structure assignment length 16 bytes */
 294:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf16;
 295:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 296:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[17]; /* Performance optimization code structure assignment length 17 bytes */
 297:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf17;
 298:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 299:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[18]; /* Performance optimization code structure assignment length 18 bytes */
 300:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf18;
 301:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 302:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[19]; /* Performance optimization code structure assignment length 19 bytes */
 303:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf19;
 304:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 305:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[20]; /* Performance optimization code structure assignment length 20 bytes */
 306:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf20;
 307:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 308:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[21]; /* Performance optimization code structure assignment length 21 bytes */
 309:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf21;
 310:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 311:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[22]; /* Performance optimization code structure assignment length 22 bytes */
 312:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf22;
 313:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 314:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[23]; /* Performance optimization code structure assignment length 23 bytes */
 315:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf23;
 316:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 317:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[24]; /* Performance optimization code structure assignment length 24 bytes */
 318:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf24;
 319:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 320:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[25]; /* Performance optimization code structure assignment length 25 bytes */
 321:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf25;
 322:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 323:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[26]; /* Performance optimization code structure assignment length 26 bytes */
 324:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf26;
 325:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 326:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[27]; /* Performance optimization code structure assignment length 27 bytes */
 327:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf27;
 328:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 329:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[28]; /* Performance optimization code structure assignment length 28 bytes */
 330:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf28;
 331:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 332:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[29]; /* Performance optimization code structure assignment length 29 bytes */
 333:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf29;
 334:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 335:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[30]; /* Performance optimization code structure assignment length 30 bytes */
GAS LISTING /tmp/ccPqxGpM.s 			page 7


 336:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf30;
 337:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 338:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[31]; /* Performance optimization code structure assignment length 31 bytes */
 339:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf31;
 340:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 341:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[32]; /* Performance optimization code structure assignment length 32 bytes */
 342:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf32;
 343:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 344:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[33]; /* Performance optimization code structure assignment length 33 bytes */
 345:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf33;
 346:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 347:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[34]; /* Performance optimization code structure assignment length 34 bytes */
 348:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf34;
 349:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 350:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[35]; /* Performance optimization code structure assignment length 35 bytes */
 351:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf35;
 352:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 353:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[36]; /* Performance optimization code structure assignment length 36 bytes */
 354:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf36;
 355:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 356:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[37]; /* Performance optimization code structure assignment length 37 bytes */
 357:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf37;
 358:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 359:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[38]; /* Performance optimization code structure assignment length 38 bytes */
 360:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf38;
 361:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 362:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[39]; /* Performance optimization code structure assignment length 39 bytes */
 363:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf39;
 364:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 365:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[40]; /* Performance optimization code structure assignment length 40 bytes */
 366:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf40;
 367:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 368:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[41]; /* Performance optimization code structure assignment length 41 bytes */
 369:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf41;
 370:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 371:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[42]; /* Performance optimization code structure assignment length 42 bytes */
 372:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf42;
 373:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 374:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[43]; /* Performance optimization code structure assignment length 43 bytes */
 375:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf43;
 376:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 377:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[44]; /* Performance optimization code structure assignment length 44 bytes */
 378:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf44;
 379:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 380:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[45]; /* Performance optimization code structure assignment length 45 bytes */
 381:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf45;
 382:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 383:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[46]; /* Performance optimization code structure assignment length 46 bytes */
 384:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf46;
 385:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 386:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[47]; /* Performance optimization code structure assignment length 47 bytes */
 387:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf47;
 388:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 389:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[48]; /* Performance optimization code structure assignment length 48 bytes */
 390:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf48;
 391:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 392:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[49]; /* Performance optimization code structure assignment length 49 bytes */
GAS LISTING /tmp/ccPqxGpM.s 			page 8


 393:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf49;
 394:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 395:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[50]; /* Performance optimization code structure assignment length 50 bytes */
 396:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf50;
 397:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 398:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[51]; /* Performance optimization code structure assignment length 51 bytes */
 399:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf51;
 400:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 401:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[52]; /* Performance optimization code structure assignment length 52 bytes */
 402:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf52;
 403:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 404:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[53]; /* Performance optimization code structure assignment length 53 bytes */
 405:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf53;
 406:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 407:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[54]; /* Performance optimization code structure assignment length 54 bytes */
 408:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf54;
 409:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 410:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[55]; /* Performance optimization code structure assignment length 55 bytes */
 411:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf55;
 412:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 413:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[56]; /* Performance optimization code structure assignment length 56 bytes */
 414:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf56;
 415:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 416:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[57]; /* Performance optimization code structure assignment length 57 bytes */
 417:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf57;
 418:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 419:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[58]; /* Performance optimization code structure assignment length 58 bytes */
 420:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf58;
 421:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 422:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[59]; /* Performance optimization code structure assignment length 59 bytes */
 423:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf59;
 424:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 425:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[60]; /* Performance optimization code structure assignment length 60 bytes */
 426:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf60;
 427:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 428:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[61]; /* Performance optimization code structure assignment length 61 bytes */
 429:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf61;
 430:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 431:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[62]; /* Performance optimization code structure assignment length 62 bytes */
 432:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf62;
 433:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 434:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[63]; /* Performance optimization code structure assignment length 63 bytes */
 435:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf63;
 436:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 437:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[64]; /* Performance optimization code structure assignment length 64 bytes */
 438:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf64;
 439:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 440:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 441:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 442:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 443:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* User can change the error handler by modify the following definition,
 444:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * such as logging the detail error in file.
 445:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 446:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(_DEBUG) || defined(DEBUG)
 447:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_ASSERT)
 448:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) assert(msg "invalid argument" == NULL)
 449:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    assert(msg "invalid dest buffer size" == NULL)
GAS LISTING /tmp/ccPqxGpM.s 			page 9


 450:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   assert(msg "buffer overlap" == NULL)
 451:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_PRINTF)
 452:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
 453:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printk("%s invalid argument\n", msg)
 454:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printk("%s invalid dest buffer size\n", msg)
 455:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printk("%s buffer overlap\n", msg)
 456:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 457:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printf("%s invalid argument\n", msg)
 458:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printf("%s invalid dest buffer size\n", msg)
 459:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printf("%s buffer overlap\n", msg)
 460:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 461:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 462:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) LogSecureCRuntimeError(msg " EINVAL\n")
 463:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    LogSecureCRuntimeError(msg " ERANGE\n")
 464:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   LogSecureCRuntimeError(msg " EOVERLAP\n")
 465:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no HANDLER is defined */
 466:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 467:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 468:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 469:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 470:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no DEBUG */
 471:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 472:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 473:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 474:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 475:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 476:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef __cplusplus
 477:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** extern "C" {
 478:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 479:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 480:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* assembly language memory copy and memory set for X86 or MIPS ... */
 481:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 482:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memcpy_opt(void *, const void *, size_t);
 483:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memset_opt(void *, int, size_t);
 484:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 485:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 486:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 487:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void LogSecureCRuntimeError(const char *errDetail);
 488:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 489:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 490:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_INLINE_DO_MEMCPY
 491:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** static void SecDoMemcpy(void *dest, const void *src, size_t count)
 492:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** {
   9              		.loc 1 492 1
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              	.LCFI0:
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              	.LCFI1:
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DE8 		movq	%rdi, -24(%rbp)
  21 0010 488975E0 		movq	%rsi, -32(%rbp)
  22 0014 488955D8 		movq	%rdx, -40(%rbp)
GAS LISTING /tmp/ccPqxGpM.s 			page 10


  23              		.loc 1 492 1
  24 0018 64488B04 		movq	%fs:40, %rax
  24      25280000 
  24      00
  25 0021 488945F8 		movq	%rax, -8(%rbp)
  26 0025 31C0     		xorl	%eax, %eax
 493:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /*
 494:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      * if SECUREC_USE_ASM macro is enabled, it will call assembly language function to improve perf
 495:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      */
 496:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 497:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy_opt(dest, src, count);
 498:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 499:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /* large enough, let system API do it */
 500:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy(dest, src, count);
  27              		.loc 1 500 11
  28 0027 488B55D8 		movq	-40(%rbp), %rdx
  29 002b 488B4DE0 		movq	-32(%rbp), %rcx
  30 002f 488B45E8 		movq	-24(%rbp), %rax
  31 0033 4889CE   		movq	%rcx, %rsi
  32 0036 4889C7   		movq	%rax, %rdi
  33 0039 E8000000 		call	memcpy@PLT
  33      00
 501:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 502:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** }
  34              		.loc 1 502 1
  35 003e 90       		nop
  36 003f 488B45F8 		movq	-8(%rbp), %rax
  37 0043 64483304 		xorq	%fs:40, %rax
  37      25280000 
  37      00
  38 004c 7405     		je	.L2
  39 004e E8000000 		call	__stack_chk_fail@PLT
  39      00
  40              	.L2:
  41 0053 C9       		leave
  42              	.LCFI2:
  43              		.cfi_def_cfa 7, 8
  44 0054 C3       		ret
  45              		.cfi_endproc
  46              	.LFE6:
  48              		.section	.text.SecIsAddrAligned8,"ax",@progbits
  50              	SecIsAddrAligned8:
  51              	.LFB7:
  52              		.file 2 "/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c"
   1:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * See the Mulan PSL v1 for more details.  
GAS LISTING /tmp/ccPqxGpM.s 			page 11


  14:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /* [Standardize-exceptions] Use unsafe function: Portability
  16:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * [reason] Use unsafe function to implement security function to maintain platform compatibility.
  17:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *          And sufficient input validation is performed before calling
  18:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
  19:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #define SECUREC_INLINE_DO_MEMCPY   1
  20:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #include "securecutil.h"
  21:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
  22:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #ifndef SECUREC_MEMCOPY_WITH_PERFORMANCE
  23:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #define SECUREC_MEMCOPY_WITH_PERFORMANCE 0
  24:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
  25:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
  26:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #if SECUREC_WITH_PERFORMANCE_ADDONS || SECUREC_MEMCOPY_WITH_PERFORMANCE
  27:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #ifndef SECUREC_MEMCOPY_THRESHOLD_SIZE
  28:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #define SECUREC_MEMCOPY_THRESHOLD_SIZE 64UL
  29:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
  30:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /*
  31:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * Determine whether the address is 8-byte aligned, use static to increase performance
  32:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * return 0 is aligned
  33:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
  34:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** static int SecIsAddrAligned8(const void *addr, const void *zeroAddr)
  35:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** {
  53              		.loc 2 35 1
  54              		.cfi_startproc
  55 0000 F30F1EFA 		endbr64
  56 0004 55       		pushq	%rbp
  57              	.LCFI3:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 6, -16
  60 0005 4889E5   		movq	%rsp, %rbp
  61              	.LCFI4:
  62              		.cfi_def_cfa_register 6
  63 0008 4883EC20 		subq	$32, %rsp
  64 000c 48897DE8 		movq	%rdi, -24(%rbp)
  65 0010 488975E0 		movq	%rsi, -32(%rbp)
  66              		.loc 2 35 1
  67 0014 64488B04 		movq	%fs:40, %rax
  67      25280000 
  67      00
  68 001d 488945F8 		movq	%rax, -8(%rbp)
  69 0021 31C0     		xorl	%eax, %eax
  36:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     return (int)(((size_t)((const char*)addr - (const char*)zeroAddr)) & 7); /* use 7 to check alig
  70              		.loc 2 36 46
  71 0023 488B45E8 		movq	-24(%rbp), %rax
  72 0027 482B45E0 		subq	-32(%rbp), %rax
  73              		.loc 2 36 12
  74 002b 83E007   		andl	$7, %eax
  37:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** }
  75              		.loc 2 37 1
  76 002e 488B55F8 		movq	-8(%rbp), %rdx
  77 0032 64483314 		xorq	%fs:40, %rdx
  77      25280000 
  77      00
  78 003b 7405     		je	.L5
  79 003d E8000000 		call	__stack_chk_fail@PLT
  79      00
  80              	.L5:
GAS LISTING /tmp/ccPqxGpM.s 			page 12


  81 0042 C9       		leave
  82              	.LCFI5:
  83              		.cfi_def_cfa 7, 8
  84 0043 C3       		ret
  85              		.cfi_endproc
  86              	.LFE7:
  88              		.section	.text.SecMemcpyError,"ax",@progbits
  90              	SecMemcpyError:
  91              	.LFB8:
  38:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
  39:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #define SECUREC_SMALL_MEM_COPY do { \
  40:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (SECUREC_ADDR_ALIGNED_8(dest) && SECUREC_ADDR_ALIGNED_8(src)) { \
  41:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         /* use struct assignment */ \
  42:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         switch (count) { \
  43:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 1: \
  44:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf1 *)dest = *(const SecStrBuf1 *)src; \
  45:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  46:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 2: \
  47:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf2 *)dest = *(const SecStrBuf2 *)src; \
  48:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  49:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 3: \
  50:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf3 *)dest = *(const SecStrBuf3 *)src; \
  51:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  52:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 4: \
  53:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf4 *)dest = *(const SecStrBuf4 *)src; \
  54:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  55:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 5: \
  56:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf5 *)dest = *(const SecStrBuf5 *)src; \
  57:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  58:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 6: \
  59:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf6 *)dest = *(const SecStrBuf6 *)src; \
  60:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  61:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 7: \
  62:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf7 *)dest = *(const SecStrBuf7 *)src; \
  63:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  64:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 8: \
  65:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf8 *)dest = *(const SecStrBuf8 *)src; \
  66:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  67:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 9: \
  68:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf9 *)dest = *(const SecStrBuf9 *)src; \
  69:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  70:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 10: \
  71:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf10 *)dest = *(const SecStrBuf10 *)src; \
  72:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  73:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 11: \
  74:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf11 *)dest = *(const SecStrBuf11 *)src; \
  75:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  76:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 12: \
  77:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf12 *)dest = *(const SecStrBuf12 *)src; \
  78:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  79:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 13: \
  80:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf13 *)dest = *(const SecStrBuf13 *)src; \
  81:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  82:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 14: \
  83:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf14 *)dest = *(const SecStrBuf14 *)src; \
  84:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  85:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 15: \
GAS LISTING /tmp/ccPqxGpM.s 			page 13


  86:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf15 *)dest = *(const SecStrBuf15 *)src; \
  87:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  88:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 16: \
  89:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf16 *)dest = *(const SecStrBuf16 *)src; \
  90:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  91:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 17: \
  92:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf17 *)dest = *(const SecStrBuf17 *)src; \
  93:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  94:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 18: \
  95:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf18 *)dest = *(const SecStrBuf18 *)src; \
  96:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
  97:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 19: \
  98:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf19 *)dest = *(const SecStrBuf19 *)src; \
  99:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 100:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 20: \
 101:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf20 *)dest = *(const SecStrBuf20 *)src; \
 102:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 103:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 21: \
 104:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf21 *)dest = *(const SecStrBuf21 *)src; \
 105:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 106:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 22: \
 107:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf22 *)dest = *(const SecStrBuf22 *)src; \
 108:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 109:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 23: \
 110:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf23 *)dest = *(const SecStrBuf23 *)src; \
 111:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 112:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 24: \
 113:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf24 *)dest = *(const SecStrBuf24 *)src; \
 114:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 115:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 25: \
 116:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf25 *)dest = *(const SecStrBuf25 *)src; \
 117:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 118:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 26: \
 119:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf26 *)dest = *(const SecStrBuf26 *)src; \
 120:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 121:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 27: \
 122:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf27 *)dest = *(const SecStrBuf27 *)src; \
 123:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 124:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 28: \
 125:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf28 *)dest = *(const SecStrBuf28 *)src; \
 126:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 127:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 29: \
 128:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf29 *)dest = *(const SecStrBuf29 *)src; \
 129:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 130:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 30: \
 131:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf30 *)dest = *(const SecStrBuf30 *)src; \
 132:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 133:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 31: \
 134:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf31 *)dest = *(const SecStrBuf31 *)src; \
 135:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 136:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 32: \
 137:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf32 *)dest = *(const SecStrBuf32 *)src; \
 138:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 139:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 33: \
 140:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf33 *)dest = *(const SecStrBuf33 *)src; \
 141:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 142:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 34: \
GAS LISTING /tmp/ccPqxGpM.s 			page 14


 143:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf34 *)dest = *(const SecStrBuf34 *)src; \
 144:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 145:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 35: \
 146:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf35 *)dest = *(const SecStrBuf35 *)src; \
 147:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 148:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 36: \
 149:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf36 *)dest = *(const SecStrBuf36 *)src; \
 150:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 151:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 37: \
 152:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf37 *)dest = *(const SecStrBuf37 *)src; \
 153:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 154:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 38: \
 155:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf38 *)dest = *(const SecStrBuf38 *)src; \
 156:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 157:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 39: \
 158:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf39 *)dest = *(const SecStrBuf39 *)src; \
 159:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 160:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 40: \
 161:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf40 *)dest = *(const SecStrBuf40 *)src; \
 162:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 163:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 41: \
 164:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf41 *)dest = *(const SecStrBuf41 *)src; \
 165:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 166:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 42: \
 167:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf42 *)dest = *(const SecStrBuf42 *)src; \
 168:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 169:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 43: \
 170:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf43 *)dest = *(const SecStrBuf43 *)src; \
 171:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 172:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 44: \
 173:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf44 *)dest = *(const SecStrBuf44 *)src; \
 174:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 175:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 45: \
 176:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf45 *)dest = *(const SecStrBuf45 *)src; \
 177:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 178:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 46: \
 179:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf46 *)dest = *(const SecStrBuf46 *)src; \
 180:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 181:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 47: \
 182:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf47 *)dest = *(const SecStrBuf47 *)src; \
 183:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 184:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 48: \
 185:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf48 *)dest = *(const SecStrBuf48 *)src; \
 186:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 187:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 49: \
 188:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf49 *)dest = *(const SecStrBuf49 *)src; \
 189:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 190:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 50: \
 191:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf50 *)dest = *(const SecStrBuf50 *)src; \
 192:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 193:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 51: \
 194:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf51 *)dest = *(const SecStrBuf51 *)src; \
 195:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 196:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 52: \
 197:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf52 *)dest = *(const SecStrBuf52 *)src; \
 198:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 199:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 53: \
GAS LISTING /tmp/ccPqxGpM.s 			page 15


 200:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf53 *)dest = *(const SecStrBuf53 *)src; \
 201:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 202:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 54: \
 203:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf54 *)dest = *(const SecStrBuf54 *)src; \
 204:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 205:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 55: \
 206:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf55 *)dest = *(const SecStrBuf55 *)src; \
 207:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 208:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 56: \
 209:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf56 *)dest = *(const SecStrBuf56 *)src; \
 210:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 211:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 57: \
 212:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf57 *)dest = *(const SecStrBuf57 *)src; \
 213:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 214:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 58: \
 215:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf58 *)dest = *(const SecStrBuf58 *)src; \
 216:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 217:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 59: \
 218:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf59 *)dest = *(const SecStrBuf59 *)src; \
 219:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 220:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 60: \
 221:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf60 *)dest = *(const SecStrBuf60 *)src; \
 222:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 223:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 61: \
 224:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf61 *)dest = *(const SecStrBuf61 *)src; \
 225:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 226:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 62: \
 227:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf62 *)dest = *(const SecStrBuf62 *)src; \
 228:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 229:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 63: \
 230:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf63 *)dest = *(const SecStrBuf63 *)src; \
 231:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 232:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 64: \
 233:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(SecStrBuf64 *)dest = *(const SecStrBuf64 *)src; \
 234:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 235:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             default: \
 236:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 237:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         } /* END switch */ \
 238:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     } else { \
 239:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         char *tmpDest = (char *)dest; \
 240:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         const char *tmpSrc = (const char *)src; \
 241:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         switch (count) { \
 242:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 64: \
 243:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 244:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 245:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 63: \
 246:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 247:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 248:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 62: \
 249:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 250:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 251:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 61: \
 252:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 253:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 254:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 60: \
 255:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 256:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
GAS LISTING /tmp/ccPqxGpM.s 			page 16


 257:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 59: \
 258:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 259:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 260:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 58: \
 261:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 262:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 263:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 57: \
 264:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 265:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 266:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 56: \
 267:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 268:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 269:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 55: \
 270:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 271:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 272:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 54: \
 273:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 274:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 275:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 53: \
 276:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 277:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 278:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 52: \
 279:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 280:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 281:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 51: \
 282:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 283:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 284:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 50: \
 285:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 286:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 287:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 49: \
 288:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 289:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 290:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 48: \
 291:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 292:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 293:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 47: \
 294:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 295:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 296:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 46: \
 297:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 298:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 299:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 45: \
 300:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 301:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 302:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 44: \
 303:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 304:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 305:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 43: \
 306:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 307:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 308:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 42: \
 309:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 310:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 311:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 41: \
 312:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 313:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
GAS LISTING /tmp/ccPqxGpM.s 			page 17


 314:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 40: \
 315:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 316:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 317:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 39: \
 318:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 319:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 320:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 38: \
 321:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 322:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 323:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 37: \
 324:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 325:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 326:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 36: \
 327:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 328:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 329:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 35: \
 330:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 331:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 332:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 34: \
 333:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 334:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 335:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 33: \
 336:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 337:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 338:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 32: \
 339:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 340:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 341:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 31: \
 342:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 343:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 344:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 30: \
 345:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 346:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 347:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 29: \
 348:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 349:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 350:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 28: \
 351:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 352:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 353:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 27: \
 354:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 355:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 356:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 26: \
 357:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 358:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 359:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 25: \
 360:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 361:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 362:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 24: \
 363:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 364:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 365:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 23: \
 366:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 367:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 368:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 22: \
 369:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 370:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
GAS LISTING /tmp/ccPqxGpM.s 			page 18


 371:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 21: \
 372:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 373:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 374:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 20: \
 375:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 376:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 377:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 19: \
 378:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 379:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 380:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 18: \
 381:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 382:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 383:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 17: \
 384:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 385:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 386:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 16: \
 387:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 388:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 389:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 15: \
 390:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 391:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 392:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 14: \
 393:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 394:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 395:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 13: \
 396:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 397:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 398:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 12: \
 399:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 400:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 401:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 11: \
 402:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 403:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 404:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 10: \
 405:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 406:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 407:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 9: \
 408:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 409:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 410:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 8: \
 411:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 412:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 413:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 7: \
 414:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 415:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 416:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 6: \
 417:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 418:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 419:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 5: \
 420:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 421:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 422:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 4: \
 423:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 424:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 425:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 3: \
 426:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 427:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
GAS LISTING /tmp/ccPqxGpM.s 			page 19


 428:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 2: \
 429:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 430:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 431:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             case 1: \
 432:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 *(tmpDest++) = *(tmpSrc++); \
 433:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 /* fall-through */ /* FALLTHRU */ \
 434:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             default: \
 435:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                 break; \
 436:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         } \
 437:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     } \
 438:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** } SECUREC_WHILE_ZERO
 439:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
 440:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 441:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /*
 442:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * Handling errors
 443:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
 444:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** static errno_t SecMemcpyError(void *dest, size_t destMax, const void *src, size_t count)
 445:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** {
  92              		.loc 2 445 1
  93              		.cfi_startproc
  94 0000 F30F1EFA 		endbr64
  95 0004 55       		pushq	%rbp
  96              	.LCFI6:
  97              		.cfi_def_cfa_offset 16
  98              		.cfi_offset 6, -16
  99 0005 4889E5   		movq	%rsp, %rbp
 100              	.LCFI7:
 101              		.cfi_def_cfa_register 6
 102 0008 4883EC30 		subq	$48, %rsp
 103 000c 48897DE8 		movq	%rdi, -24(%rbp)
 104 0010 488975E0 		movq	%rsi, -32(%rbp)
 105 0014 488955D8 		movq	%rdx, -40(%rbp)
 106 0018 48894DD0 		movq	%rcx, -48(%rbp)
 107              		.loc 2 445 1
 108 001c 64488B04 		movq	%fs:40, %rax
 108      25280000 
 108      00
 109 0025 488945F8 		movq	%rax, -8(%rbp)
 110 0029 31C0     		xorl	%eax, %eax
 446:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (destMax == 0 || destMax > SECUREC_MEM_MAX_LEN) {
 111              		.loc 2 446 8
 112 002b 48837DE0 		cmpq	$0, -32(%rbp)
 112      00
 113 0030 740B     		je	.L7
 114              		.loc 2 446 22 discriminator 1
 115 0032 B8000000 		movl	$2147483648, %eax
 115      80
 116 0037 483945E0 		cmpq	%rax, -32(%rbp)
 117 003b 720A     		jb	.L8
 118              	.L7:
 447:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SECUREC_ERROR_INVALID_RANGE("memcpy_s");
 448:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return ERANGE;
 119              		.loc 2 448 16
 120 003d B8220000 		movl	$34, %eax
 120      00
 121 0042 E9CC0000 		jmp	.L9
 121      00
GAS LISTING /tmp/ccPqxGpM.s 			page 20


 122              	.L8:
 449:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 450:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (dest == NULL || src == NULL) {
 123              		.loc 2 450 8
 124 0047 48837DE8 		cmpq	$0, -24(%rbp)
 124      00
 125 004c 7407     		je	.L10
 126              		.loc 2 450 22 discriminator 1
 127 004e 48837DD8 		cmpq	$0, -40(%rbp)
 127      00
 128 0053 7530     		jne	.L11
 129              	.L10:
 451:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SECUREC_ERROR_INVALID_PARAMTER("memcpy_s");
 452:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         if (dest != NULL) {
 130              		.loc 2 452 12
 131 0055 48837DE8 		cmpq	$0, -24(%rbp)
 131      00
 132 005a 741F     		je	.L12
 453:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             (void)memset(dest, 0, destMax);
 133              		.loc 2 453 19
 134 005c 488B55E0 		movq	-32(%rbp), %rdx
 135 0060 488B45E8 		movq	-24(%rbp), %rax
 136 0064 BE000000 		movl	$0, %esi
 136      00
 137 0069 4889C7   		movq	%rax, %rdi
 138 006c E8000000 		call	memset@PLT
 138      00
 454:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****             return EINVAL_AND_RESET;
 139              		.loc 2 454 20
 140 0071 B8960000 		movl	$150, %eax
 140      00
 141 0076 E9980000 		jmp	.L9
 141      00
 142              	.L12:
 455:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         }
 456:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return EINVAL;
 143              		.loc 2 456 16
 144 007b B8160000 		movl	$22, %eax
 144      00
 145 0080 E98E0000 		jmp	.L9
 145      00
 146              	.L11:
 457:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 458:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (count > destMax) {
 147              		.loc 2 458 8
 148 0085 488B45D0 		movq	-48(%rbp), %rax
 149 0089 483B45E0 		cmpq	-32(%rbp), %rax
 150 008d 761C     		jbe	.L13
 459:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         (void)memset(dest, 0, destMax);
 151              		.loc 2 459 15
 152 008f 488B55E0 		movq	-32(%rbp), %rdx
 153 0093 488B45E8 		movq	-24(%rbp), %rax
 154 0097 BE000000 		movl	$0, %esi
 154      00
 155 009c 4889C7   		movq	%rax, %rdi
 156 009f E8000000 		call	memset@PLT
 156      00
GAS LISTING /tmp/ccPqxGpM.s 			page 21


 460:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SECUREC_ERROR_INVALID_RANGE("memcpy_s");
 461:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return ERANGE_AND_RESET;
 157              		.loc 2 461 16
 158 00a4 B8A20000 		movl	$162, %eax
 158      00
 159 00a9 EB68     		jmp	.L9
 160              	.L13:
 462:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 463:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (dest == src) {
 161              		.loc 2 463 8
 162 00ab 488B45E8 		movq	-24(%rbp), %rax
 163 00af 483B45D8 		cmpq	-40(%rbp), %rax
 164 00b3 7507     		jne	.L14
 464:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return EOK;
 165              		.loc 2 464 16
 166 00b5 B8000000 		movl	$0, %eax
 166      00
 167 00ba EB57     		jmp	.L9
 168              	.L14:
 465:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 466:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if ((dest > src && dest < (const void *)((const unsigned char *)src + count)) || \
 169              		.loc 2 466 8
 170 00bc 488B45E8 		movq	-24(%rbp), %rax
 171 00c0 483B45D8 		cmpq	-40(%rbp), %rax
 172 00c4 7611     		jbe	.L15
 173              		.loc 2 466 31 discriminator 1
 174 00c6 488B55D8 		movq	-40(%rbp), %rdx
 175 00ca 488B45D0 		movq	-48(%rbp), %rax
 176 00ce 4801D0   		addq	%rdx, %rax
 177              		.loc 2 466 21 discriminator 1
 178 00d1 483945E8 		cmpq	%rax, -24(%rbp)
 179 00d5 721B     		jb	.L16
 180              	.L15:
 181              		.loc 2 466 83 discriminator 3
 182 00d7 488B45D8 		movq	-40(%rbp), %rax
 183 00db 483B45E8 		cmpq	-24(%rbp), %rax
 184 00df 762D     		jbe	.L17
 467:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         (src > dest && src < (void *)((unsigned char *)dest + count))) {
 185              		.loc 2 467 30
 186 00e1 488B55E8 		movq	-24(%rbp), %rdx
 187 00e5 488B45D0 		movq	-48(%rbp), %rax
 188 00e9 4801D0   		addq	%rdx, %rax
 189              		.loc 2 467 21
 190 00ec 483945D8 		cmpq	%rax, -40(%rbp)
 191 00f0 731C     		jnb	.L17
 192              	.L16:
 468:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         (void)memset(dest, 0, destMax);
 193              		.loc 2 468 15
 194 00f2 488B55E0 		movq	-32(%rbp), %rdx
 195 00f6 488B45E8 		movq	-24(%rbp), %rax
 196 00fa BE000000 		movl	$0, %esi
 196      00
 197 00ff 4889C7   		movq	%rax, %rdi
 198 0102 E8000000 		call	memset@PLT
 198      00
 469:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SECUREC_ERROR_BUFFER_OVERLAP("memcpy_s");
 470:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return EOVERLAP_AND_RESET;
GAS LISTING /tmp/ccPqxGpM.s 			page 22


 199              		.loc 2 470 16
 200 0107 B8B60000 		movl	$182, %eax
 200      00
 201 010c EB05     		jmp	.L9
 202              	.L17:
 471:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 472:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     /* count == 0 also return EOK */
 473:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     return EOK;
 203              		.loc 2 473 12
 204 010e B8000000 		movl	$0, %eax
 204      00
 205              	.L9:
 474:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** }
 206              		.loc 2 474 1
 207 0113 488B4DF8 		movq	-8(%rbp), %rcx
 208 0117 6448330C 		xorq	%fs:40, %rcx
 208      25280000 
 208      00
 209 0120 7405     		je	.L18
 210 0122 E8000000 		call	__stack_chk_fail@PLT
 210      00
 211              	.L18:
 212 0127 C9       		leave
 213              	.LCFI8:
 214              		.cfi_def_cfa 7, 8
 215 0128 C3       		ret
 216              		.cfi_endproc
 217              	.LFE8:
 219              		.section	.text.SecDoMemcpyOpt,"ax",@progbits
 221              	SecDoMemcpyOpt:
 222              	.LFB9:
 475:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 476:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #if SECUREC_WITH_PERFORMANCE_ADDONS || SECUREC_MEMCOPY_WITH_PERFORMANCE
 477:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /*
 478:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * Performance optimization
 479:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
 480:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** static void SecDoMemcpyOpt(void *dest, const void *src, size_t count)
 481:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** {
 223              		.loc 2 481 1
 224              		.cfi_startproc
 225 0000 F30F1EFA 		endbr64
 226 0004 55       		pushq	%rbp
 227              	.LCFI9:
 228              		.cfi_def_cfa_offset 16
 229              		.cfi_offset 6, -16
 230 0005 4889E5   		movq	%rsp, %rbp
 231              	.LCFI10:
 232              		.cfi_def_cfa_register 6
 233 0008 53       		pushq	%rbx
 234 0009 4883EC48 		subq	$72, %rsp
 235              		.cfi_offset 3, -24
 236 000d 48897DC8 		movq	%rdi, -56(%rbp)
 237 0011 488975C0 		movq	%rsi, -64(%rbp)
 238 0015 488955B8 		movq	%rdx, -72(%rbp)
 239              		.loc 2 481 1
 240 0019 64488B04 		movq	%fs:40, %rax
 240      25280000 
GAS LISTING /tmp/ccPqxGpM.s 			page 23


 240      00
 241 0022 488945E8 		movq	%rax, -24(%rbp)
 242 0026 31C0     		xorl	%eax, %eax
 482:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (count > SECUREC_MEMCOPY_THRESHOLD_SIZE) {
 243              		.loc 2 482 8
 244 0028 48837DB8 		cmpq	$64, -72(%rbp)
 244      40
 245 002d 761C     		jbe	.L20
 483:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SecDoMemcpy(dest, src, count);
 246              		.loc 2 483 9
 247 002f 488B55B8 		movq	-72(%rbp), %rdx
 248 0033 488B4DC0 		movq	-64(%rbp), %rcx
 249 0037 488B45C8 		movq	-56(%rbp), %rax
 250 003b 4889CE   		movq	%rcx, %rsi
 251 003e 4889C7   		movq	%rax, %rdi
 252 0041 E8000000 		call	SecDoMemcpy
 252      00
 484:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     } else {
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SECUREC_SMALL_MEM_COPY;
 486:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 487:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     return;
 253              		.loc 2 487 5
 254 0046 E9821400 		jmp	.L19
 254      00
 255              	.L20:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 256              		.loc 2 485 9
 257 004b 488B45C8 		movq	-56(%rbp), %rax
 258 004f BE000000 		movl	$0, %esi
 258      00
 259 0054 4889C7   		movq	%rax, %rdi
 260 0057 E8000000 		call	SecIsAddrAligned8
 260      00
 261 005c 85C0     		testl	%eax, %eax
 262 005e 0F85E70C 		jne	.L22
 262      0000
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 263              		.loc 2 485 9 is_stmt 0 discriminator 1
 264 0064 488B45C0 		movq	-64(%rbp), %rax
 265 0068 BE000000 		movl	$0, %esi
 265      00
 266 006d 4889C7   		movq	%rax, %rdi
 267 0070 E8000000 		call	SecIsAddrAligned8
 267      00
 268 0075 85C0     		testl	%eax, %eax
 269 0077 0F85CE0C 		jne	.L22
 269      0000
 270 007d 48837DB8 		cmpq	$64, -72(%rbp)
 270      40
 271 0082 0F87BD0C 		ja	.L158
 271      0000
 272 0088 488B45B8 		movq	-72(%rbp), %rax
 273 008c 488D1485 		leaq	0(,%rax,4), %rdx
 273      00000000 
 274 0094 488D0500 		leaq	.L25(%rip), %rax
 274      000000
 275 009b 8B0402   		movl	(%rdx,%rax), %eax
GAS LISTING /tmp/ccPqxGpM.s 			page 24


 276 009e 4898     		cltq
 277 00a0 488D1500 		leaq	.L25(%rip), %rdx
 277      000000
 278 00a7 4801D0   		addq	%rdx, %rax
 279 00aa 3EFFE0   		notrack jmp	*%rax
 280              		.section	.rodata.SecDoMemcpyOpt,"a",@progbits
 281              		.align 4
 282              		.align 4
 283              	.L25:
 284 0000 00000000 		.long	.L158-.L25
 285 0004 00000000 		.long	.L88-.L25
 286 0008 00000000 		.long	.L87-.L25
 287 000c 00000000 		.long	.L86-.L25
 288 0010 00000000 		.long	.L85-.L25
 289 0014 00000000 		.long	.L84-.L25
 290 0018 00000000 		.long	.L83-.L25
 291 001c 00000000 		.long	.L82-.L25
 292 0020 00000000 		.long	.L81-.L25
 293 0024 00000000 		.long	.L80-.L25
 294 0028 00000000 		.long	.L79-.L25
 295 002c 00000000 		.long	.L78-.L25
 296 0030 00000000 		.long	.L77-.L25
 297 0034 00000000 		.long	.L76-.L25
 298 0038 00000000 		.long	.L75-.L25
 299 003c 00000000 		.long	.L74-.L25
 300 0040 00000000 		.long	.L73-.L25
 301 0044 00000000 		.long	.L72-.L25
 302 0048 00000000 		.long	.L71-.L25
 303 004c 00000000 		.long	.L70-.L25
 304 0050 00000000 		.long	.L69-.L25
 305 0054 00000000 		.long	.L68-.L25
 306 0058 00000000 		.long	.L67-.L25
 307 005c 00000000 		.long	.L66-.L25
 308 0060 00000000 		.long	.L65-.L25
 309 0064 00000000 		.long	.L64-.L25
 310 0068 00000000 		.long	.L63-.L25
 311 006c 00000000 		.long	.L62-.L25
 312 0070 00000000 		.long	.L61-.L25
 313 0074 00000000 		.long	.L60-.L25
 314 0078 00000000 		.long	.L59-.L25
 315 007c 00000000 		.long	.L58-.L25
 316 0080 00000000 		.long	.L57-.L25
 317 0084 00000000 		.long	.L56-.L25
 318 0088 00000000 		.long	.L55-.L25
 319 008c 00000000 		.long	.L54-.L25
 320 0090 00000000 		.long	.L53-.L25
 321 0094 00000000 		.long	.L52-.L25
 322 0098 00000000 		.long	.L51-.L25
 323 009c 00000000 		.long	.L50-.L25
 324 00a0 00000000 		.long	.L49-.L25
 325 00a4 00000000 		.long	.L48-.L25
 326 00a8 00000000 		.long	.L47-.L25
 327 00ac 00000000 		.long	.L46-.L25
 328 00b0 00000000 		.long	.L45-.L25
 329 00b4 00000000 		.long	.L44-.L25
 330 00b8 00000000 		.long	.L43-.L25
 331 00bc 00000000 		.long	.L42-.L25
GAS LISTING /tmp/ccPqxGpM.s 			page 25


 332 00c0 00000000 		.long	.L41-.L25
 333 00c4 00000000 		.long	.L40-.L25
 334 00c8 00000000 		.long	.L39-.L25
 335 00cc 00000000 		.long	.L38-.L25
 336 00d0 00000000 		.long	.L37-.L25
 337 00d4 00000000 		.long	.L36-.L25
 338 00d8 00000000 		.long	.L35-.L25
 339 00dc 00000000 		.long	.L34-.L25
 340 00e0 00000000 		.long	.L33-.L25
 341 00e4 00000000 		.long	.L32-.L25
 342 00e8 00000000 		.long	.L31-.L25
 343 00ec 00000000 		.long	.L30-.L25
 344 00f0 00000000 		.long	.L29-.L25
 345 00f4 00000000 		.long	.L28-.L25
 346 00f8 00000000 		.long	.L27-.L25
 347 00fc 00000000 		.long	.L26-.L25
 348 0100 00000000 		.long	.L24-.L25
 349              		.section	.text.SecDoMemcpyOpt
 350              	.L88:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 351              		.loc 2 485 9 discriminator 6
 352 00ad 488B45C8 		movq	-56(%rbp), %rax
 353 00b1 488B55C0 		movq	-64(%rbp), %rdx
 354 00b5 0FB612   		movzbl	(%rdx), %edx
 355 00b8 8810     		movb	%dl, (%rax)
 356 00ba E9860C00 		jmp	.L158
 356      00
 357              	.L87:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 358              		.loc 2 485 9 discriminator 7
 359 00bf 488B45C8 		movq	-56(%rbp), %rax
 360 00c3 488B55C0 		movq	-64(%rbp), %rdx
 361 00c7 0FB712   		movzwl	(%rdx), %edx
 362 00ca 668910   		movw	%dx, (%rax)
 363 00cd E9730C00 		jmp	.L158
 363      00
 364              	.L86:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 365              		.loc 2 485 9 discriminator 8
 366 00d2 488B45C8 		movq	-56(%rbp), %rax
 367 00d6 488B55C0 		movq	-64(%rbp), %rdx
 368 00da 0FB70A   		movzwl	(%rdx), %ecx
 369 00dd 668908   		movw	%cx, (%rax)
 370 00e0 0FB65202 		movzbl	2(%rdx), %edx
 371 00e4 885002   		movb	%dl, 2(%rax)
 372 00e7 E9590C00 		jmp	.L158
 372      00
 373              	.L85:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 374              		.loc 2 485 9 discriminator 9
 375 00ec 488B45C8 		movq	-56(%rbp), %rax
 376 00f0 488B55C0 		movq	-64(%rbp), %rdx
 377 00f4 8B12     		movl	(%rdx), %edx
 378 00f6 8910     		movl	%edx, (%rax)
 379 00f8 E9480C00 		jmp	.L158
 379      00
 380              	.L84:
GAS LISTING /tmp/ccPqxGpM.s 			page 26


 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 381              		.loc 2 485 9 discriminator 10
 382 00fd 488B45C8 		movq	-56(%rbp), %rax
 383 0101 488B55C0 		movq	-64(%rbp), %rdx
 384 0105 8B0A     		movl	(%rdx), %ecx
 385 0107 8908     		movl	%ecx, (%rax)
 386 0109 0FB65204 		movzbl	4(%rdx), %edx
 387 010d 885004   		movb	%dl, 4(%rax)
 388 0110 E9300C00 		jmp	.L158
 388      00
 389              	.L83:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 390              		.loc 2 485 9 discriminator 11
 391 0115 488B45C8 		movq	-56(%rbp), %rax
 392 0119 488B55C0 		movq	-64(%rbp), %rdx
 393 011d 8B0A     		movl	(%rdx), %ecx
 394 011f 8908     		movl	%ecx, (%rax)
 395 0121 0FB75204 		movzwl	4(%rdx), %edx
 396 0125 66895004 		movw	%dx, 4(%rax)
 397 0129 E9170C00 		jmp	.L158
 397      00
 398              	.L82:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 399              		.loc 2 485 9 discriminator 12
 400 012e 488B45C8 		movq	-56(%rbp), %rax
 401 0132 488B55C0 		movq	-64(%rbp), %rdx
 402 0136 8B0A     		movl	(%rdx), %ecx
 403 0138 8908     		movl	%ecx, (%rax)
 404 013a 0FB74A04 		movzwl	4(%rdx), %ecx
 405 013e 66894804 		movw	%cx, 4(%rax)
 406 0142 0FB65206 		movzbl	6(%rdx), %edx
 407 0146 885006   		movb	%dl, 6(%rax)
 408 0149 E9F70B00 		jmp	.L158
 408      00
 409              	.L81:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 410              		.loc 2 485 9 discriminator 13
 411 014e 488B45C8 		movq	-56(%rbp), %rax
 412 0152 488B55C0 		movq	-64(%rbp), %rdx
 413 0156 488B12   		movq	(%rdx), %rdx
 414 0159 488910   		movq	%rdx, (%rax)
 415 015c E9E40B00 		jmp	.L158
 415      00
 416              	.L80:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 417              		.loc 2 485 9 discriminator 14
 418 0161 488B45C8 		movq	-56(%rbp), %rax
 419 0165 488B55C0 		movq	-64(%rbp), %rdx
 420 0169 488B0A   		movq	(%rdx), %rcx
 421 016c 488908   		movq	%rcx, (%rax)
 422 016f 0FB65208 		movzbl	8(%rdx), %edx
 423 0173 885008   		movb	%dl, 8(%rax)
 424 0176 E9CA0B00 		jmp	.L158
 424      00
 425              	.L79:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 426              		.loc 2 485 9 discriminator 15
GAS LISTING /tmp/ccPqxGpM.s 			page 27


 427 017b 488B45C8 		movq	-56(%rbp), %rax
 428 017f 488B55C0 		movq	-64(%rbp), %rdx
 429 0183 488B0A   		movq	(%rdx), %rcx
 430 0186 488908   		movq	%rcx, (%rax)
 431 0189 0FB75208 		movzwl	8(%rdx), %edx
 432 018d 66895008 		movw	%dx, 8(%rax)
 433 0191 E9AF0B00 		jmp	.L158
 433      00
 434              	.L78:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 435              		.loc 2 485 9 discriminator 16
 436 0196 488B45C8 		movq	-56(%rbp), %rax
 437 019a 488B55C0 		movq	-64(%rbp), %rdx
 438 019e 488B0A   		movq	(%rdx), %rcx
 439 01a1 488908   		movq	%rcx, (%rax)
 440 01a4 0FB74A08 		movzwl	8(%rdx), %ecx
 441 01a8 66894808 		movw	%cx, 8(%rax)
 442 01ac 0FB6520A 		movzbl	10(%rdx), %edx
 443 01b0 88500A   		movb	%dl, 10(%rax)
 444 01b3 E98D0B00 		jmp	.L158
 444      00
 445              	.L77:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 446              		.loc 2 485 9 discriminator 17
 447 01b8 488B45C8 		movq	-56(%rbp), %rax
 448 01bc 488B55C0 		movq	-64(%rbp), %rdx
 449 01c0 488B0A   		movq	(%rdx), %rcx
 450 01c3 488908   		movq	%rcx, (%rax)
 451 01c6 8B5208   		movl	8(%rdx), %edx
 452 01c9 895008   		movl	%edx, 8(%rax)
 453 01cc E9740B00 		jmp	.L158
 453      00
 454              	.L76:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 455              		.loc 2 485 9 discriminator 18
 456 01d1 488B45C8 		movq	-56(%rbp), %rax
 457 01d5 488B55C0 		movq	-64(%rbp), %rdx
 458 01d9 488B0A   		movq	(%rdx), %rcx
 459 01dc 488908   		movq	%rcx, (%rax)
 460 01df 8B4A08   		movl	8(%rdx), %ecx
 461 01e2 894808   		movl	%ecx, 8(%rax)
 462 01e5 0FB6520C 		movzbl	12(%rdx), %edx
 463 01e9 88500C   		movb	%dl, 12(%rax)
 464 01ec E9540B00 		jmp	.L158
 464      00
 465              	.L75:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 466              		.loc 2 485 9 discriminator 19
 467 01f1 488B45C8 		movq	-56(%rbp), %rax
 468 01f5 488B55C0 		movq	-64(%rbp), %rdx
 469 01f9 488B0A   		movq	(%rdx), %rcx
 470 01fc 488908   		movq	%rcx, (%rax)
 471 01ff 8B4A08   		movl	8(%rdx), %ecx
 472 0202 894808   		movl	%ecx, 8(%rax)
 473 0205 0FB7520C 		movzwl	12(%rdx), %edx
 474 0209 6689500C 		movw	%dx, 12(%rax)
 475 020d E9330B00 		jmp	.L158
GAS LISTING /tmp/ccPqxGpM.s 			page 28


 475      00
 476              	.L74:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 477              		.loc 2 485 9 discriminator 20
 478 0212 488B45C8 		movq	-56(%rbp), %rax
 479 0216 488B55C0 		movq	-64(%rbp), %rdx
 480 021a 488B0A   		movq	(%rdx), %rcx
 481 021d 488908   		movq	%rcx, (%rax)
 482 0220 8B4A08   		movl	8(%rdx), %ecx
 483 0223 894808   		movl	%ecx, 8(%rax)
 484 0226 0FB74A0C 		movzwl	12(%rdx), %ecx
 485 022a 6689480C 		movw	%cx, 12(%rax)
 486 022e 0FB6520E 		movzbl	14(%rdx), %edx
 487 0232 88500E   		movb	%dl, 14(%rax)
 488 0235 E90B0B00 		jmp	.L158
 488      00
 489              	.L73:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 490              		.loc 2 485 9 discriminator 21
 491 023a 488B4DC8 		movq	-56(%rbp), %rcx
 492 023e 488B45C0 		movq	-64(%rbp), %rax
 493 0242 488B5008 		movq	8(%rax), %rdx
 494 0246 488B00   		movq	(%rax), %rax
 495 0249 488901   		movq	%rax, (%rcx)
 496 024c 48895108 		movq	%rdx, 8(%rcx)
 497 0250 E9F00A00 		jmp	.L158
 497      00
 498              	.L72:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 499              		.loc 2 485 9 discriminator 22
 500 0255 488B4DC8 		movq	-56(%rbp), %rcx
 501 0259 488B75C0 		movq	-64(%rbp), %rsi
 502 025d 488B06   		movq	(%rsi), %rax
 503 0260 488B5608 		movq	8(%rsi), %rdx
 504 0264 488901   		movq	%rax, (%rcx)
 505 0267 48895108 		movq	%rdx, 8(%rcx)
 506 026b 0FB64610 		movzbl	16(%rsi), %eax
 507 026f 884110   		movb	%al, 16(%rcx)
 508 0272 E9CE0A00 		jmp	.L158
 508      00
 509              	.L71:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 510              		.loc 2 485 9 discriminator 23
 511 0277 488B4DC8 		movq	-56(%rbp), %rcx
 512 027b 488B75C0 		movq	-64(%rbp), %rsi
 513 027f 488B06   		movq	(%rsi), %rax
 514 0282 488B5608 		movq	8(%rsi), %rdx
 515 0286 488901   		movq	%rax, (%rcx)
 516 0289 48895108 		movq	%rdx, 8(%rcx)
 517 028d 0FB74610 		movzwl	16(%rsi), %eax
 518 0291 66894110 		movw	%ax, 16(%rcx)
 519 0295 E9AB0A00 		jmp	.L158
 519      00
 520              	.L70:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 521              		.loc 2 485 9 discriminator 24
 522 029a 488B45C8 		movq	-56(%rbp), %rax
GAS LISTING /tmp/ccPqxGpM.s 			page 29


 523 029e 488B55C0 		movq	-64(%rbp), %rdx
 524 02a2 488B0A   		movq	(%rdx), %rcx
 525 02a5 488B5A08 		movq	8(%rdx), %rbx
 526 02a9 488908   		movq	%rcx, (%rax)
 527 02ac 48895808 		movq	%rbx, 8(%rax)
 528 02b0 0FB74A10 		movzwl	16(%rdx), %ecx
 529 02b4 66894810 		movw	%cx, 16(%rax)
 530 02b8 0FB65212 		movzbl	18(%rdx), %edx
 531 02bc 885012   		movb	%dl, 18(%rax)
 532 02bf E9810A00 		jmp	.L158
 532      00
 533              	.L69:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 534              		.loc 2 485 9 discriminator 25
 535 02c4 488B4DC8 		movq	-56(%rbp), %rcx
 536 02c8 488B75C0 		movq	-64(%rbp), %rsi
 537 02cc 488B06   		movq	(%rsi), %rax
 538 02cf 488B5608 		movq	8(%rsi), %rdx
 539 02d3 488901   		movq	%rax, (%rcx)
 540 02d6 48895108 		movq	%rdx, 8(%rcx)
 541 02da 8B4610   		movl	16(%rsi), %eax
 542 02dd 894110   		movl	%eax, 16(%rcx)
 543 02e0 E9600A00 		jmp	.L158
 543      00
 544              	.L68:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 545              		.loc 2 485 9 discriminator 26
 546 02e5 488B45C8 		movq	-56(%rbp), %rax
 547 02e9 488B55C0 		movq	-64(%rbp), %rdx
 548 02ed 488B0A   		movq	(%rdx), %rcx
 549 02f0 488B5A08 		movq	8(%rdx), %rbx
 550 02f4 488908   		movq	%rcx, (%rax)
 551 02f7 48895808 		movq	%rbx, 8(%rax)
 552 02fb 8B4A10   		movl	16(%rdx), %ecx
 553 02fe 894810   		movl	%ecx, 16(%rax)
 554 0301 0FB65214 		movzbl	20(%rdx), %edx
 555 0305 885014   		movb	%dl, 20(%rax)
 556 0308 E9380A00 		jmp	.L158
 556      00
 557              	.L67:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 558              		.loc 2 485 9 discriminator 27
 559 030d 488B45C8 		movq	-56(%rbp), %rax
 560 0311 488B55C0 		movq	-64(%rbp), %rdx
 561 0315 488B0A   		movq	(%rdx), %rcx
 562 0318 488B5A08 		movq	8(%rdx), %rbx
 563 031c 488908   		movq	%rcx, (%rax)
 564 031f 48895808 		movq	%rbx, 8(%rax)
 565 0323 8B4A10   		movl	16(%rdx), %ecx
 566 0326 894810   		movl	%ecx, 16(%rax)
 567 0329 0FB75214 		movzwl	20(%rdx), %edx
 568 032d 66895014 		movw	%dx, 20(%rax)
 569 0331 E90F0A00 		jmp	.L158
 569      00
 570              	.L66:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 571              		.loc 2 485 9 discriminator 28
GAS LISTING /tmp/ccPqxGpM.s 			page 30


 572 0336 488B45C8 		movq	-56(%rbp), %rax
 573 033a 488B55C0 		movq	-64(%rbp), %rdx
 574 033e 488B0A   		movq	(%rdx), %rcx
 575 0341 488B5A08 		movq	8(%rdx), %rbx
 576 0345 488908   		movq	%rcx, (%rax)
 577 0348 48895808 		movq	%rbx, 8(%rax)
 578 034c 8B4A10   		movl	16(%rdx), %ecx
 579 034f 894810   		movl	%ecx, 16(%rax)
 580 0352 0FB74A14 		movzwl	20(%rdx), %ecx
 581 0356 66894814 		movw	%cx, 20(%rax)
 582 035a 0FB65216 		movzbl	22(%rdx), %edx
 583 035e 885016   		movb	%dl, 22(%rax)
 584 0361 E9DF0900 		jmp	.L158
 584      00
 585              	.L65:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 586              		.loc 2 485 9 discriminator 29
 587 0366 488B4DC8 		movq	-56(%rbp), %rcx
 588 036a 488B75C0 		movq	-64(%rbp), %rsi
 589 036e 488B06   		movq	(%rsi), %rax
 590 0371 488B5608 		movq	8(%rsi), %rdx
 591 0375 488901   		movq	%rax, (%rcx)
 592 0378 48895108 		movq	%rdx, 8(%rcx)
 593 037c 488B4610 		movq	16(%rsi), %rax
 594 0380 48894110 		movq	%rax, 16(%rcx)
 595 0384 E9BC0900 		jmp	.L158
 595      00
 596              	.L64:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 597              		.loc 2 485 9 discriminator 30
 598 0389 488B45C8 		movq	-56(%rbp), %rax
 599 038d 488B55C0 		movq	-64(%rbp), %rdx
 600 0391 488B0A   		movq	(%rdx), %rcx
 601 0394 488B5A08 		movq	8(%rdx), %rbx
 602 0398 488908   		movq	%rcx, (%rax)
 603 039b 48895808 		movq	%rbx, 8(%rax)
 604 039f 488B4A10 		movq	16(%rdx), %rcx
 605 03a3 48894810 		movq	%rcx, 16(%rax)
 606 03a7 0FB65218 		movzbl	24(%rdx), %edx
 607 03ab 885018   		movb	%dl, 24(%rax)
 608 03ae E9920900 		jmp	.L158
 608      00
 609              	.L63:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 610              		.loc 2 485 9 discriminator 31
 611 03b3 488B45C8 		movq	-56(%rbp), %rax
 612 03b7 488B55C0 		movq	-64(%rbp), %rdx
 613 03bb 488B0A   		movq	(%rdx), %rcx
 614 03be 488B5A08 		movq	8(%rdx), %rbx
 615 03c2 488908   		movq	%rcx, (%rax)
 616 03c5 48895808 		movq	%rbx, 8(%rax)
 617 03c9 488B4A10 		movq	16(%rdx), %rcx
 618 03cd 48894810 		movq	%rcx, 16(%rax)
 619 03d1 0FB75218 		movzwl	24(%rdx), %edx
 620 03d5 66895018 		movw	%dx, 24(%rax)
 621 03d9 E9670900 		jmp	.L158
 621      00
GAS LISTING /tmp/ccPqxGpM.s 			page 31


 622              	.L62:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 623              		.loc 2 485 9 discriminator 32
 624 03de 488B45C8 		movq	-56(%rbp), %rax
 625 03e2 488B55C0 		movq	-64(%rbp), %rdx
 626 03e6 488B0A   		movq	(%rdx), %rcx
 627 03e9 488B5A08 		movq	8(%rdx), %rbx
 628 03ed 488908   		movq	%rcx, (%rax)
 629 03f0 48895808 		movq	%rbx, 8(%rax)
 630 03f4 488B4A10 		movq	16(%rdx), %rcx
 631 03f8 48894810 		movq	%rcx, 16(%rax)
 632 03fc 0FB74A18 		movzwl	24(%rdx), %ecx
 633 0400 66894818 		movw	%cx, 24(%rax)
 634 0404 0FB6521A 		movzbl	26(%rdx), %edx
 635 0408 88501A   		movb	%dl, 26(%rax)
 636 040b E9350900 		jmp	.L158
 636      00
 637              	.L61:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 638              		.loc 2 485 9 discriminator 33
 639 0410 488B45C8 		movq	-56(%rbp), %rax
 640 0414 488B55C0 		movq	-64(%rbp), %rdx
 641 0418 488B0A   		movq	(%rdx), %rcx
 642 041b 488B5A08 		movq	8(%rdx), %rbx
 643 041f 488908   		movq	%rcx, (%rax)
 644 0422 48895808 		movq	%rbx, 8(%rax)
 645 0426 488B4A10 		movq	16(%rdx), %rcx
 646 042a 48894810 		movq	%rcx, 16(%rax)
 647 042e 8B5218   		movl	24(%rdx), %edx
 648 0431 895018   		movl	%edx, 24(%rax)
 649 0434 E90C0900 		jmp	.L158
 649      00
 650              	.L60:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 651              		.loc 2 485 9 discriminator 34
 652 0439 488B45C8 		movq	-56(%rbp), %rax
 653 043d 488B55C0 		movq	-64(%rbp), %rdx
 654 0441 488B0A   		movq	(%rdx), %rcx
 655 0444 488B5A08 		movq	8(%rdx), %rbx
 656 0448 488908   		movq	%rcx, (%rax)
 657 044b 48895808 		movq	%rbx, 8(%rax)
 658 044f 488B4A10 		movq	16(%rdx), %rcx
 659 0453 48894810 		movq	%rcx, 16(%rax)
 660 0457 8B4A18   		movl	24(%rdx), %ecx
 661 045a 894818   		movl	%ecx, 24(%rax)
 662 045d 0FB6521C 		movzbl	28(%rdx), %edx
 663 0461 88501C   		movb	%dl, 28(%rax)
 664 0464 E9DC0800 		jmp	.L158
 664      00
 665              	.L59:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 666              		.loc 2 485 9 discriminator 35
 667 0469 488B45C8 		movq	-56(%rbp), %rax
 668 046d 488B55C0 		movq	-64(%rbp), %rdx
 669 0471 488B0A   		movq	(%rdx), %rcx
 670 0474 488B5A08 		movq	8(%rdx), %rbx
 671 0478 488908   		movq	%rcx, (%rax)
GAS LISTING /tmp/ccPqxGpM.s 			page 32


 672 047b 48895808 		movq	%rbx, 8(%rax)
 673 047f 488B4A10 		movq	16(%rdx), %rcx
 674 0483 48894810 		movq	%rcx, 16(%rax)
 675 0487 8B4A18   		movl	24(%rdx), %ecx
 676 048a 894818   		movl	%ecx, 24(%rax)
 677 048d 0FB7521C 		movzwl	28(%rdx), %edx
 678 0491 6689501C 		movw	%dx, 28(%rax)
 679 0495 E9AB0800 		jmp	.L158
 679      00
 680              	.L58:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 681              		.loc 2 485 9 discriminator 36
 682 049a 488B45C8 		movq	-56(%rbp), %rax
 683 049e 488B55C0 		movq	-64(%rbp), %rdx
 684 04a2 488B0A   		movq	(%rdx), %rcx
 685 04a5 488B5A08 		movq	8(%rdx), %rbx
 686 04a9 488908   		movq	%rcx, (%rax)
 687 04ac 48895808 		movq	%rbx, 8(%rax)
 688 04b0 488B4A10 		movq	16(%rdx), %rcx
 689 04b4 48894810 		movq	%rcx, 16(%rax)
 690 04b8 8B4A18   		movl	24(%rdx), %ecx
 691 04bb 894818   		movl	%ecx, 24(%rax)
 692 04be 0FB74A1C 		movzwl	28(%rdx), %ecx
 693 04c2 6689481C 		movw	%cx, 28(%rax)
 694 04c6 0FB6521E 		movzbl	30(%rdx), %edx
 695 04ca 88501E   		movb	%dl, 30(%rax)
 696 04cd E9730800 		jmp	.L158
 696      00
 697              	.L57:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 698              		.loc 2 485 9 discriminator 37
 699 04d2 488B4DC8 		movq	-56(%rbp), %rcx
 700 04d6 488B75C0 		movq	-64(%rbp), %rsi
 701 04da 488B06   		movq	(%rsi), %rax
 702 04dd 488B5608 		movq	8(%rsi), %rdx
 703 04e1 488901   		movq	%rax, (%rcx)
 704 04e4 48895108 		movq	%rdx, 8(%rcx)
 705 04e8 488B4610 		movq	16(%rsi), %rax
 706 04ec 488B5618 		movq	24(%rsi), %rdx
 707 04f0 48894110 		movq	%rax, 16(%rcx)
 708 04f4 48895118 		movq	%rdx, 24(%rcx)
 709 04f8 E9480800 		jmp	.L158
 709      00
 710              	.L56:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 711              		.loc 2 485 9 discriminator 38
 712 04fd 488B45C8 		movq	-56(%rbp), %rax
 713 0501 488B55C0 		movq	-64(%rbp), %rdx
 714 0505 488B0A   		movq	(%rdx), %rcx
 715 0508 488B5A08 		movq	8(%rdx), %rbx
 716 050c 488908   		movq	%rcx, (%rax)
 717 050f 48895808 		movq	%rbx, 8(%rax)
 718 0513 488B4A10 		movq	16(%rdx), %rcx
 719 0517 488B5A18 		movq	24(%rdx), %rbx
 720 051b 48894810 		movq	%rcx, 16(%rax)
 721 051f 48895818 		movq	%rbx, 24(%rax)
 722 0523 0FB65220 		movzbl	32(%rdx), %edx
GAS LISTING /tmp/ccPqxGpM.s 			page 33


 723 0527 885020   		movb	%dl, 32(%rax)
 724 052a E9160800 		jmp	.L158
 724      00
 725              	.L55:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 726              		.loc 2 485 9 discriminator 39
 727 052f 488B45C8 		movq	-56(%rbp), %rax
 728 0533 488B55C0 		movq	-64(%rbp), %rdx
 729 0537 488B0A   		movq	(%rdx), %rcx
 730 053a 488B5A08 		movq	8(%rdx), %rbx
 731 053e 488908   		movq	%rcx, (%rax)
 732 0541 48895808 		movq	%rbx, 8(%rax)
 733 0545 488B4A10 		movq	16(%rdx), %rcx
 734 0549 488B5A18 		movq	24(%rdx), %rbx
 735 054d 48894810 		movq	%rcx, 16(%rax)
 736 0551 48895818 		movq	%rbx, 24(%rax)
 737 0555 0FB75220 		movzwl	32(%rdx), %edx
 738 0559 66895020 		movw	%dx, 32(%rax)
 739 055d E9E30700 		jmp	.L158
 739      00
 740              	.L54:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 741              		.loc 2 485 9 discriminator 40
 742 0562 488B45C8 		movq	-56(%rbp), %rax
 743 0566 488B55C0 		movq	-64(%rbp), %rdx
 744 056a 488B0A   		movq	(%rdx), %rcx
 745 056d 488B5A08 		movq	8(%rdx), %rbx
 746 0571 488908   		movq	%rcx, (%rax)
 747 0574 48895808 		movq	%rbx, 8(%rax)
 748 0578 488B4A10 		movq	16(%rdx), %rcx
 749 057c 488B5A18 		movq	24(%rdx), %rbx
 750 0580 48894810 		movq	%rcx, 16(%rax)
 751 0584 48895818 		movq	%rbx, 24(%rax)
 752 0588 0FB74A20 		movzwl	32(%rdx), %ecx
 753 058c 66894820 		movw	%cx, 32(%rax)
 754 0590 0FB65222 		movzbl	34(%rdx), %edx
 755 0594 885022   		movb	%dl, 34(%rax)
 756 0597 E9A90700 		jmp	.L158
 756      00
 757              	.L53:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 758              		.loc 2 485 9 discriminator 41
 759 059c 488B45C8 		movq	-56(%rbp), %rax
 760 05a0 488B55C0 		movq	-64(%rbp), %rdx
 761 05a4 488B0A   		movq	(%rdx), %rcx
 762 05a7 488B5A08 		movq	8(%rdx), %rbx
 763 05ab 488908   		movq	%rcx, (%rax)
 764 05ae 48895808 		movq	%rbx, 8(%rax)
 765 05b2 488B4A10 		movq	16(%rdx), %rcx
 766 05b6 488B5A18 		movq	24(%rdx), %rbx
 767 05ba 48894810 		movq	%rcx, 16(%rax)
 768 05be 48895818 		movq	%rbx, 24(%rax)
 769 05c2 8B5220   		movl	32(%rdx), %edx
 770 05c5 895020   		movl	%edx, 32(%rax)
 771 05c8 E9780700 		jmp	.L158
 771      00
 772              	.L52:
GAS LISTING /tmp/ccPqxGpM.s 			page 34


 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 773              		.loc 2 485 9 discriminator 42
 774 05cd 488B45C8 		movq	-56(%rbp), %rax
 775 05d1 488B55C0 		movq	-64(%rbp), %rdx
 776 05d5 488B0A   		movq	(%rdx), %rcx
 777 05d8 488B5A08 		movq	8(%rdx), %rbx
 778 05dc 488908   		movq	%rcx, (%rax)
 779 05df 48895808 		movq	%rbx, 8(%rax)
 780 05e3 488B4A10 		movq	16(%rdx), %rcx
 781 05e7 488B5A18 		movq	24(%rdx), %rbx
 782 05eb 48894810 		movq	%rcx, 16(%rax)
 783 05ef 48895818 		movq	%rbx, 24(%rax)
 784 05f3 8B4A20   		movl	32(%rdx), %ecx
 785 05f6 894820   		movl	%ecx, 32(%rax)
 786 05f9 0FB65224 		movzbl	36(%rdx), %edx
 787 05fd 885024   		movb	%dl, 36(%rax)
 788 0600 E9400700 		jmp	.L158
 788      00
 789              	.L51:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 790              		.loc 2 485 9 discriminator 43
 791 0605 488B45C8 		movq	-56(%rbp), %rax
 792 0609 488B55C0 		movq	-64(%rbp), %rdx
 793 060d 488B0A   		movq	(%rdx), %rcx
 794 0610 488B5A08 		movq	8(%rdx), %rbx
 795 0614 488908   		movq	%rcx, (%rax)
 796 0617 48895808 		movq	%rbx, 8(%rax)
 797 061b 488B4A10 		movq	16(%rdx), %rcx
 798 061f 488B5A18 		movq	24(%rdx), %rbx
 799 0623 48894810 		movq	%rcx, 16(%rax)
 800 0627 48895818 		movq	%rbx, 24(%rax)
 801 062b 8B4A20   		movl	32(%rdx), %ecx
 802 062e 894820   		movl	%ecx, 32(%rax)
 803 0631 0FB75224 		movzwl	36(%rdx), %edx
 804 0635 66895024 		movw	%dx, 36(%rax)
 805 0639 E9070700 		jmp	.L158
 805      00
 806              	.L50:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 807              		.loc 2 485 9 discriminator 44
 808 063e 488B45C8 		movq	-56(%rbp), %rax
 809 0642 488B55C0 		movq	-64(%rbp), %rdx
 810 0646 488B0A   		movq	(%rdx), %rcx
 811 0649 488B5A08 		movq	8(%rdx), %rbx
 812 064d 488908   		movq	%rcx, (%rax)
 813 0650 48895808 		movq	%rbx, 8(%rax)
 814 0654 488B4A10 		movq	16(%rdx), %rcx
 815 0658 488B5A18 		movq	24(%rdx), %rbx
 816 065c 48894810 		movq	%rcx, 16(%rax)
 817 0660 48895818 		movq	%rbx, 24(%rax)
 818 0664 8B4A20   		movl	32(%rdx), %ecx
 819 0667 894820   		movl	%ecx, 32(%rax)
 820 066a 0FB74A24 		movzwl	36(%rdx), %ecx
 821 066e 66894824 		movw	%cx, 36(%rax)
 822 0672 0FB65226 		movzbl	38(%rdx), %edx
 823 0676 885026   		movb	%dl, 38(%rax)
 824 0679 E9C70600 		jmp	.L158
GAS LISTING /tmp/ccPqxGpM.s 			page 35


 824      00
 825              	.L49:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 826              		.loc 2 485 9 discriminator 45
 827 067e 488B45C8 		movq	-56(%rbp), %rax
 828 0682 488B55C0 		movq	-64(%rbp), %rdx
 829 0686 488B0A   		movq	(%rdx), %rcx
 830 0689 488B5A08 		movq	8(%rdx), %rbx
 831 068d 488908   		movq	%rcx, (%rax)
 832 0690 48895808 		movq	%rbx, 8(%rax)
 833 0694 488B4A10 		movq	16(%rdx), %rcx
 834 0698 488B5A18 		movq	24(%rdx), %rbx
 835 069c 48894810 		movq	%rcx, 16(%rax)
 836 06a0 48895818 		movq	%rbx, 24(%rax)
 837 06a4 488B5220 		movq	32(%rdx), %rdx
 838 06a8 48895020 		movq	%rdx, 32(%rax)
 839 06ac E9940600 		jmp	.L158
 839      00
 840              	.L48:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 841              		.loc 2 485 9 discriminator 46
 842 06b1 488B45C8 		movq	-56(%rbp), %rax
 843 06b5 488B55C0 		movq	-64(%rbp), %rdx
 844 06b9 488B0A   		movq	(%rdx), %rcx
 845 06bc 488B5A08 		movq	8(%rdx), %rbx
 846 06c0 488908   		movq	%rcx, (%rax)
 847 06c3 48895808 		movq	%rbx, 8(%rax)
 848 06c7 488B4A10 		movq	16(%rdx), %rcx
 849 06cb 488B5A18 		movq	24(%rdx), %rbx
 850 06cf 48894810 		movq	%rcx, 16(%rax)
 851 06d3 48895818 		movq	%rbx, 24(%rax)
 852 06d7 488B4A20 		movq	32(%rdx), %rcx
 853 06db 48894820 		movq	%rcx, 32(%rax)
 854 06df 0FB65228 		movzbl	40(%rdx), %edx
 855 06e3 885028   		movb	%dl, 40(%rax)
 856 06e6 E95A0600 		jmp	.L158
 856      00
 857              	.L47:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 858              		.loc 2 485 9 discriminator 47
 859 06eb 488B45C8 		movq	-56(%rbp), %rax
 860 06ef 488B55C0 		movq	-64(%rbp), %rdx
 861 06f3 488B0A   		movq	(%rdx), %rcx
 862 06f6 488B5A08 		movq	8(%rdx), %rbx
 863 06fa 488908   		movq	%rcx, (%rax)
 864 06fd 48895808 		movq	%rbx, 8(%rax)
 865 0701 488B4A10 		movq	16(%rdx), %rcx
 866 0705 488B5A18 		movq	24(%rdx), %rbx
 867 0709 48894810 		movq	%rcx, 16(%rax)
 868 070d 48895818 		movq	%rbx, 24(%rax)
 869 0711 488B4A20 		movq	32(%rdx), %rcx
 870 0715 48894820 		movq	%rcx, 32(%rax)
 871 0719 0FB75228 		movzwl	40(%rdx), %edx
 872 071d 66895028 		movw	%dx, 40(%rax)
 873 0721 E91F0600 		jmp	.L158
 873      00
 874              	.L46:
GAS LISTING /tmp/ccPqxGpM.s 			page 36


 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 875              		.loc 2 485 9 discriminator 48
 876 0726 488B45C8 		movq	-56(%rbp), %rax
 877 072a 488B55C0 		movq	-64(%rbp), %rdx
 878 072e 488B0A   		movq	(%rdx), %rcx
 879 0731 488B5A08 		movq	8(%rdx), %rbx
 880 0735 488908   		movq	%rcx, (%rax)
 881 0738 48895808 		movq	%rbx, 8(%rax)
 882 073c 488B4A10 		movq	16(%rdx), %rcx
 883 0740 488B5A18 		movq	24(%rdx), %rbx
 884 0744 48894810 		movq	%rcx, 16(%rax)
 885 0748 48895818 		movq	%rbx, 24(%rax)
 886 074c 488B4A20 		movq	32(%rdx), %rcx
 887 0750 48894820 		movq	%rcx, 32(%rax)
 888 0754 0FB74A28 		movzwl	40(%rdx), %ecx
 889 0758 66894828 		movw	%cx, 40(%rax)
 890 075c 0FB6522A 		movzbl	42(%rdx), %edx
 891 0760 88502A   		movb	%dl, 42(%rax)
 892 0763 E9DD0500 		jmp	.L158
 892      00
 893              	.L45:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 894              		.loc 2 485 9 discriminator 49
 895 0768 488B45C8 		movq	-56(%rbp), %rax
 896 076c 488B55C0 		movq	-64(%rbp), %rdx
 897 0770 488B0A   		movq	(%rdx), %rcx
 898 0773 488B5A08 		movq	8(%rdx), %rbx
 899 0777 488908   		movq	%rcx, (%rax)
 900 077a 48895808 		movq	%rbx, 8(%rax)
 901 077e 488B4A10 		movq	16(%rdx), %rcx
 902 0782 488B5A18 		movq	24(%rdx), %rbx
 903 0786 48894810 		movq	%rcx, 16(%rax)
 904 078a 48895818 		movq	%rbx, 24(%rax)
 905 078e 488B4A20 		movq	32(%rdx), %rcx
 906 0792 48894820 		movq	%rcx, 32(%rax)
 907 0796 8B5228   		movl	40(%rdx), %edx
 908 0799 895028   		movl	%edx, 40(%rax)
 909 079c E9A40500 		jmp	.L158
 909      00
 910              	.L44:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 911              		.loc 2 485 9 discriminator 50
 912 07a1 488B45C8 		movq	-56(%rbp), %rax
 913 07a5 488B55C0 		movq	-64(%rbp), %rdx
 914 07a9 488B0A   		movq	(%rdx), %rcx
 915 07ac 488B5A08 		movq	8(%rdx), %rbx
 916 07b0 488908   		movq	%rcx, (%rax)
 917 07b3 48895808 		movq	%rbx, 8(%rax)
 918 07b7 488B4A10 		movq	16(%rdx), %rcx
 919 07bb 488B5A18 		movq	24(%rdx), %rbx
 920 07bf 48894810 		movq	%rcx, 16(%rax)
 921 07c3 48895818 		movq	%rbx, 24(%rax)
 922 07c7 488B4A20 		movq	32(%rdx), %rcx
 923 07cb 48894820 		movq	%rcx, 32(%rax)
 924 07cf 8B4A28   		movl	40(%rdx), %ecx
 925 07d2 894828   		movl	%ecx, 40(%rax)
 926 07d5 0FB6522C 		movzbl	44(%rdx), %edx
GAS LISTING /tmp/ccPqxGpM.s 			page 37


 927 07d9 88502C   		movb	%dl, 44(%rax)
 928 07dc E9640500 		jmp	.L158
 928      00
 929              	.L43:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 930              		.loc 2 485 9 discriminator 51
 931 07e1 488B45C8 		movq	-56(%rbp), %rax
 932 07e5 488B55C0 		movq	-64(%rbp), %rdx
 933 07e9 488B0A   		movq	(%rdx), %rcx
 934 07ec 488B5A08 		movq	8(%rdx), %rbx
 935 07f0 488908   		movq	%rcx, (%rax)
 936 07f3 48895808 		movq	%rbx, 8(%rax)
 937 07f7 488B4A10 		movq	16(%rdx), %rcx
 938 07fb 488B5A18 		movq	24(%rdx), %rbx
 939 07ff 48894810 		movq	%rcx, 16(%rax)
 940 0803 48895818 		movq	%rbx, 24(%rax)
 941 0807 488B4A20 		movq	32(%rdx), %rcx
 942 080b 48894820 		movq	%rcx, 32(%rax)
 943 080f 8B4A28   		movl	40(%rdx), %ecx
 944 0812 894828   		movl	%ecx, 40(%rax)
 945 0815 0FB7522C 		movzwl	44(%rdx), %edx
 946 0819 6689502C 		movw	%dx, 44(%rax)
 947 081d E9230500 		jmp	.L158
 947      00
 948              	.L42:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 949              		.loc 2 485 9 discriminator 52
 950 0822 488B45C8 		movq	-56(%rbp), %rax
 951 0826 488B55C0 		movq	-64(%rbp), %rdx
 952 082a 488B0A   		movq	(%rdx), %rcx
 953 082d 488B5A08 		movq	8(%rdx), %rbx
 954 0831 488908   		movq	%rcx, (%rax)
 955 0834 48895808 		movq	%rbx, 8(%rax)
 956 0838 488B4A10 		movq	16(%rdx), %rcx
 957 083c 488B5A18 		movq	24(%rdx), %rbx
 958 0840 48894810 		movq	%rcx, 16(%rax)
 959 0844 48895818 		movq	%rbx, 24(%rax)
 960 0848 488B4A20 		movq	32(%rdx), %rcx
 961 084c 48894820 		movq	%rcx, 32(%rax)
 962 0850 8B4A28   		movl	40(%rdx), %ecx
 963 0853 894828   		movl	%ecx, 40(%rax)
 964 0856 0FB74A2C 		movzwl	44(%rdx), %ecx
 965 085a 6689482C 		movw	%cx, 44(%rax)
 966 085e 0FB6522E 		movzbl	46(%rdx), %edx
 967 0862 88502E   		movb	%dl, 46(%rax)
 968 0865 E9DB0400 		jmp	.L158
 968      00
 969              	.L41:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 970              		.loc 2 485 9 discriminator 53
 971 086a 488B45C8 		movq	-56(%rbp), %rax
 972 086e 488B55C0 		movq	-64(%rbp), %rdx
 973 0872 488B0A   		movq	(%rdx), %rcx
 974 0875 488B5A08 		movq	8(%rdx), %rbx
 975 0879 488908   		movq	%rcx, (%rax)
 976 087c 48895808 		movq	%rbx, 8(%rax)
 977 0880 488B4A10 		movq	16(%rdx), %rcx
GAS LISTING /tmp/ccPqxGpM.s 			page 38


 978 0884 488B5A18 		movq	24(%rdx), %rbx
 979 0888 48894810 		movq	%rcx, 16(%rax)
 980 088c 48895818 		movq	%rbx, 24(%rax)
 981 0890 488B4A20 		movq	32(%rdx), %rcx
 982 0894 488B5A28 		movq	40(%rdx), %rbx
 983 0898 48894820 		movq	%rcx, 32(%rax)
 984 089c 48895828 		movq	%rbx, 40(%rax)
 985 08a0 E9A00400 		jmp	.L158
 985      00
 986              	.L40:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 987              		.loc 2 485 9 discriminator 54
 988 08a5 488B45C8 		movq	-56(%rbp), %rax
 989 08a9 488B55C0 		movq	-64(%rbp), %rdx
 990 08ad 488B0A   		movq	(%rdx), %rcx
 991 08b0 488B5A08 		movq	8(%rdx), %rbx
 992 08b4 488908   		movq	%rcx, (%rax)
 993 08b7 48895808 		movq	%rbx, 8(%rax)
 994 08bb 488B4A10 		movq	16(%rdx), %rcx
 995 08bf 488B5A18 		movq	24(%rdx), %rbx
 996 08c3 48894810 		movq	%rcx, 16(%rax)
 997 08c7 48895818 		movq	%rbx, 24(%rax)
 998 08cb 488B4A20 		movq	32(%rdx), %rcx
 999 08cf 488B5A28 		movq	40(%rdx), %rbx
 1000 08d3 48894820 		movq	%rcx, 32(%rax)
 1001 08d7 48895828 		movq	%rbx, 40(%rax)
 1002 08db 0FB65230 		movzbl	48(%rdx), %edx
 1003 08df 885030   		movb	%dl, 48(%rax)
 1004 08e2 E95E0400 		jmp	.L158
 1004      00
 1005              	.L39:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1006              		.loc 2 485 9 discriminator 55
 1007 08e7 488B45C8 		movq	-56(%rbp), %rax
 1008 08eb 488B55C0 		movq	-64(%rbp), %rdx
 1009 08ef 488B0A   		movq	(%rdx), %rcx
 1010 08f2 488B5A08 		movq	8(%rdx), %rbx
 1011 08f6 488908   		movq	%rcx, (%rax)
 1012 08f9 48895808 		movq	%rbx, 8(%rax)
 1013 08fd 488B4A10 		movq	16(%rdx), %rcx
 1014 0901 488B5A18 		movq	24(%rdx), %rbx
 1015 0905 48894810 		movq	%rcx, 16(%rax)
 1016 0909 48895818 		movq	%rbx, 24(%rax)
 1017 090d 488B4A20 		movq	32(%rdx), %rcx
 1018 0911 488B5A28 		movq	40(%rdx), %rbx
 1019 0915 48894820 		movq	%rcx, 32(%rax)
 1020 0919 48895828 		movq	%rbx, 40(%rax)
 1021 091d 0FB75230 		movzwl	48(%rdx), %edx
 1022 0921 66895030 		movw	%dx, 48(%rax)
 1023 0925 E91B0400 		jmp	.L158
 1023      00
 1024              	.L38:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1025              		.loc 2 485 9 discriminator 56
 1026 092a 488B45C8 		movq	-56(%rbp), %rax
 1027 092e 488B55C0 		movq	-64(%rbp), %rdx
 1028 0932 488B0A   		movq	(%rdx), %rcx
GAS LISTING /tmp/ccPqxGpM.s 			page 39


 1029 0935 488B5A08 		movq	8(%rdx), %rbx
 1030 0939 488908   		movq	%rcx, (%rax)
 1031 093c 48895808 		movq	%rbx, 8(%rax)
 1032 0940 488B4A10 		movq	16(%rdx), %rcx
 1033 0944 488B5A18 		movq	24(%rdx), %rbx
 1034 0948 48894810 		movq	%rcx, 16(%rax)
 1035 094c 48895818 		movq	%rbx, 24(%rax)
 1036 0950 488B4A20 		movq	32(%rdx), %rcx
 1037 0954 488B5A28 		movq	40(%rdx), %rbx
 1038 0958 48894820 		movq	%rcx, 32(%rax)
 1039 095c 48895828 		movq	%rbx, 40(%rax)
 1040 0960 0FB74A30 		movzwl	48(%rdx), %ecx
 1041 0964 66894830 		movw	%cx, 48(%rax)
 1042 0968 0FB65232 		movzbl	50(%rdx), %edx
 1043 096c 885032   		movb	%dl, 50(%rax)
 1044 096f E9D10300 		jmp	.L158
 1044      00
 1045              	.L37:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1046              		.loc 2 485 9 discriminator 57
 1047 0974 488B45C8 		movq	-56(%rbp), %rax
 1048 0978 488B55C0 		movq	-64(%rbp), %rdx
 1049 097c 488B0A   		movq	(%rdx), %rcx
 1050 097f 488B5A08 		movq	8(%rdx), %rbx
 1051 0983 488908   		movq	%rcx, (%rax)
 1052 0986 48895808 		movq	%rbx, 8(%rax)
 1053 098a 488B4A10 		movq	16(%rdx), %rcx
 1054 098e 488B5A18 		movq	24(%rdx), %rbx
 1055 0992 48894810 		movq	%rcx, 16(%rax)
 1056 0996 48895818 		movq	%rbx, 24(%rax)
 1057 099a 488B4A20 		movq	32(%rdx), %rcx
 1058 099e 488B5A28 		movq	40(%rdx), %rbx
 1059 09a2 48894820 		movq	%rcx, 32(%rax)
 1060 09a6 48895828 		movq	%rbx, 40(%rax)
 1061 09aa 8B5230   		movl	48(%rdx), %edx
 1062 09ad 895030   		movl	%edx, 48(%rax)
 1063 09b0 E9900300 		jmp	.L158
 1063      00
 1064              	.L36:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1065              		.loc 2 485 9 discriminator 58
 1066 09b5 488B45C8 		movq	-56(%rbp), %rax
 1067 09b9 488B55C0 		movq	-64(%rbp), %rdx
 1068 09bd 488B0A   		movq	(%rdx), %rcx
 1069 09c0 488B5A08 		movq	8(%rdx), %rbx
 1070 09c4 488908   		movq	%rcx, (%rax)
 1071 09c7 48895808 		movq	%rbx, 8(%rax)
 1072 09cb 488B4A10 		movq	16(%rdx), %rcx
 1073 09cf 488B5A18 		movq	24(%rdx), %rbx
 1074 09d3 48894810 		movq	%rcx, 16(%rax)
 1075 09d7 48895818 		movq	%rbx, 24(%rax)
 1076 09db 488B4A20 		movq	32(%rdx), %rcx
 1077 09df 488B5A28 		movq	40(%rdx), %rbx
 1078 09e3 48894820 		movq	%rcx, 32(%rax)
 1079 09e7 48895828 		movq	%rbx, 40(%rax)
 1080 09eb 8B4A30   		movl	48(%rdx), %ecx
 1081 09ee 894830   		movl	%ecx, 48(%rax)
GAS LISTING /tmp/ccPqxGpM.s 			page 40


 1082 09f1 0FB65234 		movzbl	52(%rdx), %edx
 1083 09f5 885034   		movb	%dl, 52(%rax)
 1084 09f8 E9480300 		jmp	.L158
 1084      00
 1085              	.L35:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1086              		.loc 2 485 9 discriminator 59
 1087 09fd 488B45C8 		movq	-56(%rbp), %rax
 1088 0a01 488B55C0 		movq	-64(%rbp), %rdx
 1089 0a05 488B0A   		movq	(%rdx), %rcx
 1090 0a08 488B5A08 		movq	8(%rdx), %rbx
 1091 0a0c 488908   		movq	%rcx, (%rax)
 1092 0a0f 48895808 		movq	%rbx, 8(%rax)
 1093 0a13 488B4A10 		movq	16(%rdx), %rcx
 1094 0a17 488B5A18 		movq	24(%rdx), %rbx
 1095 0a1b 48894810 		movq	%rcx, 16(%rax)
 1096 0a1f 48895818 		movq	%rbx, 24(%rax)
 1097 0a23 488B4A20 		movq	32(%rdx), %rcx
 1098 0a27 488B5A28 		movq	40(%rdx), %rbx
 1099 0a2b 48894820 		movq	%rcx, 32(%rax)
 1100 0a2f 48895828 		movq	%rbx, 40(%rax)
 1101 0a33 8B4A30   		movl	48(%rdx), %ecx
 1102 0a36 894830   		movl	%ecx, 48(%rax)
 1103 0a39 0FB75234 		movzwl	52(%rdx), %edx
 1104 0a3d 66895034 		movw	%dx, 52(%rax)
 1105 0a41 E9FF0200 		jmp	.L158
 1105      00
 1106              	.L34:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1107              		.loc 2 485 9 discriminator 60
 1108 0a46 488B45C8 		movq	-56(%rbp), %rax
 1109 0a4a 488B55C0 		movq	-64(%rbp), %rdx
 1110 0a4e 488B0A   		movq	(%rdx), %rcx
 1111 0a51 488B5A08 		movq	8(%rdx), %rbx
 1112 0a55 488908   		movq	%rcx, (%rax)
 1113 0a58 48895808 		movq	%rbx, 8(%rax)
 1114 0a5c 488B4A10 		movq	16(%rdx), %rcx
 1115 0a60 488B5A18 		movq	24(%rdx), %rbx
 1116 0a64 48894810 		movq	%rcx, 16(%rax)
 1117 0a68 48895818 		movq	%rbx, 24(%rax)
 1118 0a6c 488B4A20 		movq	32(%rdx), %rcx
 1119 0a70 488B5A28 		movq	40(%rdx), %rbx
 1120 0a74 48894820 		movq	%rcx, 32(%rax)
 1121 0a78 48895828 		movq	%rbx, 40(%rax)
 1122 0a7c 8B4A30   		movl	48(%rdx), %ecx
 1123 0a7f 894830   		movl	%ecx, 48(%rax)
 1124 0a82 0FB74A34 		movzwl	52(%rdx), %ecx
 1125 0a86 66894834 		movw	%cx, 52(%rax)
 1126 0a8a 0FB65236 		movzbl	54(%rdx), %edx
 1127 0a8e 885036   		movb	%dl, 54(%rax)
 1128 0a91 E9AF0200 		jmp	.L158
 1128      00
 1129              	.L33:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1130              		.loc 2 485 9 discriminator 61
 1131 0a96 488B45C8 		movq	-56(%rbp), %rax
 1132 0a9a 488B55C0 		movq	-64(%rbp), %rdx
GAS LISTING /tmp/ccPqxGpM.s 			page 41


 1133 0a9e 488B0A   		movq	(%rdx), %rcx
 1134 0aa1 488B5A08 		movq	8(%rdx), %rbx
 1135 0aa5 488908   		movq	%rcx, (%rax)
 1136 0aa8 48895808 		movq	%rbx, 8(%rax)
 1137 0aac 488B4A10 		movq	16(%rdx), %rcx
 1138 0ab0 488B5A18 		movq	24(%rdx), %rbx
 1139 0ab4 48894810 		movq	%rcx, 16(%rax)
 1140 0ab8 48895818 		movq	%rbx, 24(%rax)
 1141 0abc 488B4A20 		movq	32(%rdx), %rcx
 1142 0ac0 488B5A28 		movq	40(%rdx), %rbx
 1143 0ac4 48894820 		movq	%rcx, 32(%rax)
 1144 0ac8 48895828 		movq	%rbx, 40(%rax)
 1145 0acc 488B5230 		movq	48(%rdx), %rdx
 1146 0ad0 48895030 		movq	%rdx, 48(%rax)
 1147 0ad4 E96C0200 		jmp	.L158
 1147      00
 1148              	.L32:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1149              		.loc 2 485 9 discriminator 62
 1150 0ad9 488B45C8 		movq	-56(%rbp), %rax
 1151 0add 488B55C0 		movq	-64(%rbp), %rdx
 1152 0ae1 488B0A   		movq	(%rdx), %rcx
 1153 0ae4 488B5A08 		movq	8(%rdx), %rbx
 1154 0ae8 488908   		movq	%rcx, (%rax)
 1155 0aeb 48895808 		movq	%rbx, 8(%rax)
 1156 0aef 488B4A10 		movq	16(%rdx), %rcx
 1157 0af3 488B5A18 		movq	24(%rdx), %rbx
 1158 0af7 48894810 		movq	%rcx, 16(%rax)
 1159 0afb 48895818 		movq	%rbx, 24(%rax)
 1160 0aff 488B4A20 		movq	32(%rdx), %rcx
 1161 0b03 488B5A28 		movq	40(%rdx), %rbx
 1162 0b07 48894820 		movq	%rcx, 32(%rax)
 1163 0b0b 48895828 		movq	%rbx, 40(%rax)
 1164 0b0f 488B4A30 		movq	48(%rdx), %rcx
 1165 0b13 48894830 		movq	%rcx, 48(%rax)
 1166 0b17 0FB65238 		movzbl	56(%rdx), %edx
 1167 0b1b 885038   		movb	%dl, 56(%rax)
 1168 0b1e E9220200 		jmp	.L158
 1168      00
 1169              	.L31:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1170              		.loc 2 485 9 discriminator 63
 1171 0b23 488B45C8 		movq	-56(%rbp), %rax
 1172 0b27 488B55C0 		movq	-64(%rbp), %rdx
 1173 0b2b 488B0A   		movq	(%rdx), %rcx
 1174 0b2e 488B5A08 		movq	8(%rdx), %rbx
 1175 0b32 488908   		movq	%rcx, (%rax)
 1176 0b35 48895808 		movq	%rbx, 8(%rax)
 1177 0b39 488B4A10 		movq	16(%rdx), %rcx
 1178 0b3d 488B5A18 		movq	24(%rdx), %rbx
 1179 0b41 48894810 		movq	%rcx, 16(%rax)
 1180 0b45 48895818 		movq	%rbx, 24(%rax)
 1181 0b49 488B4A20 		movq	32(%rdx), %rcx
 1182 0b4d 488B5A28 		movq	40(%rdx), %rbx
 1183 0b51 48894820 		movq	%rcx, 32(%rax)
 1184 0b55 48895828 		movq	%rbx, 40(%rax)
 1185 0b59 488B4A30 		movq	48(%rdx), %rcx
GAS LISTING /tmp/ccPqxGpM.s 			page 42


 1186 0b5d 48894830 		movq	%rcx, 48(%rax)
 1187 0b61 0FB75238 		movzwl	56(%rdx), %edx
 1188 0b65 66895038 		movw	%dx, 56(%rax)
 1189 0b69 E9D70100 		jmp	.L158
 1189      00
 1190              	.L30:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1191              		.loc 2 485 9 discriminator 64
 1192 0b6e 488B45C8 		movq	-56(%rbp), %rax
 1193 0b72 488B55C0 		movq	-64(%rbp), %rdx
 1194 0b76 488B0A   		movq	(%rdx), %rcx
 1195 0b79 488B5A08 		movq	8(%rdx), %rbx
 1196 0b7d 488908   		movq	%rcx, (%rax)
 1197 0b80 48895808 		movq	%rbx, 8(%rax)
 1198 0b84 488B4A10 		movq	16(%rdx), %rcx
 1199 0b88 488B5A18 		movq	24(%rdx), %rbx
 1200 0b8c 48894810 		movq	%rcx, 16(%rax)
 1201 0b90 48895818 		movq	%rbx, 24(%rax)
 1202 0b94 488B4A20 		movq	32(%rdx), %rcx
 1203 0b98 488B5A28 		movq	40(%rdx), %rbx
 1204 0b9c 48894820 		movq	%rcx, 32(%rax)
 1205 0ba0 48895828 		movq	%rbx, 40(%rax)
 1206 0ba4 488B4A30 		movq	48(%rdx), %rcx
 1207 0ba8 48894830 		movq	%rcx, 48(%rax)
 1208 0bac 0FB74A38 		movzwl	56(%rdx), %ecx
 1209 0bb0 66894838 		movw	%cx, 56(%rax)
 1210 0bb4 0FB6523A 		movzbl	58(%rdx), %edx
 1211 0bb8 88503A   		movb	%dl, 58(%rax)
 1212 0bbb E9850100 		jmp	.L158
 1212      00
 1213              	.L29:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1214              		.loc 2 485 9 discriminator 65
 1215 0bc0 488B45C8 		movq	-56(%rbp), %rax
 1216 0bc4 488B55C0 		movq	-64(%rbp), %rdx
 1217 0bc8 488B0A   		movq	(%rdx), %rcx
 1218 0bcb 488B5A08 		movq	8(%rdx), %rbx
 1219 0bcf 488908   		movq	%rcx, (%rax)
 1220 0bd2 48895808 		movq	%rbx, 8(%rax)
 1221 0bd6 488B4A10 		movq	16(%rdx), %rcx
 1222 0bda 488B5A18 		movq	24(%rdx), %rbx
 1223 0bde 48894810 		movq	%rcx, 16(%rax)
 1224 0be2 48895818 		movq	%rbx, 24(%rax)
 1225 0be6 488B4A20 		movq	32(%rdx), %rcx
 1226 0bea 488B5A28 		movq	40(%rdx), %rbx
 1227 0bee 48894820 		movq	%rcx, 32(%rax)
 1228 0bf2 48895828 		movq	%rbx, 40(%rax)
 1229 0bf6 488B4A30 		movq	48(%rdx), %rcx
 1230 0bfa 48894830 		movq	%rcx, 48(%rax)
 1231 0bfe 8B5238   		movl	56(%rdx), %edx
 1232 0c01 895038   		movl	%edx, 56(%rax)
 1233 0c04 E93C0100 		jmp	.L158
 1233      00
 1234              	.L28:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1235              		.loc 2 485 9 discriminator 66
 1236 0c09 488B45C8 		movq	-56(%rbp), %rax
GAS LISTING /tmp/ccPqxGpM.s 			page 43


 1237 0c0d 488B55C0 		movq	-64(%rbp), %rdx
 1238 0c11 488B0A   		movq	(%rdx), %rcx
 1239 0c14 488B5A08 		movq	8(%rdx), %rbx
 1240 0c18 488908   		movq	%rcx, (%rax)
 1241 0c1b 48895808 		movq	%rbx, 8(%rax)
 1242 0c1f 488B4A10 		movq	16(%rdx), %rcx
 1243 0c23 488B5A18 		movq	24(%rdx), %rbx
 1244 0c27 48894810 		movq	%rcx, 16(%rax)
 1245 0c2b 48895818 		movq	%rbx, 24(%rax)
 1246 0c2f 488B4A20 		movq	32(%rdx), %rcx
 1247 0c33 488B5A28 		movq	40(%rdx), %rbx
 1248 0c37 48894820 		movq	%rcx, 32(%rax)
 1249 0c3b 48895828 		movq	%rbx, 40(%rax)
 1250 0c3f 488B4A30 		movq	48(%rdx), %rcx
 1251 0c43 48894830 		movq	%rcx, 48(%rax)
 1252 0c47 8B4A38   		movl	56(%rdx), %ecx
 1253 0c4a 894838   		movl	%ecx, 56(%rax)
 1254 0c4d 0FB6523C 		movzbl	60(%rdx), %edx
 1255 0c51 88503C   		movb	%dl, 60(%rax)
 1256 0c54 E9EC0000 		jmp	.L158
 1256      00
 1257              	.L27:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1258              		.loc 2 485 9 discriminator 67
 1259 0c59 488B45C8 		movq	-56(%rbp), %rax
 1260 0c5d 488B55C0 		movq	-64(%rbp), %rdx
 1261 0c61 488B0A   		movq	(%rdx), %rcx
 1262 0c64 488B5A08 		movq	8(%rdx), %rbx
 1263 0c68 488908   		movq	%rcx, (%rax)
 1264 0c6b 48895808 		movq	%rbx, 8(%rax)
 1265 0c6f 488B4A10 		movq	16(%rdx), %rcx
 1266 0c73 488B5A18 		movq	24(%rdx), %rbx
 1267 0c77 48894810 		movq	%rcx, 16(%rax)
 1268 0c7b 48895818 		movq	%rbx, 24(%rax)
 1269 0c7f 488B4A20 		movq	32(%rdx), %rcx
 1270 0c83 488B5A28 		movq	40(%rdx), %rbx
 1271 0c87 48894820 		movq	%rcx, 32(%rax)
 1272 0c8b 48895828 		movq	%rbx, 40(%rax)
 1273 0c8f 488B4A30 		movq	48(%rdx), %rcx
 1274 0c93 48894830 		movq	%rcx, 48(%rax)
 1275 0c97 8B4A38   		movl	56(%rdx), %ecx
 1276 0c9a 894838   		movl	%ecx, 56(%rax)
 1277 0c9d 0FB7523C 		movzwl	60(%rdx), %edx
 1278 0ca1 6689503C 		movw	%dx, 60(%rax)
 1279 0ca5 E99B0000 		jmp	.L158
 1279      00
 1280              	.L26:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1281              		.loc 2 485 9 discriminator 68
 1282 0caa 488B45C8 		movq	-56(%rbp), %rax
 1283 0cae 488B55C0 		movq	-64(%rbp), %rdx
 1284 0cb2 488B0A   		movq	(%rdx), %rcx
 1285 0cb5 488B5A08 		movq	8(%rdx), %rbx
 1286 0cb9 488908   		movq	%rcx, (%rax)
 1287 0cbc 48895808 		movq	%rbx, 8(%rax)
 1288 0cc0 488B4A10 		movq	16(%rdx), %rcx
 1289 0cc4 488B5A18 		movq	24(%rdx), %rbx
GAS LISTING /tmp/ccPqxGpM.s 			page 44


 1290 0cc8 48894810 		movq	%rcx, 16(%rax)
 1291 0ccc 48895818 		movq	%rbx, 24(%rax)
 1292 0cd0 488B4A20 		movq	32(%rdx), %rcx
 1293 0cd4 488B5A28 		movq	40(%rdx), %rbx
 1294 0cd8 48894820 		movq	%rcx, 32(%rax)
 1295 0cdc 48895828 		movq	%rbx, 40(%rax)
 1296 0ce0 488B4A30 		movq	48(%rdx), %rcx
 1297 0ce4 48894830 		movq	%rcx, 48(%rax)
 1298 0ce8 8B4A38   		movl	56(%rdx), %ecx
 1299 0ceb 894838   		movl	%ecx, 56(%rax)
 1300 0cee 0FB74A3C 		movzwl	60(%rdx), %ecx
 1301 0cf2 6689483C 		movw	%cx, 60(%rax)
 1302 0cf6 0FB6523E 		movzbl	62(%rdx), %edx
 1303 0cfa 88503E   		movb	%dl, 62(%rax)
 1304 0cfd EB46     		jmp	.L158
 1305              	.L24:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1306              		.loc 2 485 9 discriminator 69
 1307 0cff 488B45C8 		movq	-56(%rbp), %rax
 1308 0d03 488B55C0 		movq	-64(%rbp), %rdx
 1309 0d07 488B0A   		movq	(%rdx), %rcx
 1310 0d0a 488B5A08 		movq	8(%rdx), %rbx
 1311 0d0e 488908   		movq	%rcx, (%rax)
 1312 0d11 48895808 		movq	%rbx, 8(%rax)
 1313 0d15 488B4A10 		movq	16(%rdx), %rcx
 1314 0d19 488B5A18 		movq	24(%rdx), %rbx
 1315 0d1d 48894810 		movq	%rcx, 16(%rax)
 1316 0d21 48895818 		movq	%rbx, 24(%rax)
 1317 0d25 488B4A20 		movq	32(%rdx), %rcx
 1318 0d29 488B5A28 		movq	40(%rdx), %rbx
 1319 0d2d 48894820 		movq	%rcx, 32(%rax)
 1320 0d31 48895828 		movq	%rbx, 40(%rax)
 1321 0d35 488B4A30 		movq	48(%rdx), %rcx
 1322 0d39 488B5A38 		movq	56(%rdx), %rbx
 1323 0d3d 48894830 		movq	%rcx, 48(%rax)
 1324 0d41 48895838 		movq	%rbx, 56(%rax)
 1325              	.L158:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1326              		.loc 2 485 9
 1327 0d45 90       		nop
 1328 0d46 E9810700 		jmp	.L21
 1328      00
 1329              	.L22:
 1330              	.LBB2:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1331              		.loc 2 485 9 discriminator 4
 1332 0d4b 488B45C8 		movq	-56(%rbp), %rax
 1333 0d4f 488945D8 		movq	%rax, -40(%rbp)
 1334 0d53 488B45C0 		movq	-64(%rbp), %rax
 1335 0d57 488945E0 		movq	%rax, -32(%rbp)
 1336 0d5b 48837DB8 		cmpq	$64, -72(%rbp)
 1336      40
 1337 0d60 0F876507 		ja	.L159
 1337      0000
 1338 0d66 488B45B8 		movq	-72(%rbp), %rax
 1339 0d6a 488D1485 		leaq	0(,%rax,4), %rdx
 1339      00000000 
GAS LISTING /tmp/ccPqxGpM.s 			page 45


 1340 0d72 488D0500 		leaq	.L92(%rip), %rax
 1340      000000
 1341 0d79 8B0402   		movl	(%rdx,%rax), %eax
 1342 0d7c 4898     		cltq
 1343 0d7e 488D1500 		leaq	.L92(%rip), %rdx
 1343      000000
 1344 0d85 4801D0   		addq	%rdx, %rax
 1345 0d88 3EFFE0   		notrack jmp	*%rax
 1346              		.section	.rodata.SecDoMemcpyOpt
 1347              		.align 4
 1348              		.align 4
 1349              	.L92:
 1350 0104 00000000 		.long	.L159-.L92
 1351 0108 00000000 		.long	.L155-.L92
 1352 010c 00000000 		.long	.L154-.L92
 1353 0110 00000000 		.long	.L153-.L92
 1354 0114 00000000 		.long	.L152-.L92
 1355 0118 00000000 		.long	.L151-.L92
 1356 011c 00000000 		.long	.L150-.L92
 1357 0120 00000000 		.long	.L149-.L92
 1358 0124 00000000 		.long	.L148-.L92
 1359 0128 00000000 		.long	.L147-.L92
 1360 012c 00000000 		.long	.L146-.L92
 1361 0130 00000000 		.long	.L145-.L92
 1362 0134 00000000 		.long	.L144-.L92
 1363 0138 00000000 		.long	.L143-.L92
 1364 013c 00000000 		.long	.L142-.L92
 1365 0140 00000000 		.long	.L141-.L92
 1366 0144 00000000 		.long	.L140-.L92
 1367 0148 00000000 		.long	.L139-.L92
 1368 014c 00000000 		.long	.L138-.L92
 1369 0150 00000000 		.long	.L137-.L92
 1370 0154 00000000 		.long	.L136-.L92
 1371 0158 00000000 		.long	.L135-.L92
 1372 015c 00000000 		.long	.L134-.L92
 1373 0160 00000000 		.long	.L133-.L92
 1374 0164 00000000 		.long	.L132-.L92
 1375 0168 00000000 		.long	.L131-.L92
 1376 016c 00000000 		.long	.L130-.L92
 1377 0170 00000000 		.long	.L129-.L92
 1378 0174 00000000 		.long	.L128-.L92
 1379 0178 00000000 		.long	.L127-.L92
 1380 017c 00000000 		.long	.L126-.L92
 1381 0180 00000000 		.long	.L125-.L92
 1382 0184 00000000 		.long	.L124-.L92
 1383 0188 00000000 		.long	.L123-.L92
 1384 018c 00000000 		.long	.L122-.L92
 1385 0190 00000000 		.long	.L121-.L92
 1386 0194 00000000 		.long	.L120-.L92
 1387 0198 00000000 		.long	.L119-.L92
 1388 019c 00000000 		.long	.L118-.L92
 1389 01a0 00000000 		.long	.L117-.L92
 1390 01a4 00000000 		.long	.L116-.L92
 1391 01a8 00000000 		.long	.L115-.L92
 1392 01ac 00000000 		.long	.L114-.L92
 1393 01b0 00000000 		.long	.L113-.L92
 1394 01b4 00000000 		.long	.L112-.L92
GAS LISTING /tmp/ccPqxGpM.s 			page 46


 1395 01b8 00000000 		.long	.L111-.L92
 1396 01bc 00000000 		.long	.L110-.L92
 1397 01c0 00000000 		.long	.L109-.L92
 1398 01c4 00000000 		.long	.L108-.L92
 1399 01c8 00000000 		.long	.L107-.L92
 1400 01cc 00000000 		.long	.L106-.L92
 1401 01d0 00000000 		.long	.L105-.L92
 1402 01d4 00000000 		.long	.L104-.L92
 1403 01d8 00000000 		.long	.L103-.L92
 1404 01dc 00000000 		.long	.L102-.L92
 1405 01e0 00000000 		.long	.L101-.L92
 1406 01e4 00000000 		.long	.L100-.L92
 1407 01e8 00000000 		.long	.L99-.L92
 1408 01ec 00000000 		.long	.L98-.L92
 1409 01f0 00000000 		.long	.L97-.L92
 1410 01f4 00000000 		.long	.L96-.L92
 1411 01f8 00000000 		.long	.L95-.L92
 1412 01fc 00000000 		.long	.L94-.L92
 1413 0200 00000000 		.long	.L93-.L92
 1414 0204 00000000 		.long	.L91-.L92
 1415              		.section	.text.SecDoMemcpyOpt
 1416              	.L91:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1417              		.loc 2 485 9 discriminator 200
 1418 0d8b 488B55E0 		movq	-32(%rbp), %rdx
 1419 0d8f 488D4201 		leaq	1(%rdx), %rax
 1420 0d93 488945E0 		movq	%rax, -32(%rbp)
 1421 0d97 488B45D8 		movq	-40(%rbp), %rax
 1422 0d9b 488D4801 		leaq	1(%rax), %rcx
 1423 0d9f 48894DD8 		movq	%rcx, -40(%rbp)
 1424 0da3 0FB612   		movzbl	(%rdx), %edx
 1425 0da6 8810     		movb	%dl, (%rax)
 1426              	.L93:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1427              		.loc 2 485 9 discriminator 201
 1428 0da8 488B55E0 		movq	-32(%rbp), %rdx
 1429 0dac 488D4201 		leaq	1(%rdx), %rax
 1430 0db0 488945E0 		movq	%rax, -32(%rbp)
 1431 0db4 488B45D8 		movq	-40(%rbp), %rax
 1432 0db8 488D4801 		leaq	1(%rax), %rcx
 1433 0dbc 48894DD8 		movq	%rcx, -40(%rbp)
 1434 0dc0 0FB612   		movzbl	(%rdx), %edx
 1435 0dc3 8810     		movb	%dl, (%rax)
 1436              	.L94:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1437              		.loc 2 485 9 discriminator 202
 1438 0dc5 488B55E0 		movq	-32(%rbp), %rdx
 1439 0dc9 488D4201 		leaq	1(%rdx), %rax
 1440 0dcd 488945E0 		movq	%rax, -32(%rbp)
 1441 0dd1 488B45D8 		movq	-40(%rbp), %rax
 1442 0dd5 488D4801 		leaq	1(%rax), %rcx
 1443 0dd9 48894DD8 		movq	%rcx, -40(%rbp)
 1444 0ddd 0FB612   		movzbl	(%rdx), %edx
 1445 0de0 8810     		movb	%dl, (%rax)
 1446              	.L95:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1447              		.loc 2 485 9 discriminator 203
GAS LISTING /tmp/ccPqxGpM.s 			page 47


 1448 0de2 488B55E0 		movq	-32(%rbp), %rdx
 1449 0de6 488D4201 		leaq	1(%rdx), %rax
 1450 0dea 488945E0 		movq	%rax, -32(%rbp)
 1451 0dee 488B45D8 		movq	-40(%rbp), %rax
 1452 0df2 488D4801 		leaq	1(%rax), %rcx
 1453 0df6 48894DD8 		movq	%rcx, -40(%rbp)
 1454 0dfa 0FB612   		movzbl	(%rdx), %edx
 1455 0dfd 8810     		movb	%dl, (%rax)
 1456              	.L96:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1457              		.loc 2 485 9 discriminator 204
 1458 0dff 488B55E0 		movq	-32(%rbp), %rdx
 1459 0e03 488D4201 		leaq	1(%rdx), %rax
 1460 0e07 488945E0 		movq	%rax, -32(%rbp)
 1461 0e0b 488B45D8 		movq	-40(%rbp), %rax
 1462 0e0f 488D4801 		leaq	1(%rax), %rcx
 1463 0e13 48894DD8 		movq	%rcx, -40(%rbp)
 1464 0e17 0FB612   		movzbl	(%rdx), %edx
 1465 0e1a 8810     		movb	%dl, (%rax)
 1466              	.L97:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1467              		.loc 2 485 9 discriminator 205
 1468 0e1c 488B55E0 		movq	-32(%rbp), %rdx
 1469 0e20 488D4201 		leaq	1(%rdx), %rax
 1470 0e24 488945E0 		movq	%rax, -32(%rbp)
 1471 0e28 488B45D8 		movq	-40(%rbp), %rax
 1472 0e2c 488D4801 		leaq	1(%rax), %rcx
 1473 0e30 48894DD8 		movq	%rcx, -40(%rbp)
 1474 0e34 0FB612   		movzbl	(%rdx), %edx
 1475 0e37 8810     		movb	%dl, (%rax)
 1476              	.L98:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1477              		.loc 2 485 9 discriminator 206
 1478 0e39 488B55E0 		movq	-32(%rbp), %rdx
 1479 0e3d 488D4201 		leaq	1(%rdx), %rax
 1480 0e41 488945E0 		movq	%rax, -32(%rbp)
 1481 0e45 488B45D8 		movq	-40(%rbp), %rax
 1482 0e49 488D4801 		leaq	1(%rax), %rcx
 1483 0e4d 48894DD8 		movq	%rcx, -40(%rbp)
 1484 0e51 0FB612   		movzbl	(%rdx), %edx
 1485 0e54 8810     		movb	%dl, (%rax)
 1486              	.L99:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1487              		.loc 2 485 9 discriminator 207
 1488 0e56 488B55E0 		movq	-32(%rbp), %rdx
 1489 0e5a 488D4201 		leaq	1(%rdx), %rax
 1490 0e5e 488945E0 		movq	%rax, -32(%rbp)
 1491 0e62 488B45D8 		movq	-40(%rbp), %rax
 1492 0e66 488D4801 		leaq	1(%rax), %rcx
 1493 0e6a 48894DD8 		movq	%rcx, -40(%rbp)
 1494 0e6e 0FB612   		movzbl	(%rdx), %edx
 1495 0e71 8810     		movb	%dl, (%rax)
 1496              	.L100:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1497              		.loc 2 485 9 discriminator 208
 1498 0e73 488B55E0 		movq	-32(%rbp), %rdx
 1499 0e77 488D4201 		leaq	1(%rdx), %rax
GAS LISTING /tmp/ccPqxGpM.s 			page 48


 1500 0e7b 488945E0 		movq	%rax, -32(%rbp)
 1501 0e7f 488B45D8 		movq	-40(%rbp), %rax
 1502 0e83 488D4801 		leaq	1(%rax), %rcx
 1503 0e87 48894DD8 		movq	%rcx, -40(%rbp)
 1504 0e8b 0FB612   		movzbl	(%rdx), %edx
 1505 0e8e 8810     		movb	%dl, (%rax)
 1506              	.L101:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1507              		.loc 2 485 9 discriminator 209
 1508 0e90 488B55E0 		movq	-32(%rbp), %rdx
 1509 0e94 488D4201 		leaq	1(%rdx), %rax
 1510 0e98 488945E0 		movq	%rax, -32(%rbp)
 1511 0e9c 488B45D8 		movq	-40(%rbp), %rax
 1512 0ea0 488D4801 		leaq	1(%rax), %rcx
 1513 0ea4 48894DD8 		movq	%rcx, -40(%rbp)
 1514 0ea8 0FB612   		movzbl	(%rdx), %edx
 1515 0eab 8810     		movb	%dl, (%rax)
 1516              	.L102:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1517              		.loc 2 485 9 discriminator 210
 1518 0ead 488B55E0 		movq	-32(%rbp), %rdx
 1519 0eb1 488D4201 		leaq	1(%rdx), %rax
 1520 0eb5 488945E0 		movq	%rax, -32(%rbp)
 1521 0eb9 488B45D8 		movq	-40(%rbp), %rax
 1522 0ebd 488D4801 		leaq	1(%rax), %rcx
 1523 0ec1 48894DD8 		movq	%rcx, -40(%rbp)
 1524 0ec5 0FB612   		movzbl	(%rdx), %edx
 1525 0ec8 8810     		movb	%dl, (%rax)
 1526              	.L103:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1527              		.loc 2 485 9 discriminator 211
 1528 0eca 488B55E0 		movq	-32(%rbp), %rdx
 1529 0ece 488D4201 		leaq	1(%rdx), %rax
 1530 0ed2 488945E0 		movq	%rax, -32(%rbp)
 1531 0ed6 488B45D8 		movq	-40(%rbp), %rax
 1532 0eda 488D4801 		leaq	1(%rax), %rcx
 1533 0ede 48894DD8 		movq	%rcx, -40(%rbp)
 1534 0ee2 0FB612   		movzbl	(%rdx), %edx
 1535 0ee5 8810     		movb	%dl, (%rax)
 1536              	.L104:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1537              		.loc 2 485 9 discriminator 212
 1538 0ee7 488B55E0 		movq	-32(%rbp), %rdx
 1539 0eeb 488D4201 		leaq	1(%rdx), %rax
 1540 0eef 488945E0 		movq	%rax, -32(%rbp)
 1541 0ef3 488B45D8 		movq	-40(%rbp), %rax
 1542 0ef7 488D4801 		leaq	1(%rax), %rcx
 1543 0efb 48894DD8 		movq	%rcx, -40(%rbp)
 1544 0eff 0FB612   		movzbl	(%rdx), %edx
 1545 0f02 8810     		movb	%dl, (%rax)
 1546              	.L105:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1547              		.loc 2 485 9 discriminator 213
 1548 0f04 488B55E0 		movq	-32(%rbp), %rdx
 1549 0f08 488D4201 		leaq	1(%rdx), %rax
 1550 0f0c 488945E0 		movq	%rax, -32(%rbp)
 1551 0f10 488B45D8 		movq	-40(%rbp), %rax
GAS LISTING /tmp/ccPqxGpM.s 			page 49


 1552 0f14 488D4801 		leaq	1(%rax), %rcx
 1553 0f18 48894DD8 		movq	%rcx, -40(%rbp)
 1554 0f1c 0FB612   		movzbl	(%rdx), %edx
 1555 0f1f 8810     		movb	%dl, (%rax)
 1556              	.L106:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1557              		.loc 2 485 9 discriminator 214
 1558 0f21 488B55E0 		movq	-32(%rbp), %rdx
 1559 0f25 488D4201 		leaq	1(%rdx), %rax
 1560 0f29 488945E0 		movq	%rax, -32(%rbp)
 1561 0f2d 488B45D8 		movq	-40(%rbp), %rax
 1562 0f31 488D4801 		leaq	1(%rax), %rcx
 1563 0f35 48894DD8 		movq	%rcx, -40(%rbp)
 1564 0f39 0FB612   		movzbl	(%rdx), %edx
 1565 0f3c 8810     		movb	%dl, (%rax)
 1566              	.L107:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1567              		.loc 2 485 9 discriminator 215
 1568 0f3e 488B55E0 		movq	-32(%rbp), %rdx
 1569 0f42 488D4201 		leaq	1(%rdx), %rax
 1570 0f46 488945E0 		movq	%rax, -32(%rbp)
 1571 0f4a 488B45D8 		movq	-40(%rbp), %rax
 1572 0f4e 488D4801 		leaq	1(%rax), %rcx
 1573 0f52 48894DD8 		movq	%rcx, -40(%rbp)
 1574 0f56 0FB612   		movzbl	(%rdx), %edx
 1575 0f59 8810     		movb	%dl, (%rax)
 1576              	.L108:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1577              		.loc 2 485 9 discriminator 216
 1578 0f5b 488B55E0 		movq	-32(%rbp), %rdx
 1579 0f5f 488D4201 		leaq	1(%rdx), %rax
 1580 0f63 488945E0 		movq	%rax, -32(%rbp)
 1581 0f67 488B45D8 		movq	-40(%rbp), %rax
 1582 0f6b 488D4801 		leaq	1(%rax), %rcx
 1583 0f6f 48894DD8 		movq	%rcx, -40(%rbp)
 1584 0f73 0FB612   		movzbl	(%rdx), %edx
 1585 0f76 8810     		movb	%dl, (%rax)
 1586              	.L109:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1587              		.loc 2 485 9 discriminator 217
 1588 0f78 488B55E0 		movq	-32(%rbp), %rdx
 1589 0f7c 488D4201 		leaq	1(%rdx), %rax
 1590 0f80 488945E0 		movq	%rax, -32(%rbp)
 1591 0f84 488B45D8 		movq	-40(%rbp), %rax
 1592 0f88 488D4801 		leaq	1(%rax), %rcx
 1593 0f8c 48894DD8 		movq	%rcx, -40(%rbp)
 1594 0f90 0FB612   		movzbl	(%rdx), %edx
 1595 0f93 8810     		movb	%dl, (%rax)
 1596              	.L110:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1597              		.loc 2 485 9 discriminator 218
 1598 0f95 488B55E0 		movq	-32(%rbp), %rdx
 1599 0f99 488D4201 		leaq	1(%rdx), %rax
 1600 0f9d 488945E0 		movq	%rax, -32(%rbp)
 1601 0fa1 488B45D8 		movq	-40(%rbp), %rax
 1602 0fa5 488D4801 		leaq	1(%rax), %rcx
 1603 0fa9 48894DD8 		movq	%rcx, -40(%rbp)
GAS LISTING /tmp/ccPqxGpM.s 			page 50


 1604 0fad 0FB612   		movzbl	(%rdx), %edx
 1605 0fb0 8810     		movb	%dl, (%rax)
 1606              	.L111:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1607              		.loc 2 485 9 discriminator 219
 1608 0fb2 488B55E0 		movq	-32(%rbp), %rdx
 1609 0fb6 488D4201 		leaq	1(%rdx), %rax
 1610 0fba 488945E0 		movq	%rax, -32(%rbp)
 1611 0fbe 488B45D8 		movq	-40(%rbp), %rax
 1612 0fc2 488D4801 		leaq	1(%rax), %rcx
 1613 0fc6 48894DD8 		movq	%rcx, -40(%rbp)
 1614 0fca 0FB612   		movzbl	(%rdx), %edx
 1615 0fcd 8810     		movb	%dl, (%rax)
 1616              	.L112:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1617              		.loc 2 485 9 discriminator 220
 1618 0fcf 488B55E0 		movq	-32(%rbp), %rdx
 1619 0fd3 488D4201 		leaq	1(%rdx), %rax
 1620 0fd7 488945E0 		movq	%rax, -32(%rbp)
 1621 0fdb 488B45D8 		movq	-40(%rbp), %rax
 1622 0fdf 488D4801 		leaq	1(%rax), %rcx
 1623 0fe3 48894DD8 		movq	%rcx, -40(%rbp)
 1624 0fe7 0FB612   		movzbl	(%rdx), %edx
 1625 0fea 8810     		movb	%dl, (%rax)
 1626              	.L113:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1627              		.loc 2 485 9 discriminator 221
 1628 0fec 488B55E0 		movq	-32(%rbp), %rdx
 1629 0ff0 488D4201 		leaq	1(%rdx), %rax
 1630 0ff4 488945E0 		movq	%rax, -32(%rbp)
 1631 0ff8 488B45D8 		movq	-40(%rbp), %rax
 1632 0ffc 488D4801 		leaq	1(%rax), %rcx
 1633 1000 48894DD8 		movq	%rcx, -40(%rbp)
 1634 1004 0FB612   		movzbl	(%rdx), %edx
 1635 1007 8810     		movb	%dl, (%rax)
 1636              	.L114:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1637              		.loc 2 485 9 discriminator 222
 1638 1009 488B55E0 		movq	-32(%rbp), %rdx
 1639 100d 488D4201 		leaq	1(%rdx), %rax
 1640 1011 488945E0 		movq	%rax, -32(%rbp)
 1641 1015 488B45D8 		movq	-40(%rbp), %rax
 1642 1019 488D4801 		leaq	1(%rax), %rcx
 1643 101d 48894DD8 		movq	%rcx, -40(%rbp)
 1644 1021 0FB612   		movzbl	(%rdx), %edx
 1645 1024 8810     		movb	%dl, (%rax)
 1646              	.L115:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1647              		.loc 2 485 9 discriminator 223
 1648 1026 488B55E0 		movq	-32(%rbp), %rdx
 1649 102a 488D4201 		leaq	1(%rdx), %rax
 1650 102e 488945E0 		movq	%rax, -32(%rbp)
 1651 1032 488B45D8 		movq	-40(%rbp), %rax
 1652 1036 488D4801 		leaq	1(%rax), %rcx
 1653 103a 48894DD8 		movq	%rcx, -40(%rbp)
 1654 103e 0FB612   		movzbl	(%rdx), %edx
 1655 1041 8810     		movb	%dl, (%rax)
GAS LISTING /tmp/ccPqxGpM.s 			page 51


 1656              	.L116:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1657              		.loc 2 485 9 discriminator 224
 1658 1043 488B55E0 		movq	-32(%rbp), %rdx
 1659 1047 488D4201 		leaq	1(%rdx), %rax
 1660 104b 488945E0 		movq	%rax, -32(%rbp)
 1661 104f 488B45D8 		movq	-40(%rbp), %rax
 1662 1053 488D4801 		leaq	1(%rax), %rcx
 1663 1057 48894DD8 		movq	%rcx, -40(%rbp)
 1664 105b 0FB612   		movzbl	(%rdx), %edx
 1665 105e 8810     		movb	%dl, (%rax)
 1666              	.L117:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1667              		.loc 2 485 9 discriminator 225
 1668 1060 488B55E0 		movq	-32(%rbp), %rdx
 1669 1064 488D4201 		leaq	1(%rdx), %rax
 1670 1068 488945E0 		movq	%rax, -32(%rbp)
 1671 106c 488B45D8 		movq	-40(%rbp), %rax
 1672 1070 488D4801 		leaq	1(%rax), %rcx
 1673 1074 48894DD8 		movq	%rcx, -40(%rbp)
 1674 1078 0FB612   		movzbl	(%rdx), %edx
 1675 107b 8810     		movb	%dl, (%rax)
 1676              	.L118:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1677              		.loc 2 485 9 discriminator 226
 1678 107d 488B55E0 		movq	-32(%rbp), %rdx
 1679 1081 488D4201 		leaq	1(%rdx), %rax
 1680 1085 488945E0 		movq	%rax, -32(%rbp)
 1681 1089 488B45D8 		movq	-40(%rbp), %rax
 1682 108d 488D4801 		leaq	1(%rax), %rcx
 1683 1091 48894DD8 		movq	%rcx, -40(%rbp)
 1684 1095 0FB612   		movzbl	(%rdx), %edx
 1685 1098 8810     		movb	%dl, (%rax)
 1686              	.L119:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1687              		.loc 2 485 9 discriminator 227
 1688 109a 488B55E0 		movq	-32(%rbp), %rdx
 1689 109e 488D4201 		leaq	1(%rdx), %rax
 1690 10a2 488945E0 		movq	%rax, -32(%rbp)
 1691 10a6 488B45D8 		movq	-40(%rbp), %rax
 1692 10aa 488D4801 		leaq	1(%rax), %rcx
 1693 10ae 48894DD8 		movq	%rcx, -40(%rbp)
 1694 10b2 0FB612   		movzbl	(%rdx), %edx
 1695 10b5 8810     		movb	%dl, (%rax)
 1696              	.L120:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1697              		.loc 2 485 9 discriminator 228
 1698 10b7 488B55E0 		movq	-32(%rbp), %rdx
 1699 10bb 488D4201 		leaq	1(%rdx), %rax
 1700 10bf 488945E0 		movq	%rax, -32(%rbp)
 1701 10c3 488B45D8 		movq	-40(%rbp), %rax
 1702 10c7 488D4801 		leaq	1(%rax), %rcx
 1703 10cb 48894DD8 		movq	%rcx, -40(%rbp)
 1704 10cf 0FB612   		movzbl	(%rdx), %edx
 1705 10d2 8810     		movb	%dl, (%rax)
 1706              	.L121:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
GAS LISTING /tmp/ccPqxGpM.s 			page 52


 1707              		.loc 2 485 9 discriminator 229
 1708 10d4 488B55E0 		movq	-32(%rbp), %rdx
 1709 10d8 488D4201 		leaq	1(%rdx), %rax
 1710 10dc 488945E0 		movq	%rax, -32(%rbp)
 1711 10e0 488B45D8 		movq	-40(%rbp), %rax
 1712 10e4 488D4801 		leaq	1(%rax), %rcx
 1713 10e8 48894DD8 		movq	%rcx, -40(%rbp)
 1714 10ec 0FB612   		movzbl	(%rdx), %edx
 1715 10ef 8810     		movb	%dl, (%rax)
 1716              	.L122:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1717              		.loc 2 485 9 discriminator 230
 1718 10f1 488B55E0 		movq	-32(%rbp), %rdx
 1719 10f5 488D4201 		leaq	1(%rdx), %rax
 1720 10f9 488945E0 		movq	%rax, -32(%rbp)
 1721 10fd 488B45D8 		movq	-40(%rbp), %rax
 1722 1101 488D4801 		leaq	1(%rax), %rcx
 1723 1105 48894DD8 		movq	%rcx, -40(%rbp)
 1724 1109 0FB612   		movzbl	(%rdx), %edx
 1725 110c 8810     		movb	%dl, (%rax)
 1726              	.L123:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1727              		.loc 2 485 9 discriminator 231
 1728 110e 488B55E0 		movq	-32(%rbp), %rdx
 1729 1112 488D4201 		leaq	1(%rdx), %rax
 1730 1116 488945E0 		movq	%rax, -32(%rbp)
 1731 111a 488B45D8 		movq	-40(%rbp), %rax
 1732 111e 488D4801 		leaq	1(%rax), %rcx
 1733 1122 48894DD8 		movq	%rcx, -40(%rbp)
 1734 1126 0FB612   		movzbl	(%rdx), %edx
 1735 1129 8810     		movb	%dl, (%rax)
 1736              	.L124:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1737              		.loc 2 485 9 discriminator 232
 1738 112b 488B55E0 		movq	-32(%rbp), %rdx
 1739 112f 488D4201 		leaq	1(%rdx), %rax
 1740 1133 488945E0 		movq	%rax, -32(%rbp)
 1741 1137 488B45D8 		movq	-40(%rbp), %rax
 1742 113b 488D4801 		leaq	1(%rax), %rcx
 1743 113f 48894DD8 		movq	%rcx, -40(%rbp)
 1744 1143 0FB612   		movzbl	(%rdx), %edx
 1745 1146 8810     		movb	%dl, (%rax)
 1746              	.L125:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1747              		.loc 2 485 9 discriminator 233
 1748 1148 488B55E0 		movq	-32(%rbp), %rdx
 1749 114c 488D4201 		leaq	1(%rdx), %rax
 1750 1150 488945E0 		movq	%rax, -32(%rbp)
 1751 1154 488B45D8 		movq	-40(%rbp), %rax
 1752 1158 488D4801 		leaq	1(%rax), %rcx
 1753 115c 48894DD8 		movq	%rcx, -40(%rbp)
 1754 1160 0FB612   		movzbl	(%rdx), %edx
 1755 1163 8810     		movb	%dl, (%rax)
 1756              	.L126:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1757              		.loc 2 485 9 discriminator 234
 1758 1165 488B55E0 		movq	-32(%rbp), %rdx
GAS LISTING /tmp/ccPqxGpM.s 			page 53


 1759 1169 488D4201 		leaq	1(%rdx), %rax
 1760 116d 488945E0 		movq	%rax, -32(%rbp)
 1761 1171 488B45D8 		movq	-40(%rbp), %rax
 1762 1175 488D4801 		leaq	1(%rax), %rcx
 1763 1179 48894DD8 		movq	%rcx, -40(%rbp)
 1764 117d 0FB612   		movzbl	(%rdx), %edx
 1765 1180 8810     		movb	%dl, (%rax)
 1766              	.L127:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1767              		.loc 2 485 9 discriminator 235
 1768 1182 488B55E0 		movq	-32(%rbp), %rdx
 1769 1186 488D4201 		leaq	1(%rdx), %rax
 1770 118a 488945E0 		movq	%rax, -32(%rbp)
 1771 118e 488B45D8 		movq	-40(%rbp), %rax
 1772 1192 488D4801 		leaq	1(%rax), %rcx
 1773 1196 48894DD8 		movq	%rcx, -40(%rbp)
 1774 119a 0FB612   		movzbl	(%rdx), %edx
 1775 119d 8810     		movb	%dl, (%rax)
 1776              	.L128:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1777              		.loc 2 485 9 discriminator 236
 1778 119f 488B55E0 		movq	-32(%rbp), %rdx
 1779 11a3 488D4201 		leaq	1(%rdx), %rax
 1780 11a7 488945E0 		movq	%rax, -32(%rbp)
 1781 11ab 488B45D8 		movq	-40(%rbp), %rax
 1782 11af 488D4801 		leaq	1(%rax), %rcx
 1783 11b3 48894DD8 		movq	%rcx, -40(%rbp)
 1784 11b7 0FB612   		movzbl	(%rdx), %edx
 1785 11ba 8810     		movb	%dl, (%rax)
 1786              	.L129:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1787              		.loc 2 485 9 discriminator 237
 1788 11bc 488B55E0 		movq	-32(%rbp), %rdx
 1789 11c0 488D4201 		leaq	1(%rdx), %rax
 1790 11c4 488945E0 		movq	%rax, -32(%rbp)
 1791 11c8 488B45D8 		movq	-40(%rbp), %rax
 1792 11cc 488D4801 		leaq	1(%rax), %rcx
 1793 11d0 48894DD8 		movq	%rcx, -40(%rbp)
 1794 11d4 0FB612   		movzbl	(%rdx), %edx
 1795 11d7 8810     		movb	%dl, (%rax)
 1796              	.L130:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1797              		.loc 2 485 9 discriminator 238
 1798 11d9 488B55E0 		movq	-32(%rbp), %rdx
 1799 11dd 488D4201 		leaq	1(%rdx), %rax
 1800 11e1 488945E0 		movq	%rax, -32(%rbp)
 1801 11e5 488B45D8 		movq	-40(%rbp), %rax
 1802 11e9 488D4801 		leaq	1(%rax), %rcx
 1803 11ed 48894DD8 		movq	%rcx, -40(%rbp)
 1804 11f1 0FB612   		movzbl	(%rdx), %edx
 1805 11f4 8810     		movb	%dl, (%rax)
 1806              	.L131:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1807              		.loc 2 485 9 discriminator 239
 1808 11f6 488B55E0 		movq	-32(%rbp), %rdx
 1809 11fa 488D4201 		leaq	1(%rdx), %rax
 1810 11fe 488945E0 		movq	%rax, -32(%rbp)
GAS LISTING /tmp/ccPqxGpM.s 			page 54


 1811 1202 488B45D8 		movq	-40(%rbp), %rax
 1812 1206 488D4801 		leaq	1(%rax), %rcx
 1813 120a 48894DD8 		movq	%rcx, -40(%rbp)
 1814 120e 0FB612   		movzbl	(%rdx), %edx
 1815 1211 8810     		movb	%dl, (%rax)
 1816              	.L132:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1817              		.loc 2 485 9 discriminator 240
 1818 1213 488B55E0 		movq	-32(%rbp), %rdx
 1819 1217 488D4201 		leaq	1(%rdx), %rax
 1820 121b 488945E0 		movq	%rax, -32(%rbp)
 1821 121f 488B45D8 		movq	-40(%rbp), %rax
 1822 1223 488D4801 		leaq	1(%rax), %rcx
 1823 1227 48894DD8 		movq	%rcx, -40(%rbp)
 1824 122b 0FB612   		movzbl	(%rdx), %edx
 1825 122e 8810     		movb	%dl, (%rax)
 1826              	.L133:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1827              		.loc 2 485 9 discriminator 241
 1828 1230 488B55E0 		movq	-32(%rbp), %rdx
 1829 1234 488D4201 		leaq	1(%rdx), %rax
 1830 1238 488945E0 		movq	%rax, -32(%rbp)
 1831 123c 488B45D8 		movq	-40(%rbp), %rax
 1832 1240 488D4801 		leaq	1(%rax), %rcx
 1833 1244 48894DD8 		movq	%rcx, -40(%rbp)
 1834 1248 0FB612   		movzbl	(%rdx), %edx
 1835 124b 8810     		movb	%dl, (%rax)
 1836              	.L134:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1837              		.loc 2 485 9 discriminator 242
 1838 124d 488B55E0 		movq	-32(%rbp), %rdx
 1839 1251 488D4201 		leaq	1(%rdx), %rax
 1840 1255 488945E0 		movq	%rax, -32(%rbp)
 1841 1259 488B45D8 		movq	-40(%rbp), %rax
 1842 125d 488D4801 		leaq	1(%rax), %rcx
 1843 1261 48894DD8 		movq	%rcx, -40(%rbp)
 1844 1265 0FB612   		movzbl	(%rdx), %edx
 1845 1268 8810     		movb	%dl, (%rax)
 1846              	.L135:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1847              		.loc 2 485 9 discriminator 243
 1848 126a 488B55E0 		movq	-32(%rbp), %rdx
 1849 126e 488D4201 		leaq	1(%rdx), %rax
 1850 1272 488945E0 		movq	%rax, -32(%rbp)
 1851 1276 488B45D8 		movq	-40(%rbp), %rax
 1852 127a 488D4801 		leaq	1(%rax), %rcx
 1853 127e 48894DD8 		movq	%rcx, -40(%rbp)
 1854 1282 0FB612   		movzbl	(%rdx), %edx
 1855 1285 8810     		movb	%dl, (%rax)
 1856              	.L136:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1857              		.loc 2 485 9 discriminator 244
 1858 1287 488B55E0 		movq	-32(%rbp), %rdx
 1859 128b 488D4201 		leaq	1(%rdx), %rax
 1860 128f 488945E0 		movq	%rax, -32(%rbp)
 1861 1293 488B45D8 		movq	-40(%rbp), %rax
 1862 1297 488D4801 		leaq	1(%rax), %rcx
GAS LISTING /tmp/ccPqxGpM.s 			page 55


 1863 129b 48894DD8 		movq	%rcx, -40(%rbp)
 1864 129f 0FB612   		movzbl	(%rdx), %edx
 1865 12a2 8810     		movb	%dl, (%rax)
 1866              	.L137:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1867              		.loc 2 485 9 discriminator 245
 1868 12a4 488B55E0 		movq	-32(%rbp), %rdx
 1869 12a8 488D4201 		leaq	1(%rdx), %rax
 1870 12ac 488945E0 		movq	%rax, -32(%rbp)
 1871 12b0 488B45D8 		movq	-40(%rbp), %rax
 1872 12b4 488D4801 		leaq	1(%rax), %rcx
 1873 12b8 48894DD8 		movq	%rcx, -40(%rbp)
 1874 12bc 0FB612   		movzbl	(%rdx), %edx
 1875 12bf 8810     		movb	%dl, (%rax)
 1876              	.L138:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1877              		.loc 2 485 9 discriminator 246
 1878 12c1 488B55E0 		movq	-32(%rbp), %rdx
 1879 12c5 488D4201 		leaq	1(%rdx), %rax
 1880 12c9 488945E0 		movq	%rax, -32(%rbp)
 1881 12cd 488B45D8 		movq	-40(%rbp), %rax
 1882 12d1 488D4801 		leaq	1(%rax), %rcx
 1883 12d5 48894DD8 		movq	%rcx, -40(%rbp)
 1884 12d9 0FB612   		movzbl	(%rdx), %edx
 1885 12dc 8810     		movb	%dl, (%rax)
 1886              	.L139:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1887              		.loc 2 485 9 discriminator 247
 1888 12de 488B55E0 		movq	-32(%rbp), %rdx
 1889 12e2 488D4201 		leaq	1(%rdx), %rax
 1890 12e6 488945E0 		movq	%rax, -32(%rbp)
 1891 12ea 488B45D8 		movq	-40(%rbp), %rax
 1892 12ee 488D4801 		leaq	1(%rax), %rcx
 1893 12f2 48894DD8 		movq	%rcx, -40(%rbp)
 1894 12f6 0FB612   		movzbl	(%rdx), %edx
 1895 12f9 8810     		movb	%dl, (%rax)
 1896              	.L140:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1897              		.loc 2 485 9 discriminator 248
 1898 12fb 488B55E0 		movq	-32(%rbp), %rdx
 1899 12ff 488D4201 		leaq	1(%rdx), %rax
 1900 1303 488945E0 		movq	%rax, -32(%rbp)
 1901 1307 488B45D8 		movq	-40(%rbp), %rax
 1902 130b 488D4801 		leaq	1(%rax), %rcx
 1903 130f 48894DD8 		movq	%rcx, -40(%rbp)
 1904 1313 0FB612   		movzbl	(%rdx), %edx
 1905 1316 8810     		movb	%dl, (%rax)
 1906              	.L141:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1907              		.loc 2 485 9 discriminator 249
 1908 1318 488B55E0 		movq	-32(%rbp), %rdx
 1909 131c 488D4201 		leaq	1(%rdx), %rax
 1910 1320 488945E0 		movq	%rax, -32(%rbp)
 1911 1324 488B45D8 		movq	-40(%rbp), %rax
 1912 1328 488D4801 		leaq	1(%rax), %rcx
 1913 132c 48894DD8 		movq	%rcx, -40(%rbp)
 1914 1330 0FB612   		movzbl	(%rdx), %edx
GAS LISTING /tmp/ccPqxGpM.s 			page 56


 1915 1333 8810     		movb	%dl, (%rax)
 1916              	.L142:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1917              		.loc 2 485 9 discriminator 250
 1918 1335 488B55E0 		movq	-32(%rbp), %rdx
 1919 1339 488D4201 		leaq	1(%rdx), %rax
 1920 133d 488945E0 		movq	%rax, -32(%rbp)
 1921 1341 488B45D8 		movq	-40(%rbp), %rax
 1922 1345 488D4801 		leaq	1(%rax), %rcx
 1923 1349 48894DD8 		movq	%rcx, -40(%rbp)
 1924 134d 0FB612   		movzbl	(%rdx), %edx
 1925 1350 8810     		movb	%dl, (%rax)
 1926              	.L143:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1927              		.loc 2 485 9 discriminator 251
 1928 1352 488B55E0 		movq	-32(%rbp), %rdx
 1929 1356 488D4201 		leaq	1(%rdx), %rax
 1930 135a 488945E0 		movq	%rax, -32(%rbp)
 1931 135e 488B45D8 		movq	-40(%rbp), %rax
 1932 1362 488D4801 		leaq	1(%rax), %rcx
 1933 1366 48894DD8 		movq	%rcx, -40(%rbp)
 1934 136a 0FB612   		movzbl	(%rdx), %edx
 1935 136d 8810     		movb	%dl, (%rax)
 1936              	.L144:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1937              		.loc 2 485 9 discriminator 252
 1938 136f 488B55E0 		movq	-32(%rbp), %rdx
 1939 1373 488D4201 		leaq	1(%rdx), %rax
 1940 1377 488945E0 		movq	%rax, -32(%rbp)
 1941 137b 488B45D8 		movq	-40(%rbp), %rax
 1942 137f 488D4801 		leaq	1(%rax), %rcx
 1943 1383 48894DD8 		movq	%rcx, -40(%rbp)
 1944 1387 0FB612   		movzbl	(%rdx), %edx
 1945 138a 8810     		movb	%dl, (%rax)
 1946              	.L145:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1947              		.loc 2 485 9 discriminator 253
 1948 138c 488B55E0 		movq	-32(%rbp), %rdx
 1949 1390 488D4201 		leaq	1(%rdx), %rax
 1950 1394 488945E0 		movq	%rax, -32(%rbp)
 1951 1398 488B45D8 		movq	-40(%rbp), %rax
 1952 139c 488D4801 		leaq	1(%rax), %rcx
 1953 13a0 48894DD8 		movq	%rcx, -40(%rbp)
 1954 13a4 0FB612   		movzbl	(%rdx), %edx
 1955 13a7 8810     		movb	%dl, (%rax)
 1956              	.L146:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1957              		.loc 2 485 9 discriminator 254
 1958 13a9 488B55E0 		movq	-32(%rbp), %rdx
 1959 13ad 488D4201 		leaq	1(%rdx), %rax
 1960 13b1 488945E0 		movq	%rax, -32(%rbp)
 1961 13b5 488B45D8 		movq	-40(%rbp), %rax
 1962 13b9 488D4801 		leaq	1(%rax), %rcx
 1963 13bd 48894DD8 		movq	%rcx, -40(%rbp)
 1964 13c1 0FB612   		movzbl	(%rdx), %edx
 1965 13c4 8810     		movb	%dl, (%rax)
 1966              	.L147:
GAS LISTING /tmp/ccPqxGpM.s 			page 57


 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1967              		.loc 2 485 9 discriminator 255
 1968 13c6 488B55E0 		movq	-32(%rbp), %rdx
 1969 13ca 488D4201 		leaq	1(%rdx), %rax
 1970 13ce 488945E0 		movq	%rax, -32(%rbp)
 1971 13d2 488B45D8 		movq	-40(%rbp), %rax
 1972 13d6 488D4801 		leaq	1(%rax), %rcx
 1973 13da 48894DD8 		movq	%rcx, -40(%rbp)
 1974 13de 0FB612   		movzbl	(%rdx), %edx
 1975 13e1 8810     		movb	%dl, (%rax)
 1976              	.L148:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1977              		.loc 2 485 9 discriminator 256
 1978 13e3 488B55E0 		movq	-32(%rbp), %rdx
 1979 13e7 488D4201 		leaq	1(%rdx), %rax
 1980 13eb 488945E0 		movq	%rax, -32(%rbp)
 1981 13ef 488B45D8 		movq	-40(%rbp), %rax
 1982 13f3 488D4801 		leaq	1(%rax), %rcx
 1983 13f7 48894DD8 		movq	%rcx, -40(%rbp)
 1984 13fb 0FB612   		movzbl	(%rdx), %edx
 1985 13fe 8810     		movb	%dl, (%rax)
 1986              	.L149:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1987              		.loc 2 485 9 discriminator 257
 1988 1400 488B55E0 		movq	-32(%rbp), %rdx
 1989 1404 488D4201 		leaq	1(%rdx), %rax
 1990 1408 488945E0 		movq	%rax, -32(%rbp)
 1991 140c 488B45D8 		movq	-40(%rbp), %rax
 1992 1410 488D4801 		leaq	1(%rax), %rcx
 1993 1414 48894DD8 		movq	%rcx, -40(%rbp)
 1994 1418 0FB612   		movzbl	(%rdx), %edx
 1995 141b 8810     		movb	%dl, (%rax)
 1996              	.L150:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 1997              		.loc 2 485 9 discriminator 258
 1998 141d 488B55E0 		movq	-32(%rbp), %rdx
 1999 1421 488D4201 		leaq	1(%rdx), %rax
 2000 1425 488945E0 		movq	%rax, -32(%rbp)
 2001 1429 488B45D8 		movq	-40(%rbp), %rax
 2002 142d 488D4801 		leaq	1(%rax), %rcx
 2003 1431 48894DD8 		movq	%rcx, -40(%rbp)
 2004 1435 0FB612   		movzbl	(%rdx), %edx
 2005 1438 8810     		movb	%dl, (%rax)
 2006              	.L151:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 2007              		.loc 2 485 9 discriminator 259
 2008 143a 488B55E0 		movq	-32(%rbp), %rdx
 2009 143e 488D4201 		leaq	1(%rdx), %rax
 2010 1442 488945E0 		movq	%rax, -32(%rbp)
 2011 1446 488B45D8 		movq	-40(%rbp), %rax
 2012 144a 488D4801 		leaq	1(%rax), %rcx
 2013 144e 48894DD8 		movq	%rcx, -40(%rbp)
 2014 1452 0FB612   		movzbl	(%rdx), %edx
 2015 1455 8810     		movb	%dl, (%rax)
 2016              	.L152:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 2017              		.loc 2 485 9 discriminator 260
GAS LISTING /tmp/ccPqxGpM.s 			page 58


 2018 1457 488B55E0 		movq	-32(%rbp), %rdx
 2019 145b 488D4201 		leaq	1(%rdx), %rax
 2020 145f 488945E0 		movq	%rax, -32(%rbp)
 2021 1463 488B45D8 		movq	-40(%rbp), %rax
 2022 1467 488D4801 		leaq	1(%rax), %rcx
 2023 146b 48894DD8 		movq	%rcx, -40(%rbp)
 2024 146f 0FB612   		movzbl	(%rdx), %edx
 2025 1472 8810     		movb	%dl, (%rax)
 2026              	.L153:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 2027              		.loc 2 485 9 discriminator 261
 2028 1474 488B55E0 		movq	-32(%rbp), %rdx
 2029 1478 488D4201 		leaq	1(%rdx), %rax
 2030 147c 488945E0 		movq	%rax, -32(%rbp)
 2031 1480 488B45D8 		movq	-40(%rbp), %rax
 2032 1484 488D4801 		leaq	1(%rax), %rcx
 2033 1488 48894DD8 		movq	%rcx, -40(%rbp)
 2034 148c 0FB612   		movzbl	(%rdx), %edx
 2035 148f 8810     		movb	%dl, (%rax)
 2036              	.L154:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 2037              		.loc 2 485 9 discriminator 262
 2038 1491 488B55E0 		movq	-32(%rbp), %rdx
 2039 1495 488D4201 		leaq	1(%rdx), %rax
 2040 1499 488945E0 		movq	%rax, -32(%rbp)
 2041 149d 488B45D8 		movq	-40(%rbp), %rax
 2042 14a1 488D4801 		leaq	1(%rax), %rcx
 2043 14a5 48894DD8 		movq	%rcx, -40(%rbp)
 2044 14a9 0FB612   		movzbl	(%rdx), %edx
 2045 14ac 8810     		movb	%dl, (%rax)
 2046              	.L155:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 2047              		.loc 2 485 9 discriminator 263
 2048 14ae 488B55E0 		movq	-32(%rbp), %rdx
 2049 14b2 488D4201 		leaq	1(%rdx), %rax
 2050 14b6 488945E0 		movq	%rax, -32(%rbp)
 2051 14ba 488B45D8 		movq	-40(%rbp), %rax
 2052 14be 488D4801 		leaq	1(%rax), %rcx
 2053 14c2 48894DD8 		movq	%rcx, -40(%rbp)
 2054 14c6 0FB612   		movzbl	(%rdx), %edx
 2055 14c9 8810     		movb	%dl, (%rax)
 2056              	.L159:
 485:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 2057              		.loc 2 485 9
 2058 14cb 90       		nop
 2059              	.L21:
 2060              	.LBE2:
 2061              		.loc 2 487 5 is_stmt 1 discriminator 265
 2062 14cc 90       		nop
 2063              	.L19:
 488:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** }
 2064              		.loc 2 488 1
 2065 14cd 488B45E8 		movq	-24(%rbp), %rax
 2066 14d1 64483304 		xorq	%fs:40, %rax
 2066      25280000 
 2066      00
 2067 14da 7405     		je	.L157
GAS LISTING /tmp/ccPqxGpM.s 			page 59


 2068 14dc E8000000 		call	__stack_chk_fail@PLT
 2068      00
 2069              	.L157:
 2070 14e1 4883C448 		addq	$72, %rsp
 2071 14e5 5B       		popq	%rbx
 2072 14e6 5D       		popq	%rbp
 2073              	.LCFI11:
 2074              		.cfi_def_cfa 7, 8
 2075 14e7 C3       		ret
 2076              		.cfi_endproc
 2077              	.LFE9:
 2079              		.section	.text.memcpy_s,"ax",@progbits
 2080              		.globl	memcpy_s
 2082              	memcpy_s:
 2083              	.LFB10:
 489:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
 490:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 491:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT)
 492:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     /* fread API in windows will call memcpy_s and pass 0xffffffff to destMax.
 493:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****      * To avoid the failure of fread, we don't check desMax limit.
 494:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****      */
 495:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #define SECUREC_MEMCPY_PARAM_OK(dest, destMax, src, count) (SECUREC_LIKELY((count) <= (destMax) && 
 496:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     (dest) != NULL && (src) != NULL && \
 497:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     (count) > 0 && SECUREC_MEMORY_NO_OVERLAP((dest), (src), (count))))
 498:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #else
 499:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #define SECUREC_MEMCPY_PARAM_OK(dest, destMax, src, count) (SECUREC_LIKELY((count) <= (destMax) && 
 500:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     (dest) != NULL && (src) != NULL && \
 501:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     (destMax) <= SECUREC_MEM_MAX_LEN && \
 502:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     (count) > 0 && SECUREC_MEMORY_NO_OVERLAP((dest), (src), (count))))
 503:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
 504:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 505:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /*
 506:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * <FUNCTION DESCRIPTION>
 507:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    The memcpy_s function copies n characters from the object pointed to by src into the object p
 508:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
 509:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * <INPUT PARAMETERS>
 510:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    dest                      Destination buffer.
 511:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    destMax                   Size of the destination buffer.
 512:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    src                       Buffer to copy from.
 513:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    count                     Number of characters to copy
 514:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
 515:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * <OUTPUT PARAMETERS>
 516:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    dest buffer               is updated.
 517:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
 518:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * <RETURN VALUE>
 519:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    EOK                      Success
 520:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    EINVAL                   dest is  NULL and destMax != 0 and destMax <= SECUREC_MEM_MAX_LEN
 521:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    EINVAL_AND_RESET         dest != NULL and src is NULLL and destMax != 0 and destMax <= SECURE
 522:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    ERANGE                   destMax > SECUREC_MEM_MAX_LEN or destMax is 0
 523:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    ERANGE_AND_RESET         count > destMax and destMax != 0 and destMax <= SECUREC_MEM_MAX_LEN
 524:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *                             and dest  !=  NULL  and src != NULL
 525:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    EOVERLAP_AND_RESET       dest buffer and source buffer are overlapped and
 526:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *                             count <= destMax destMax != 0 and destMax <= SECUREC_MEM_MAX_LEN and
 527:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *                             and src != NULL  and dest != src
 528:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *
 529:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    if an error occured, dest will be filled with 0.
 530:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    If the source and destination overlap, the behavior of memcpy_s is undefined.
GAS LISTING /tmp/ccPqxGpM.s 			page 60


 531:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  *    Use memmove_s to handle overlapping regions.
 532:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
 533:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** errno_t memcpy_s(void *dest, size_t destMax, const void *src, size_t count)
 534:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** {
 2084              		.loc 2 534 1
 2085              		.cfi_startproc
 2086 0000 F30F1EFA 		endbr64
 2087 0004 55       		pushq	%rbp
 2088              	.LCFI12:
 2089              		.cfi_def_cfa_offset 16
 2090              		.cfi_offset 6, -16
 2091 0005 4889E5   		movq	%rsp, %rbp
 2092              	.LCFI13:
 2093              		.cfi_def_cfa_register 6
 2094 0008 4883EC30 		subq	$48, %rsp
 2095 000c 48897DE8 		movq	%rdi, -24(%rbp)
 2096 0010 488975E0 		movq	%rsi, -32(%rbp)
 2097 0014 488955D8 		movq	%rdx, -40(%rbp)
 2098 0018 48894DD0 		movq	%rcx, -48(%rbp)
 2099              		.loc 2 534 1
 2100 001c 64488B04 		movq	%fs:40, %rax
 2100      25280000 
 2100      00
 2101 0025 488945F8 		movq	%rax, -8(%rbp)
 2102 0029 31C0     		xorl	%eax, %eax
 535:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (SECUREC_MEMCPY_PARAM_OK(dest, destMax, src, count)) {
 2103              		.loc 2 535 9
 2104 002b 488B45D0 		movq	-48(%rbp), %rax
 2105 002f 483B45E0 		cmpq	-32(%rbp), %rax
 2106 0033 0F96C0   		setbe	%al
 2107 0036 0FB6C0   		movzbl	%al, %eax
 2108              		.loc 2 535 8
 2109 0039 4885C0   		testq	%rax, %rax
 2110 003c 7417     		je	.L161
 2111              		.loc 2 535 9 discriminator 1
 2112 003e 48837DE8 		cmpq	$0, -24(%rbp)
 2112      00
 2113 0043 0F95C0   		setne	%al
 2114 0046 0FB6C0   		movzbl	%al, %eax
 2115              		.loc 2 535 8 discriminator 1
 2116 0049 4885C0   		testq	%rax, %rax
 2117 004c 7407     		je	.L161
 2118              		.loc 2 535 8 is_stmt 0 discriminator 3
 2119 004e B8010000 		movl	$1, %eax
 2119      00
 2120 0053 EB05     		jmp	.L162
 2121              	.L161:
 2122              		.loc 2 535 8 discriminator 4
 2123 0055 B8000000 		movl	$0, %eax
 2123      00
 2124              	.L162:
 2125              		.loc 2 535 8 discriminator 6
 2126 005a 85C0     		testl	%eax, %eax
 2127 005c 7417     		je	.L163
 2128              		.loc 2 535 9 is_stmt 1 discriminator 7
 2129 005e 48837DD8 		cmpq	$0, -40(%rbp)
 2129      00
GAS LISTING /tmp/ccPqxGpM.s 			page 61


 2130 0063 0F95C0   		setne	%al
 2131 0066 0FB6C0   		movzbl	%al, %eax
 2132              		.loc 2 535 8 discriminator 7
 2133 0069 4885C0   		testq	%rax, %rax
 2134 006c 7407     		je	.L163
 2135              		.loc 2 535 8 is_stmt 0 discriminator 9
 2136 006e B8010000 		movl	$1, %eax
 2136      00
 2137 0073 EB05     		jmp	.L164
 2138              	.L163:
 2139              		.loc 2 535 8 discriminator 10
 2140 0075 B8000000 		movl	$0, %eax
 2140      00
 2141              	.L164:
 2142              		.loc 2 535 8 discriminator 12
 2143 007a 85C0     		testl	%eax, %eax
 2144 007c 741B     		je	.L165
 2145              		.loc 2 535 9 is_stmt 1 discriminator 13
 2146 007e B8000000 		movl	$2147483648, %eax
 2146      80
 2147 0083 483945E0 		cmpq	%rax, -32(%rbp)
 2148 0087 0F92C0   		setb	%al
 2149 008a 0FB6C0   		movzbl	%al, %eax
 2150              		.loc 2 535 8 discriminator 13
 2151 008d 4885C0   		testq	%rax, %rax
 2152 0090 7407     		je	.L165
 2153              		.loc 2 535 8 is_stmt 0 discriminator 15
 2154 0092 B8010000 		movl	$1, %eax
 2154      00
 2155 0097 EB05     		jmp	.L166
 2156              	.L165:
 2157              		.loc 2 535 8 discriminator 16
 2158 0099 B8000000 		movl	$0, %eax
 2158      00
 2159              	.L166:
 2160              		.loc 2 535 8 discriminator 18
 2161 009e 85C0     		testl	%eax, %eax
 2162 00a0 7417     		je	.L167
 2163              		.loc 2 535 9 is_stmt 1 discriminator 19
 2164 00a2 48837DD0 		cmpq	$0, -48(%rbp)
 2164      00
 2165 00a7 0F95C0   		setne	%al
 2166 00aa 0FB6C0   		movzbl	%al, %eax
 2167              		.loc 2 535 8 discriminator 19
 2168 00ad 4885C0   		testq	%rax, %rax
 2169 00b0 7407     		je	.L167
 2170              		.loc 2 535 8 is_stmt 0 discriminator 21
 2171 00b2 B8010000 		movl	$1, %eax
 2171      00
 2172 00b7 EB05     		jmp	.L168
 2173              	.L167:
 2174              		.loc 2 535 8 discriminator 22
 2175 00b9 B8000000 		movl	$0, %eax
 2175      00
 2176              	.L168:
 2177              		.loc 2 535 8 discriminator 24
 2178 00be 85C0     		testl	%eax, %eax
GAS LISTING /tmp/ccPqxGpM.s 			page 62


 2179 00c0 0F84A800 		je	.L169
 2179      0000
 2180              		.loc 2 535 9 is_stmt 1 discriminator 25
 2181 00c6 488B45D8 		movq	-40(%rbp), %rax
 2182 00ca 483B45E8 		cmpq	-24(%rbp), %rax
 2183 00ce 0F92C0   		setb	%al
 2184 00d1 0FB6C0   		movzbl	%al, %eax
 2185              		.loc 2 535 8 discriminator 25
 2186 00d4 4885C0   		testq	%rax, %rax
 2187 00d7 7421     		je	.L170
 2188              		.loc 2 535 9 discriminator 26
 2189 00d9 488B55D8 		movq	-40(%rbp), %rdx
 2190 00dd 488B45D0 		movq	-48(%rbp), %rax
 2191 00e1 4801D0   		addq	%rdx, %rax
 2192 00e4 483945E8 		cmpq	%rax, -24(%rbp)
 2193 00e8 0F93C0   		setnb	%al
 2194 00eb 0FB6C0   		movzbl	%al, %eax
 2195              		.loc 2 535 8 discriminator 26
 2196 00ee 4885C0   		testq	%rax, %rax
 2197 00f1 7407     		je	.L170
 2198              		.loc 2 535 8 is_stmt 0 discriminator 28
 2199 00f3 B8010000 		movl	$1, %eax
 2199      00
 2200 00f8 EB05     		jmp	.L171
 2201              	.L170:
 2202              		.loc 2 535 8 discriminator 29
 2203 00fa B8000000 		movl	$0, %eax
 2203      00
 2204              	.L171:
 2205              		.loc 2 535 8 discriminator 31
 2206 00ff 85C0     		testl	%eax, %eax
 2207 0101 753D     		jne	.L172
 2208              		.loc 2 535 9 is_stmt 1 discriminator 33
 2209 0103 488B45E8 		movq	-24(%rbp), %rax
 2210 0107 483B45D8 		cmpq	-40(%rbp), %rax
 2211 010b 0F92C0   		setb	%al
 2212 010e 0FB6C0   		movzbl	%al, %eax
 2213              		.loc 2 535 8 discriminator 33
 2214 0111 4885C0   		testq	%rax, %rax
 2215 0114 7421     		je	.L173
 2216              		.loc 2 535 9 discriminator 34
 2217 0116 488B55E8 		movq	-24(%rbp), %rdx
 2218 011a 488B45D0 		movq	-48(%rbp), %rax
 2219 011e 4801D0   		addq	%rdx, %rax
 2220 0121 483945D8 		cmpq	%rax, -40(%rbp)
 2221 0125 0F93C0   		setnb	%al
 2222 0128 0FB6C0   		movzbl	%al, %eax
 2223              		.loc 2 535 8 discriminator 34
 2224 012b 4885C0   		testq	%rax, %rax
 2225 012e 7407     		je	.L173
 2226              		.loc 2 535 8 is_stmt 0 discriminator 36
 2227 0130 B8010000 		movl	$1, %eax
 2227      00
 2228 0135 EB05     		jmp	.L174
 2229              	.L173:
 2230              		.loc 2 535 8 discriminator 37
 2231 0137 B8000000 		movl	$0, %eax
GAS LISTING /tmp/ccPqxGpM.s 			page 63


 2231      00
 2232              	.L174:
 2233              		.loc 2 535 8 discriminator 39
 2234 013c 85C0     		testl	%eax, %eax
 2235 013e 7407     		je	.L175
 2236              	.L172:
 2237              		.loc 2 535 8 discriminator 40
 2238 0140 B8010000 		movl	$1, %eax
 2238      00
 2239 0145 EB05     		jmp	.L176
 2240              	.L175:
 2241              		.loc 2 535 8 discriminator 41
 2242 0147 B8000000 		movl	$0, %eax
 2242      00
 2243              	.L176:
 2244              		.loc 2 535 8 discriminator 43
 2245 014c 85C0     		testl	%eax, %eax
 2246 014e 741E     		je	.L169
 536:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #if SECUREC_MEMCOPY_WITH_PERFORMANCE
 537:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SecDoMemcpyOpt(dest, src, count);
 538:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #else
 539:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SecDoMemcpy(dest, src, count);
 2247              		.loc 2 539 9 is_stmt 1
 2248 0150 488B55D0 		movq	-48(%rbp), %rdx
 2249 0154 488B4DD8 		movq	-40(%rbp), %rcx
 2250 0158 488B45E8 		movq	-24(%rbp), %rax
 2251 015c 4889CE   		movq	%rcx, %rsi
 2252 015f 4889C7   		movq	%rax, %rdi
 2253 0162 E8000000 		call	SecDoMemcpy
 2253      00
 540:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
 541:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return EOK;
 2254              		.loc 2 541 16
 2255 0167 B8000000 		movl	$0, %eax
 2255      00
 2256 016c EB18     		jmp	.L177
 2257              	.L169:
 542:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 543:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     /* meet some runtime violation, return error code */
 544:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     return SecMemcpyError(dest, destMax, src, count);
 2258              		.loc 2 544 12
 2259 016e 488B4DD0 		movq	-48(%rbp), %rcx
 2260 0172 488B55D8 		movq	-40(%rbp), %rdx
 2261 0176 488B75E0 		movq	-32(%rbp), %rsi
 2262 017a 488B45E8 		movq	-24(%rbp), %rax
 2263 017e 4889C7   		movq	%rax, %rdi
 2264 0181 E8000000 		call	SecMemcpyError
 2264      00
 2265              	.L177:
 545:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** }
 2266              		.loc 2 545 1
 2267 0186 488B7DF8 		movq	-8(%rbp), %rdi
 2268 018a 6448333C 		xorq	%fs:40, %rdi
 2268      25280000 
 2268      00
 2269 0193 7405     		je	.L178
 2270 0195 E8000000 		call	__stack_chk_fail@PLT
GAS LISTING /tmp/ccPqxGpM.s 			page 64


 2270      00
 2271              	.L178:
 2272 019a C9       		leave
 2273              	.LCFI14:
 2274              		.cfi_def_cfa 7, 8
 2275 019b C3       		ret
 2276              		.cfi_endproc
 2277              	.LFE10:
 2279              		.section	.text.memcpy_sOptAsm,"ax",@progbits
 2280              		.globl	memcpy_sOptAsm
 2282              	memcpy_sOptAsm:
 2283              	.LFB11:
 546:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 547:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #if SECUREC_IN_KERNEL
 548:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** EXPORT_SYMBOL(memcpy_s);
 549:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #endif
 550:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 551:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** #if SECUREC_WITH_PERFORMANCE_ADDONS
 552:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /*
 553:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  * Performance optimization
 554:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****  */
 555:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** errno_t memcpy_sOptAsm(void *dest, size_t destMax, const void *src, size_t count)
 556:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** {
 2284              		.loc 2 556 1
 2285              		.cfi_startproc
 2286 0000 F30F1EFA 		endbr64
 2287 0004 55       		pushq	%rbp
 2288              	.LCFI15:
 2289              		.cfi_def_cfa_offset 16
 2290              		.cfi_offset 6, -16
 2291 0005 4889E5   		movq	%rsp, %rbp
 2292              	.LCFI16:
 2293              		.cfi_def_cfa_register 6
 2294 0008 4883EC30 		subq	$48, %rsp
 2295 000c 48897DE8 		movq	%rdi, -24(%rbp)
 2296 0010 488975E0 		movq	%rsi, -32(%rbp)
 2297 0014 488955D8 		movq	%rdx, -40(%rbp)
 2298 0018 48894DD0 		movq	%rcx, -48(%rbp)
 2299              		.loc 2 556 1
 2300 001c 64488B04 		movq	%fs:40, %rax
 2300      25280000 
 2300      00
 2301 0025 488945F8 		movq	%rax, -8(%rbp)
 2302 0029 31C0     		xorl	%eax, %eax
 557:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (SECUREC_MEMCPY_PARAM_OK(dest, destMax, src, count)) {
 2303              		.loc 2 557 9
 2304 002b 488B45D0 		movq	-48(%rbp), %rax
 2305 002f 483B45E0 		cmpq	-32(%rbp), %rax
 2306 0033 0F96C0   		setbe	%al
 2307 0036 0FB6C0   		movzbl	%al, %eax
 2308              		.loc 2 557 8
 2309 0039 4885C0   		testq	%rax, %rax
 2310 003c 7417     		je	.L180
 2311              		.loc 2 557 9 discriminator 1
 2312 003e 48837DE8 		cmpq	$0, -24(%rbp)
 2312      00
 2313 0043 0F95C0   		setne	%al
GAS LISTING /tmp/ccPqxGpM.s 			page 65


 2314 0046 0FB6C0   		movzbl	%al, %eax
 2315              		.loc 2 557 8 discriminator 1
 2316 0049 4885C0   		testq	%rax, %rax
 2317 004c 7407     		je	.L180
 2318              		.loc 2 557 8 is_stmt 0 discriminator 3
 2319 004e B8010000 		movl	$1, %eax
 2319      00
 2320 0053 EB05     		jmp	.L181
 2321              	.L180:
 2322              		.loc 2 557 8 discriminator 4
 2323 0055 B8000000 		movl	$0, %eax
 2323      00
 2324              	.L181:
 2325              		.loc 2 557 8 discriminator 6
 2326 005a 85C0     		testl	%eax, %eax
 2327 005c 7417     		je	.L182
 2328              		.loc 2 557 9 is_stmt 1 discriminator 7
 2329 005e 48837DD8 		cmpq	$0, -40(%rbp)
 2329      00
 2330 0063 0F95C0   		setne	%al
 2331 0066 0FB6C0   		movzbl	%al, %eax
 2332              		.loc 2 557 8 discriminator 7
 2333 0069 4885C0   		testq	%rax, %rax
 2334 006c 7407     		je	.L182
 2335              		.loc 2 557 8 is_stmt 0 discriminator 9
 2336 006e B8010000 		movl	$1, %eax
 2336      00
 2337 0073 EB05     		jmp	.L183
 2338              	.L182:
 2339              		.loc 2 557 8 discriminator 10
 2340 0075 B8000000 		movl	$0, %eax
 2340      00
 2341              	.L183:
 2342              		.loc 2 557 8 discriminator 12
 2343 007a 85C0     		testl	%eax, %eax
 2344 007c 741B     		je	.L184
 2345              		.loc 2 557 9 is_stmt 1 discriminator 13
 2346 007e B8000000 		movl	$2147483648, %eax
 2346      80
 2347 0083 483945E0 		cmpq	%rax, -32(%rbp)
 2348 0087 0F92C0   		setb	%al
 2349 008a 0FB6C0   		movzbl	%al, %eax
 2350              		.loc 2 557 8 discriminator 13
 2351 008d 4885C0   		testq	%rax, %rax
 2352 0090 7407     		je	.L184
 2353              		.loc 2 557 8 is_stmt 0 discriminator 15
 2354 0092 B8010000 		movl	$1, %eax
 2354      00
 2355 0097 EB05     		jmp	.L185
 2356              	.L184:
 2357              		.loc 2 557 8 discriminator 16
 2358 0099 B8000000 		movl	$0, %eax
 2358      00
 2359              	.L185:
 2360              		.loc 2 557 8 discriminator 18
 2361 009e 85C0     		testl	%eax, %eax
 2362 00a0 7417     		je	.L186
GAS LISTING /tmp/ccPqxGpM.s 			page 66


 2363              		.loc 2 557 9 is_stmt 1 discriminator 19
 2364 00a2 48837DD0 		cmpq	$0, -48(%rbp)
 2364      00
 2365 00a7 0F95C0   		setne	%al
 2366 00aa 0FB6C0   		movzbl	%al, %eax
 2367              		.loc 2 557 8 discriminator 19
 2368 00ad 4885C0   		testq	%rax, %rax
 2369 00b0 7407     		je	.L186
 2370              		.loc 2 557 8 is_stmt 0 discriminator 21
 2371 00b2 B8010000 		movl	$1, %eax
 2371      00
 2372 00b7 EB05     		jmp	.L187
 2373              	.L186:
 2374              		.loc 2 557 8 discriminator 22
 2375 00b9 B8000000 		movl	$0, %eax
 2375      00
 2376              	.L187:
 2377              		.loc 2 557 8 discriminator 24
 2378 00be 85C0     		testl	%eax, %eax
 2379 00c0 0F84A800 		je	.L188
 2379      0000
 2380              		.loc 2 557 9 is_stmt 1 discriminator 25
 2381 00c6 488B45D8 		movq	-40(%rbp), %rax
 2382 00ca 483B45E8 		cmpq	-24(%rbp), %rax
 2383 00ce 0F92C0   		setb	%al
 2384 00d1 0FB6C0   		movzbl	%al, %eax
 2385              		.loc 2 557 8 discriminator 25
 2386 00d4 4885C0   		testq	%rax, %rax
 2387 00d7 7421     		je	.L189
 2388              		.loc 2 557 9 discriminator 26
 2389 00d9 488B55D8 		movq	-40(%rbp), %rdx
 2390 00dd 488B45D0 		movq	-48(%rbp), %rax
 2391 00e1 4801D0   		addq	%rdx, %rax
 2392 00e4 483945E8 		cmpq	%rax, -24(%rbp)
 2393 00e8 0F93C0   		setnb	%al
 2394 00eb 0FB6C0   		movzbl	%al, %eax
 2395              		.loc 2 557 8 discriminator 26
 2396 00ee 4885C0   		testq	%rax, %rax
 2397 00f1 7407     		je	.L189
 2398              		.loc 2 557 8 is_stmt 0 discriminator 28
 2399 00f3 B8010000 		movl	$1, %eax
 2399      00
 2400 00f8 EB05     		jmp	.L190
 2401              	.L189:
 2402              		.loc 2 557 8 discriminator 29
 2403 00fa B8000000 		movl	$0, %eax
 2403      00
 2404              	.L190:
 2405              		.loc 2 557 8 discriminator 31
 2406 00ff 85C0     		testl	%eax, %eax
 2407 0101 753D     		jne	.L191
 2408              		.loc 2 557 9 is_stmt 1 discriminator 33
 2409 0103 488B45E8 		movq	-24(%rbp), %rax
 2410 0107 483B45D8 		cmpq	-40(%rbp), %rax
 2411 010b 0F92C0   		setb	%al
 2412 010e 0FB6C0   		movzbl	%al, %eax
 2413              		.loc 2 557 8 discriminator 33
GAS LISTING /tmp/ccPqxGpM.s 			page 67


 2414 0111 4885C0   		testq	%rax, %rax
 2415 0114 7421     		je	.L192
 2416              		.loc 2 557 9 discriminator 34
 2417 0116 488B55E8 		movq	-24(%rbp), %rdx
 2418 011a 488B45D0 		movq	-48(%rbp), %rax
 2419 011e 4801D0   		addq	%rdx, %rax
 2420 0121 483945D8 		cmpq	%rax, -40(%rbp)
 2421 0125 0F93C0   		setnb	%al
 2422 0128 0FB6C0   		movzbl	%al, %eax
 2423              		.loc 2 557 8 discriminator 34
 2424 012b 4885C0   		testq	%rax, %rax
 2425 012e 7407     		je	.L192
 2426              		.loc 2 557 8 is_stmt 0 discriminator 36
 2427 0130 B8010000 		movl	$1, %eax
 2427      00
 2428 0135 EB05     		jmp	.L193
 2429              	.L192:
 2430              		.loc 2 557 8 discriminator 37
 2431 0137 B8000000 		movl	$0, %eax
 2431      00
 2432              	.L193:
 2433              		.loc 2 557 8 discriminator 39
 2434 013c 85C0     		testl	%eax, %eax
 2435 013e 7407     		je	.L194
 2436              	.L191:
 2437              		.loc 2 557 8 discriminator 40
 2438 0140 B8010000 		movl	$1, %eax
 2438      00
 2439 0145 EB05     		jmp	.L195
 2440              	.L194:
 2441              		.loc 2 557 8 discriminator 41
 2442 0147 B8000000 		movl	$0, %eax
 2442      00
 2443              	.L195:
 2444              		.loc 2 557 8 discriminator 43
 2445 014c 85C0     		testl	%eax, %eax
 2446 014e 741E     		je	.L188
 558:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SecDoMemcpyOpt(dest, src, count);
 2447              		.loc 2 558 9 is_stmt 1
 2448 0150 488B55D0 		movq	-48(%rbp), %rdx
 2449 0154 488B4DD8 		movq	-40(%rbp), %rcx
 2450 0158 488B45E8 		movq	-24(%rbp), %rax
 2451 015c 4889CE   		movq	%rcx, %rsi
 2452 015f 4889C7   		movq	%rax, %rdi
 2453 0162 E8000000 		call	SecDoMemcpyOpt
 2453      00
 559:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return EOK;
 2454              		.loc 2 559 16
 2455 0167 B8000000 		movl	$0, %eax
 2455      00
 2456 016c EB18     		jmp	.L196
 2457              	.L188:
 560:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 561:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     /* meet some runtime violation, return error code */
 562:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     return SecMemcpyError(dest, destMax, src, count);
 2458              		.loc 2 562 12
 2459 016e 488B4DD0 		movq	-48(%rbp), %rcx
GAS LISTING /tmp/ccPqxGpM.s 			page 68


 2460 0172 488B55D8 		movq	-40(%rbp), %rdx
 2461 0176 488B75E0 		movq	-32(%rbp), %rsi
 2462 017a 488B45E8 		movq	-24(%rbp), %rax
 2463 017e 4889C7   		movq	%rax, %rdi
 2464 0181 E8000000 		call	SecMemcpyError
 2464      00
 2465              	.L196:
 563:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** }
 2466              		.loc 2 563 1
 2467 0186 488B7DF8 		movq	-8(%rbp), %rdi
 2468 018a 6448333C 		xorq	%fs:40, %rdi
 2468      25280000 
 2468      00
 2469 0193 7405     		je	.L197
 2470 0195 E8000000 		call	__stack_chk_fail@PLT
 2470      00
 2471              	.L197:
 2472 019a C9       		leave
 2473              	.LCFI17:
 2474              		.cfi_def_cfa 7, 8
 2475 019b C3       		ret
 2476              		.cfi_endproc
 2477              	.LFE11:
 2479              		.section	.text.memcpy_sOptTc,"ax",@progbits
 2480              		.globl	memcpy_sOptTc
 2482              	memcpy_sOptTc:
 2483              	.LFB12:
 564:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** 
 565:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** /* trim judgement on "destMax <= SECUREC_MEM_MAX_LEN" */
 566:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** errno_t memcpy_sOptTc(void *dest, size_t destMax, const void *src, size_t count)
 567:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** {
 2484              		.loc 2 567 1
 2485              		.cfi_startproc
 2486 0000 F30F1EFA 		endbr64
 2487 0004 55       		pushq	%rbp
 2488              	.LCFI18:
 2489              		.cfi_def_cfa_offset 16
 2490              		.cfi_offset 6, -16
 2491 0005 4889E5   		movq	%rsp, %rbp
 2492              	.LCFI19:
 2493              		.cfi_def_cfa_register 6
 2494 0008 4883EC30 		subq	$48, %rsp
 2495 000c 48897DE8 		movq	%rdi, -24(%rbp)
 2496 0010 488975E0 		movq	%rsi, -32(%rbp)
 2497 0014 488955D8 		movq	%rdx, -40(%rbp)
 2498 0018 48894DD0 		movq	%rcx, -48(%rbp)
 2499              		.loc 2 567 1
 2500 001c 64488B04 		movq	%fs:40, %rax
 2500      25280000 
 2500      00
 2501 0025 488945F8 		movq	%rax, -8(%rbp)
 2502 0029 31C0     		xorl	%eax, %eax
 568:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     if (SECUREC_LIKELY(count <= destMax && dest != NULL && src != NULL && \
 2503              		.loc 2 568 9
 2504 002b 488B45D0 		movq	-48(%rbp), %rax
 2505 002f 483B45E0 		cmpq	-32(%rbp), %rax
 2506 0033 0F96C0   		setbe	%al
GAS LISTING /tmp/ccPqxGpM.s 			page 69


 2507 0036 0FB6C0   		movzbl	%al, %eax
 2508              		.loc 2 568 8
 2509 0039 4885C0   		testq	%rax, %rax
 2510 003c 7417     		je	.L199
 2511              		.loc 2 568 9 discriminator 1
 2512 003e 48837DE8 		cmpq	$0, -24(%rbp)
 2512      00
 2513 0043 0F95C0   		setne	%al
 2514 0046 0FB6C0   		movzbl	%al, %eax
 2515              		.loc 2 568 8 discriminator 1
 2516 0049 4885C0   		testq	%rax, %rax
 2517 004c 7407     		je	.L199
 2518              		.loc 2 568 8 is_stmt 0 discriminator 3
 2519 004e B8010000 		movl	$1, %eax
 2519      00
 2520 0053 EB05     		jmp	.L200
 2521              	.L199:
 2522              		.loc 2 568 8 discriminator 4
 2523 0055 B8000000 		movl	$0, %eax
 2523      00
 2524              	.L200:
 2525              		.loc 2 568 8 discriminator 6
 2526 005a 85C0     		testl	%eax, %eax
 2527 005c 7417     		je	.L201
 2528              		.loc 2 568 9 is_stmt 1 discriminator 7
 2529 005e 48837DD8 		cmpq	$0, -40(%rbp)
 2529      00
 2530 0063 0F95C0   		setne	%al
 2531 0066 0FB6C0   		movzbl	%al, %eax
 2532              		.loc 2 568 8 discriminator 7
 2533 0069 4885C0   		testq	%rax, %rax
 2534 006c 7407     		je	.L201
 2535              		.loc 2 568 8 is_stmt 0 discriminator 9
 2536 006e B8010000 		movl	$1, %eax
 2536      00
 2537 0073 EB05     		jmp	.L202
 2538              	.L201:
 2539              		.loc 2 568 8 discriminator 10
 2540 0075 B8000000 		movl	$0, %eax
 2540      00
 2541              	.L202:
 2542              		.loc 2 568 8 discriminator 12
 2543 007a 85C0     		testl	%eax, %eax
 2544 007c 7417     		je	.L203
 2545              		.loc 2 568 9 is_stmt 1 discriminator 13
 2546 007e 48837DD0 		cmpq	$0, -48(%rbp)
 2546      00
 2547 0083 0F95C0   		setne	%al
 2548 0086 0FB6C0   		movzbl	%al, %eax
 2549              		.loc 2 568 8 discriminator 13
 2550 0089 4885C0   		testq	%rax, %rax
 2551 008c 7407     		je	.L203
 2552              		.loc 2 568 8 is_stmt 0 discriminator 15
 2553 008e B8010000 		movl	$1, %eax
 2553      00
 2554 0093 EB05     		jmp	.L204
 2555              	.L203:
GAS LISTING /tmp/ccPqxGpM.s 			page 70


 2556              		.loc 2 568 8 discriminator 16
 2557 0095 B8000000 		movl	$0, %eax
 2557      00
 2558              	.L204:
 2559              		.loc 2 568 8 discriminator 18
 2560 009a 85C0     		testl	%eax, %eax
 2561 009c 0F84A800 		je	.L205
 2561      0000
 2562              		.loc 2 568 9 is_stmt 1 discriminator 19
 2563 00a2 488B45E8 		movq	-24(%rbp), %rax
 2564 00a6 483B45D8 		cmpq	-40(%rbp), %rax
 2565 00aa 0F97C0   		seta	%al
 2566 00ad 0FB6C0   		movzbl	%al, %eax
 2567              		.loc 2 568 8 discriminator 19
 2568 00b0 4885C0   		testq	%rax, %rax
 2569 00b3 7421     		je	.L206
 2570              		.loc 2 568 9 discriminator 20
 2571 00b5 488B55D8 		movq	-40(%rbp), %rdx
 2572 00b9 488B45D0 		movq	-48(%rbp), %rax
 2573 00bd 4801D0   		addq	%rdx, %rax
 2574 00c0 483945E8 		cmpq	%rax, -24(%rbp)
 2575 00c4 0F93C0   		setnb	%al
 2576 00c7 0FB6C0   		movzbl	%al, %eax
 2577              		.loc 2 568 8 discriminator 20
 2578 00ca 4885C0   		testq	%rax, %rax
 2579 00cd 7407     		je	.L206
 2580              		.loc 2 568 8 is_stmt 0 discriminator 22
 2581 00cf B8010000 		movl	$1, %eax
 2581      00
 2582 00d4 EB05     		jmp	.L207
 2583              	.L206:
 2584              		.loc 2 568 8 discriminator 23
 2585 00d6 B8000000 		movl	$0, %eax
 2585      00
 2586              	.L207:
 2587              		.loc 2 568 8 discriminator 25
 2588 00db 85C0     		testl	%eax, %eax
 2589 00dd 753D     		jne	.L208
 2590              		.loc 2 568 9 is_stmt 1 discriminator 27
 2591 00df 488B45D8 		movq	-40(%rbp), %rax
 2592 00e3 483B45E8 		cmpq	-24(%rbp), %rax
 2593 00e7 0F97C0   		seta	%al
 2594 00ea 0FB6C0   		movzbl	%al, %eax
 2595              		.loc 2 568 8 discriminator 27
 2596 00ed 4885C0   		testq	%rax, %rax
 2597 00f0 7421     		je	.L209
 2598              		.loc 2 568 9 discriminator 28
 2599 00f2 488B55E8 		movq	-24(%rbp), %rdx
 2600 00f6 488B45D0 		movq	-48(%rbp), %rax
 2601 00fa 4801D0   		addq	%rdx, %rax
 2602 00fd 483945D8 		cmpq	%rax, -40(%rbp)
 2603 0101 0F93C0   		setnb	%al
 2604 0104 0FB6C0   		movzbl	%al, %eax
 2605              		.loc 2 568 8 discriminator 28
 2606 0107 4885C0   		testq	%rax, %rax
 2607 010a 7407     		je	.L209
 2608              		.loc 2 568 8 is_stmt 0 discriminator 30
GAS LISTING /tmp/ccPqxGpM.s 			page 71


 2609 010c B8010000 		movl	$1, %eax
 2609      00
 2610 0111 EB05     		jmp	.L210
 2611              	.L209:
 2612              		.loc 2 568 8 discriminator 31
 2613 0113 B8000000 		movl	$0, %eax
 2613      00
 2614              	.L210:
 2615              		.loc 2 568 8 discriminator 33
 2616 0118 85C0     		testl	%eax, %eax
 2617 011a 7407     		je	.L211
 2618              	.L208:
 2619              		.loc 2 568 8 discriminator 34
 2620 011c B8010000 		movl	$1, %eax
 2620      00
 2621 0121 EB05     		jmp	.L212
 2622              	.L211:
 2623              		.loc 2 568 8 discriminator 35
 2624 0123 B8000000 		movl	$0, %eax
 2624      00
 2625              	.L212:
 2626              		.loc 2 568 8 discriminator 37
 2627 0128 85C0     		testl	%eax, %eax
 2628 012a 741E     		je	.L205
 569:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                        count > 0 && \
 570:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                        ((dest > src && (const void *)((const unsigned char *)src + count) <= dest) 
 571:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****                        (src > dest && (void *)((unsigned char *)dest + count) <= src)))) {
 572:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         SecDoMemcpyOpt(dest, src, count);
 2629              		.loc 2 572 9 is_stmt 1
 2630 012c 488B55D0 		movq	-48(%rbp), %rdx
 2631 0130 488B4DD8 		movq	-40(%rbp), %rcx
 2632 0134 488B45E8 		movq	-24(%rbp), %rax
 2633 0138 4889CE   		movq	%rcx, %rsi
 2634 013b 4889C7   		movq	%rax, %rdi
 2635 013e E8000000 		call	SecDoMemcpyOpt
 2635      00
 573:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****         return EOK;
 2636              		.loc 2 573 16
 2637 0143 B8000000 		movl	$0, %eax
 2637      00
 2638 0148 EB18     		jmp	.L213
 2639              	.L205:
 574:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     }
 575:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     /* meet some runtime violation, return error code */
 576:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c ****     return SecMemcpyError(dest, destMax, src, count);
 2640              		.loc 2 576 12
 2641 014a 488B4DD0 		movq	-48(%rbp), %rcx
 2642 014e 488B55D8 		movq	-40(%rbp), %rdx
 2643 0152 488B75E0 		movq	-32(%rbp), %rsi
 2644 0156 488B45E8 		movq	-24(%rbp), %rax
 2645 015a 4889C7   		movq	%rax, %rdi
 2646 015d E8000000 		call	SecMemcpyError
 2646      00
 2647              	.L213:
 577:/home/xingli/share/1205tiny/secure_c/src/memcpy_s.c **** }
 2648              		.loc 2 577 1
 2649 0162 488B7DF8 		movq	-8(%rbp), %rdi
GAS LISTING /tmp/ccPqxGpM.s 			page 72


 2650 0166 6448333C 		xorq	%fs:40, %rdi
 2650      25280000 
 2650      00
 2651 016f 7405     		je	.L214
 2652 0171 E8000000 		call	__stack_chk_fail@PLT
 2652      00
 2653              	.L214:
 2654 0176 C9       		leave
 2655              	.LCFI20:
 2656              		.cfi_def_cfa 7, 8
 2657 0177 C3       		ret
 2658              		.cfi_endproc
 2659              	.LFE12:
 2661              		.text
 2662              	.Letext0:
 2663              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 2664              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2665              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 2666              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 2667              		.file 7 "/usr/include/stdio.h"
 2668              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 2669              		.file 9 "/home/xingli/share/1205tiny/secure_c/include/securec.h"
 6283              		.section	.note.gnu.property,"a"
 6284              		.align 8
 6285 0000 04000000 		.long	 1f - 0f
 6286 0004 10000000 		.long	 4f - 1f
 6287 0008 05000000 		.long	 5
 6288              	0:
 6289 000c 474E5500 		.string	 "GNU"
 6290              	1:
 6291              		.align 8
 6292 0010 020000C0 		.long	 0xc0000002
 6293 0014 04000000 		.long	 3f - 2f
 6294              	2:
 6295 0018 03000000 		.long	 0x3
 6296              	3:
 6297 001c 00000000 		.align 8
 6298              	4:
GAS LISTING /tmp/ccPqxGpM.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memcpy_s.c
     /tmp/ccPqxGpM.s:6      .text.SecDoMemcpy:0000000000000000 SecDoMemcpy
     /tmp/ccPqxGpM.s:50     .text.SecIsAddrAligned8:0000000000000000 SecIsAddrAligned8
     /tmp/ccPqxGpM.s:90     .text.SecMemcpyError:0000000000000000 SecMemcpyError
     /tmp/ccPqxGpM.s:221    .text.SecDoMemcpyOpt:0000000000000000 SecDoMemcpyOpt
     /tmp/ccPqxGpM.s:2082   .text.memcpy_s:0000000000000000 memcpy_s
     /tmp/ccPqxGpM.s:2282   .text.memcpy_sOptAsm:0000000000000000 memcpy_sOptAsm
     /tmp/ccPqxGpM.s:2482   .text.memcpy_sOptTc:0000000000000000 memcpy_sOptTc

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memcpy
__stack_chk_fail
memset
