GAS LISTING /tmp/ccPPTXZA.s 			page 1


   1              		.file	"secureprintoutput_a.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.SecDoMemcpy,"ax",@progbits
   6              	SecDoMemcpy:
   7              	.LFB6:
   8              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/securecutil.h"
   1:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  16:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  17:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  18:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #include "securec.h"
  19:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  20:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_MSC_VER)) && (_MSC_VER >= 1400)
  21:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING __pragma(warning(push)) \
  22:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     __pragma(warning(disable:4996 4127))
  23:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING  __pragma(warning(pop))
  24:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  25:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING
  26:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING
  27:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  28:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_WHILE_ZERO SECUREC_MASK_MSVC_CRT_WARNING while (0) SECUREC_END_MASK_MSVC_CRT_WARNIN
  29:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  30:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_STRNLEN
  31:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 700) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURC
  32:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  33:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  34:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  35:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__GLIBC__) && __GLIBC__ >= 2 && defined(__GLIBC_MINOR__) && __GLIBC_MINOR__ >= 10
  36:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 1
  37:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  38:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  39:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  40:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  41:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  42:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  43:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  44:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  45:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  46:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  47:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* in kernel disbale functions */
  48:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  49:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 0
  50:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
GAS LISTING /tmp/ccPPTXZA.s 			page 2


  51:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  52:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 0
  53:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  54:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  55:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 0
  56:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  57:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  58:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 0
  59:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  60:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  61:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 0
  62:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  63:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  64:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 0
  65:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  66:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no in kernel */
  67:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support file, can define this macro to 0. */
  68:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  69:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 1
  70:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  71:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  72:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 1
  73:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  74:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support float, can define this macro to 0. */
  75:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  76:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 1
  77:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  78:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  79:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 1
  80:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  81:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  82:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 1
  83:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  84:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  85:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 1
  86:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  87:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  88:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  89:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  90:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_INT_MAX                     2147483647
  91:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_SIXTEEN(x)              ((x) << 4)
  92:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_EIGHT(x)                ((x) << 3)
  93:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN(x)                  ((((x) << 2) + (x)) << 1)
  94:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Limited format input and output width */
  95:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN_DIV_TEN       21474836
  96:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN               SECUREC_MUL_TEN(SECUREC_MAX_WIDTH_LEN_DIV_TEN)
  97:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Is the x multiplied by 10 greater than */
  98:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN_ADD_BEYOND_MAX(x)   (((x) > SECUREC_MAX_WIDTH_LEN_DIV_TEN))
  99:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 100:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE               (309 + 40)  /* Max length of double value */
 101:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE_LB            (4932 + 40) /* Max length of long double value */
 102:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_DEFAULT_PRECISION     6
 103:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 104:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* This macro does not handle pointer equality or integer overflow */
 105:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_NO_OVERLAP(dest, src, count) \
 106:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) <= (char *)(dest)) || \
 107:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) <= (const char *)(src)))
GAS LISTING /tmp/ccPPTXZA.s 			page 3


 108:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 109:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_IS_OVERLAP(dest, src, count) \
 110:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) > (char *)(dest)) || \
 111:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) > (const char *)(src)))
 112:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 113:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 114:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap, len is the length of the string not include terminator
 115:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 116:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 117:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_NO_OVERLAP(dest, src, len) \
 118:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) < (dest)) || \
 119:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) < (src)))
 120:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 121:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 122:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcpy wcscpy function, dest len and src Len are not inclu
 123:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 124:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 125:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_IS_OVERLAP(dest, src, len) \
 126:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) >= (dest)) || \
 127:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) >= (src)))
 128:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 129:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 130:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcat wcscat function, dest len and src Len are not inclu
 131:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 132:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 133:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CAT_STRING_IS_OVERLAP(dest, destLen, src, srcLen) \
 134:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((dest) < (src) && ((dest) + (destLen) + (srcLen)) >= (src)) || \
 135:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((src) < (dest) && ((src) + (srcLen)) >= (dest)))
 136:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 137:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 138:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_HAVE_STRNLEN
 139:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 140:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = strnlen((str), (maxLen)); \
 141:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 142:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT(str, maxLen, outLen) do { \
 143:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     if ((maxLen) > 8) { \
 144:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         /* Optimization or len less then 8 */ \
 145:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         if (*((str) + 0) == '\0') { \
 146:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 0; \
 147:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 1) == '\0') { \
 148:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 1; \
 149:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 2) == '\0') { \
 150:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 2; \
 151:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 3) == '\0') { \
 152:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 3; \
 153:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 4) == '\0') { \
 154:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 4; \
 155:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 5) == '\0') { \
 156:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 5; \
 157:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 6) == '\0') { \
 158:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 6; \
 159:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 7) == '\0') { \
 160:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 7; \
 161:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 8) == '\0') { \
 162:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* Optimization with a length of 8 */ \
 163:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8; \
 164:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else { \
GAS LISTING /tmp/ccPPTXZA.s 			page 4


 165:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* The offset is 8 because the performance of 8 byte alignment is high */ \
 166:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8 + strnlen((str) + 8, (maxLen) - 8); \
 167:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } \
 168:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } else { \
 169:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         SECUREC_CALC_STR_LEN((str), (maxLen), (outLen)); \
 170:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 171:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 172:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 173:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 174:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const char *strEnd = (const char *)(str); \
 175:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     size_t availableSize = (size_t)(maxLen); \
 176:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (availableSize > 0 && *strEnd != '\0') { \
 177:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         --availableSize; \
 178:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 179:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 180:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = (size_t)(strEnd - (str)); \
 181:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 182:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT SECUREC_CALC_STR_LEN
 183:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 184:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 185:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_WSTR_LEN(str, maxLen, outLen) do { \
 186:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const wchar_t *strEnd = (const wchar_t *)(str); \
 187:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = 0; \
 188:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (*(outLen) < (maxLen) && *strEnd != L'\0') { \
 189:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         *(outLen) = *(outLen) + 1; \
 190:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 191:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 192:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 193:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 194:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 195:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FORMAT_OUTPUT_INPUT
 196:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT) || defined(__ARMCC_VERSION)
 197:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef __int64 SecInt64;
 198:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int64 SecUnsignedInt64;
 199:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__ARMCC_VERSION)
 200:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 201:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 202:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int32 SecUnsignedInt32;
 203:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 204:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 205:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 206:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef long long SecInt64;
 207:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned long long SecUnsignedInt64;
 208:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 209:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 210:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FOR_WCHAR
 211:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_VXWORKS_PLATFORM) && !defined(__WINT_TYPE__)
 212:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t wint_t;
 213:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 214:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecChar;
 215:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecUnsignedChar;
 216:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecInt;
 217:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecUnsignedInt;
 218:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /*  no SECUREC_FOR_WCHAR */
 219:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef char SecChar;
 220:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned char SecUnsignedChar;
 221:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef int SecInt;
GAS LISTING /tmp/ccPPTXZA.s 			page 5


 222:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt;
 223:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 224:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 225:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 226:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Determine whether the address is 8-byte aligned
 227:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Some systems do not have uintptr_t type, so  use NULL to clear tool alarm 507
 228:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 229:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ADDR_ALIGNED_8(addr) (SecIsAddrAligned8((addr), NULL) == 0)
 230:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 231:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* If you define the memory allocation function,
 232:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * you need to define the function prototype. You can define this macro as a header file.
 233:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 234:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_MALLOC_PROTOTYPE)
 235:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** SECUREC_MALLOC_PROTOTYPE
 236:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 237:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 238:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_MALLOC
 239:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MALLOC(x) malloc((size_t)(x))
 240:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 241:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 242:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_FREE
 243:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FREE(x)   free((void *)(x))
 244:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 245:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 246:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* struct for performance */
 247:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 248:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[1]; /* Performance optimization code structure assignment length 1 bytes */
 249:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf1;
 250:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 251:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[2]; /* Performance optimization code structure assignment length 2 bytes */
 252:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf2;
 253:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 254:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[3]; /* Performance optimization code structure assignment length 3 bytes */
 255:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf3;
 256:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 257:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[4]; /* Performance optimization code structure assignment length 4 bytes */
 258:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf4;
 259:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 260:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[5]; /* Performance optimization code structure assignment length 5 bytes */
 261:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf5;
 262:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 263:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[6]; /* Performance optimization code structure assignment length 6 bytes */
 264:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf6;
 265:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 266:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[7]; /* Performance optimization code structure assignment length 7 bytes */
 267:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf7;
 268:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 269:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[8]; /* Performance optimization code structure assignment length 8 bytes */
 270:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf8;
 271:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 272:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[9]; /* Performance optimization code structure assignment length 9 bytes */
 273:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf9;
 274:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 275:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[10]; /* Performance optimization code structure assignment length 10 bytes */
 276:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf10;
 277:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 278:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[11]; /* Performance optimization code structure assignment length 11 bytes */
GAS LISTING /tmp/ccPPTXZA.s 			page 6


 279:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf11;
 280:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 281:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[12]; /* Performance optimization code structure assignment length 12 bytes */
 282:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf12;
 283:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 284:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[13]; /* Performance optimization code structure assignment length 13 bytes */
 285:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf13;
 286:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 287:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[14]; /* Performance optimization code structure assignment length 14 bytes */
 288:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf14;
 289:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 290:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[15]; /* Performance optimization code structure assignment length 15 bytes */
 291:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf15;
 292:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 293:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[16]; /* Performance optimization code structure assignment length 16 bytes */
 294:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf16;
 295:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 296:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[17]; /* Performance optimization code structure assignment length 17 bytes */
 297:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf17;
 298:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 299:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[18]; /* Performance optimization code structure assignment length 18 bytes */
 300:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf18;
 301:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 302:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[19]; /* Performance optimization code structure assignment length 19 bytes */
 303:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf19;
 304:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 305:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[20]; /* Performance optimization code structure assignment length 20 bytes */
 306:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf20;
 307:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 308:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[21]; /* Performance optimization code structure assignment length 21 bytes */
 309:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf21;
 310:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 311:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[22]; /* Performance optimization code structure assignment length 22 bytes */
 312:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf22;
 313:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 314:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[23]; /* Performance optimization code structure assignment length 23 bytes */
 315:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf23;
 316:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 317:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[24]; /* Performance optimization code structure assignment length 24 bytes */
 318:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf24;
 319:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 320:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[25]; /* Performance optimization code structure assignment length 25 bytes */
 321:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf25;
 322:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 323:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[26]; /* Performance optimization code structure assignment length 26 bytes */
 324:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf26;
 325:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 326:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[27]; /* Performance optimization code structure assignment length 27 bytes */
 327:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf27;
 328:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 329:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[28]; /* Performance optimization code structure assignment length 28 bytes */
 330:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf28;
 331:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 332:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[29]; /* Performance optimization code structure assignment length 29 bytes */
 333:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf29;
 334:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 335:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[30]; /* Performance optimization code structure assignment length 30 bytes */
GAS LISTING /tmp/ccPPTXZA.s 			page 7


 336:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf30;
 337:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 338:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[31]; /* Performance optimization code structure assignment length 31 bytes */
 339:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf31;
 340:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 341:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[32]; /* Performance optimization code structure assignment length 32 bytes */
 342:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf32;
 343:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 344:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[33]; /* Performance optimization code structure assignment length 33 bytes */
 345:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf33;
 346:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 347:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[34]; /* Performance optimization code structure assignment length 34 bytes */
 348:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf34;
 349:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 350:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[35]; /* Performance optimization code structure assignment length 35 bytes */
 351:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf35;
 352:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 353:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[36]; /* Performance optimization code structure assignment length 36 bytes */
 354:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf36;
 355:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 356:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[37]; /* Performance optimization code structure assignment length 37 bytes */
 357:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf37;
 358:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 359:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[38]; /* Performance optimization code structure assignment length 38 bytes */
 360:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf38;
 361:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 362:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[39]; /* Performance optimization code structure assignment length 39 bytes */
 363:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf39;
 364:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 365:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[40]; /* Performance optimization code structure assignment length 40 bytes */
 366:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf40;
 367:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 368:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[41]; /* Performance optimization code structure assignment length 41 bytes */
 369:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf41;
 370:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 371:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[42]; /* Performance optimization code structure assignment length 42 bytes */
 372:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf42;
 373:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 374:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[43]; /* Performance optimization code structure assignment length 43 bytes */
 375:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf43;
 376:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 377:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[44]; /* Performance optimization code structure assignment length 44 bytes */
 378:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf44;
 379:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 380:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[45]; /* Performance optimization code structure assignment length 45 bytes */
 381:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf45;
 382:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 383:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[46]; /* Performance optimization code structure assignment length 46 bytes */
 384:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf46;
 385:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 386:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[47]; /* Performance optimization code structure assignment length 47 bytes */
 387:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf47;
 388:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 389:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[48]; /* Performance optimization code structure assignment length 48 bytes */
 390:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf48;
 391:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 392:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[49]; /* Performance optimization code structure assignment length 49 bytes */
GAS LISTING /tmp/ccPPTXZA.s 			page 8


 393:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf49;
 394:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 395:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[50]; /* Performance optimization code structure assignment length 50 bytes */
 396:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf50;
 397:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 398:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[51]; /* Performance optimization code structure assignment length 51 bytes */
 399:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf51;
 400:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 401:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[52]; /* Performance optimization code structure assignment length 52 bytes */
 402:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf52;
 403:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 404:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[53]; /* Performance optimization code structure assignment length 53 bytes */
 405:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf53;
 406:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 407:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[54]; /* Performance optimization code structure assignment length 54 bytes */
 408:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf54;
 409:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 410:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[55]; /* Performance optimization code structure assignment length 55 bytes */
 411:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf55;
 412:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 413:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[56]; /* Performance optimization code structure assignment length 56 bytes */
 414:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf56;
 415:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 416:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[57]; /* Performance optimization code structure assignment length 57 bytes */
 417:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf57;
 418:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 419:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[58]; /* Performance optimization code structure assignment length 58 bytes */
 420:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf58;
 421:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 422:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[59]; /* Performance optimization code structure assignment length 59 bytes */
 423:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf59;
 424:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 425:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[60]; /* Performance optimization code structure assignment length 60 bytes */
 426:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf60;
 427:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 428:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[61]; /* Performance optimization code structure assignment length 61 bytes */
 429:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf61;
 430:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 431:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[62]; /* Performance optimization code structure assignment length 62 bytes */
 432:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf62;
 433:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 434:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[63]; /* Performance optimization code structure assignment length 63 bytes */
 435:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf63;
 436:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 437:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[64]; /* Performance optimization code structure assignment length 64 bytes */
 438:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf64;
 439:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 440:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 441:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 442:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 443:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* User can change the error handler by modify the following definition,
 444:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * such as logging the detail error in file.
 445:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 446:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(_DEBUG) || defined(DEBUG)
 447:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_ASSERT)
 448:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) assert(msg "invalid argument" == NULL)
 449:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    assert(msg "invalid dest buffer size" == NULL)
GAS LISTING /tmp/ccPPTXZA.s 			page 9


 450:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   assert(msg "buffer overlap" == NULL)
 451:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_PRINTF)
 452:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
 453:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printk("%s invalid argument\n", msg)
 454:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printk("%s invalid dest buffer size\n", msg)
 455:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printk("%s buffer overlap\n", msg)
 456:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 457:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printf("%s invalid argument\n", msg)
 458:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printf("%s invalid dest buffer size\n", msg)
 459:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printf("%s buffer overlap\n", msg)
 460:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 461:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 462:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) LogSecureCRuntimeError(msg " EINVAL\n")
 463:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    LogSecureCRuntimeError(msg " ERANGE\n")
 464:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   LogSecureCRuntimeError(msg " EOVERLAP\n")
 465:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no HANDLER is defined */
 466:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 467:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 468:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 469:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 470:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no DEBUG */
 471:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 472:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 473:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 474:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 475:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 476:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef __cplusplus
 477:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** extern "C" {
 478:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 479:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 480:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* assembly language memory copy and memory set for X86 or MIPS ... */
 481:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 482:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memcpy_opt(void *, const void *, size_t);
 483:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memset_opt(void *, int, size_t);
 484:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 485:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 486:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 487:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void LogSecureCRuntimeError(const char *errDetail);
 488:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 489:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 490:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_INLINE_DO_MEMCPY
 491:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** static void SecDoMemcpy(void *dest, const void *src, size_t count)
 492:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** {
   9              		.loc 1 492 1
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              	.LCFI0:
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              	.LCFI1:
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DE8 		movq	%rdi, -24(%rbp)
  21 0010 488975E0 		movq	%rsi, -32(%rbp)
  22 0014 488955D8 		movq	%rdx, -40(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 10


  23              		.loc 1 492 1
  24 0018 64488B04 		movq	%fs:40, %rax
  24      25280000 
  24      00
  25 0021 488945F8 		movq	%rax, -8(%rbp)
  26 0025 31C0     		xorl	%eax, %eax
 493:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /*
 494:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      * if SECUREC_USE_ASM macro is enabled, it will call assembly language function to improve perf
 495:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      */
 496:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 497:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy_opt(dest, src, count);
 498:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 499:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /* large enough, let system API do it */
 500:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy(dest, src, count);
  27              		.loc 1 500 11
  28 0027 488B55D8 		movq	-40(%rbp), %rdx
  29 002b 488B4DE0 		movq	-32(%rbp), %rcx
  30 002f 488B45E8 		movq	-24(%rbp), %rax
  31 0033 4889CE   		movq	%rcx, %rsi
  32 0036 4889C7   		movq	%rax, %rdi
  33 0039 E8000000 		call	memcpy@PLT
  33      00
 501:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 502:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** }
  34              		.loc 1 502 1
  35 003e 90       		nop
  36 003f 488B45F8 		movq	-8(%rbp), %rax
  37 0043 64483304 		xorq	%fs:40, %rax
  37      25280000 
  37      00
  38 004c 7405     		je	.L2
  39 004e E8000000 		call	__stack_chk_fail@PLT
  39      00
  40              	.L2:
  41 0053 C9       		leave
  42              	.LCFI2:
  43              		.cfi_def_cfa 7, 8
  44 0054 C3       		ret
  45              		.cfi_endproc
  46              	.LFE6:
  48              		.section	.text.SecIndirectSprintf,"ax",@progbits
  50              	SecIndirectSprintf:
  51              	.LFB7:
  52              		.file 2 "/home/xingli/share/1205tiny/secure_c/src/output.inl"
   1:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * See the Mulan PSL v1 for more details.  
GAS LISTING /tmp/ccPPTXZA.s 			page 11


  14:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* [Standardize-exceptions] Use unsafe function: Portability
  16:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * [reason] Use unsafe function to implement security function to maintain platform compatibility.
  17:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *          And sufficient input validation is performed before calling
  18:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
  19:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  20:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifndef OUTPUT_INL_2B263E9C_43D8_44BB_B17A_6D2033DECEE5
  21:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define OUTPUT_INL_2B263E9C_43D8_44BB_B17A_6D2033DECEE5
  22:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  23:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_NULL_STRING_SIZE            8
  24:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_STATE_TABLE_SIZE              337
  25:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_BITS_WORD            16
  26:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_BITS_DWORD           32
  27:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  28:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_DIV_OCTAL            3
  29:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_DIV_HEX              4
  30:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_RADIX_OCTAL                 8
  31:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_RADIX_DECIMAL               10
  32:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_RADIX_HEX                   16
  33:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* Use two displacements to eliminate compilation warnings */
  34:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SHR_DWORD(x)                (((x) >> 16) >> 16)
  35:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_PREFIX_LEN                  2
  36:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* size include '+' and '\0' */
  37:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FLOAT_BUF_EXT               2
  38:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  39:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  40:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_STACK_SIZE_LESS_THAN_1K
  41:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_STR_LEN                 8
  42:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
  43:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_STR_LEN                 16
  44:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
  45:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  46:/home/xingli/share/1205tiny/secure_c/src/output.inl **** typedef struct {
  47:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     unsigned int flags;
  48:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int fldWidth;
  49:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int precision;
  50:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int bufferIsWide;           /* flag for buffer contains wide chars ;0 is not wide char */
  51:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int dynWidth;               /* %*   1 width from variable parameter ;0 not */
  52:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int dynPrecision;           /* %.*  1 precision from variable parameter ;0 not */
  53:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SecFormatAttr;
  54:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  55:/home/xingli/share/1205tiny/secure_c/src/output.inl **** typedef union {
  56:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     char *str;                  /* not a null terminated  string */
  57:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
  58:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     wchar_t *wStr;
  59:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
  60:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SecFormatBuf;
  61:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  62:/home/xingli/share/1205tiny/secure_c/src/output.inl **** typedef union {
  63:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     char str[SECUREC_BUFFER_SIZE + 1];
  64:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
  65:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     wchar_t wStr[SECUREC_BUFFER_SIZE + 1];
  66:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
  67:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SecBuffer;
  68:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  69:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
  70:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* call system sprintf to format float value */
GAS LISTING /tmp/ccPPTXZA.s 			page 12


  71:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecIndirectSprintf(char *strDest, const char *format, ...)
  72:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
  53              		.loc 2 72 1
  54              		.cfi_startproc
  55 0000 F30F1EFA 		endbr64
  56 0004 55       		pushq	%rbp
  57              	.LCFI3:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 6, -16
  60 0005 4889E5   		movq	%rsp, %rbp
  61              	.LCFI4:
  62              		.cfi_def_cfa_register 6
  63 0008 4881ECF0 		subq	$240, %rsp
  63      000000
  64 000f 4889BD18 		movq	%rdi, -232(%rbp)
  64      FFFFFF
  65 0016 4889B510 		movq	%rsi, -240(%rbp)
  65      FFFFFF
  66 001d 48899560 		movq	%rdx, -160(%rbp)
  66      FFFFFF
  67 0024 48898D68 		movq	%rcx, -152(%rbp)
  67      FFFFFF
  68 002b 4C898570 		movq	%r8, -144(%rbp)
  68      FFFFFF
  69 0032 4C898D78 		movq	%r9, -136(%rbp)
  69      FFFFFF
  70 0039 84C0     		testb	%al, %al
  71 003b 7420     		je	.L4
  72 003d 0F294580 		movaps	%xmm0, -128(%rbp)
  73 0041 0F294D90 		movaps	%xmm1, -112(%rbp)
  74 0045 0F2955A0 		movaps	%xmm2, -96(%rbp)
  75 0049 0F295DB0 		movaps	%xmm3, -80(%rbp)
  76 004d 0F2965C0 		movaps	%xmm4, -64(%rbp)
  77 0051 0F296DD0 		movaps	%xmm5, -48(%rbp)
  78 0055 0F2975E0 		movaps	%xmm6, -32(%rbp)
  79 0059 0F297DF0 		movaps	%xmm7, -16(%rbp)
  80              	.L4:
  81              		.loc 2 72 1
  82 005d 64488B04 		movq	%fs:40, %rax
  82      25280000 
  82      00
  83 0066 48898548 		movq	%rax, -184(%rbp)
  83      FFFFFF
  84 006d 31C0     		xorl	%eax, %eax
  73:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int ret;                    /* If initialization causes  e838 */
  74:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     va_list argList;
  75:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  76:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     va_start(argList, format);
  85              		.loc 2 76 5
  86 006f C78530FF 		movl	$16, -208(%rbp)
  86      FFFF1000 
  86      0000
  87 0079 C78534FF 		movl	$48, -204(%rbp)
  87      FFFF3000 
  87      0000
  88 0083 488D4510 		leaq	16(%rbp), %rax
  89 0087 48898538 		movq	%rax, -200(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 13


  89      FFFFFF
  90 008e 488D8550 		leaq	-176(%rbp), %rax
  90      FFFFFF
  91 0095 48898540 		movq	%rax, -192(%rbp)
  91      FFFFFF
  77:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_MASK_MSVC_CRT_WARNING
  78:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ret = vsprintf(strDest, format, argList);
  92              		.loc 2 78 11
  93 009c 488D9530 		leaq	-208(%rbp), %rdx
  93      FFFFFF
  94 00a3 488B8D10 		movq	-240(%rbp), %rcx
  94      FFFFFF
  95 00aa 488B8518 		movq	-232(%rbp), %rax
  95      FFFFFF
  96 00b1 4889CE   		movq	%rcx, %rsi
  97 00b4 4889C7   		movq	%rax, %rdi
  98 00b7 E8000000 		call	vsprintf@PLT
  98      00
  99 00bc 89852CFF 		movl	%eax, -212(%rbp)
  99      FFFF
  79:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_END_MASK_MSVC_CRT_WARNING
  80:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     va_end(argList);
  81:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (void)argList; /* to clear e438 last value assigned not used , the compiler will optimize this 
  82:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  83:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return ret;
 100              		.loc 2 83 12
 101 00c2 8B852CFF 		movl	-212(%rbp), %eax
 101      FFFF
  84:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 102              		.loc 2 84 1
 103 00c8 488BB548 		movq	-184(%rbp), %rsi
 103      FFFFFF
 104 00cf 64483334 		xorq	%fs:40, %rsi
 104      25280000 
 104      00
 105 00d8 7405     		je	.L6
 106 00da E8000000 		call	__stack_chk_fail@PLT
 106      00
 107              	.L6:
 108 00df C9       		leave
 109              	.LCFI5:
 110              		.cfi_def_cfa 7, 8
 111 00e0 C3       		ret
 112              		.cfi_endproc
 113              	.LFE7:
 115              		.section	.text.SecFormatLongDboule,"ax",@progbits
 117              	SecFormatLongDboule:
 118              	.LFB8:
  85:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  86:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
  87:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* out put long double value to dest */
  88:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecFormatLongDboule(char *strDest,const SecFormatAttr *formatAttr, const char *fmt, long
  89:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 119              		.loc 2 89 1
 120              		.cfi_startproc
 121 0000 F30F1EFA 		endbr64
 122 0004 55       		pushq	%rbp
GAS LISTING /tmp/ccPPTXZA.s 			page 14


 123              	.LCFI6:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 6, -16
 126 0005 4889E5   		movq	%rsp, %rbp
 127              	.LCFI7:
 128              		.cfi_def_cfa_register 6
 129 0008 4883EC40 		subq	$64, %rsp
 130 000c 48897DE8 		movq	%rdi, -24(%rbp)
 131 0010 488975E0 		movq	%rsi, -32(%rbp)
 132 0014 488955D8 		movq	%rdx, -40(%rbp)
 133 0018 488B4510 		movq	16(%rbp), %rax
 134 001c 488B5518 		movq	24(%rbp), %rdx
 135 0020 488945C0 		movq	%rax, -64(%rbp)
 136 0024 488955C8 		movq	%rdx, -56(%rbp)
 137              		.loc 2 89 1
 138 0028 64488B04 		movq	%fs:40, %rax
 138      25280000 
 138      00
 139 0031 488945F8 		movq	%rax, -8(%rbp)
 140 0035 31C0     		xorl	%eax, %eax
  90:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int fldWidth = ((formatAttr->flags & SECUREC_FLAG_LEFT) ? (-(formatAttr->fldWidth)) : formatAtt
 141              		.loc 2 90 32
 142 0037 488B45E0 		movq	-32(%rbp), %rax
 143 003b 8B00     		movl	(%rax), %eax
 144              		.loc 2 90 40
 145 003d 83E004   		andl	$4, %eax
 146              		.loc 2 90 89
 147 0040 85C0     		testl	%eax, %eax
 148 0042 740B     		je	.L8
 149              		.loc 2 90 76 discriminator 1
 150 0044 488B45E0 		movq	-32(%rbp), %rax
 151 0048 8B4004   		movl	4(%rax), %eax
 152              		.loc 2 90 89 discriminator 1
 153 004b F7D8     		negl	%eax
 154 004d EB07     		jmp	.L9
 155              	.L8:
 156              		.loc 2 90 89 is_stmt 0 discriminator 2
 157 004f 488B45E0 		movq	-32(%rbp), %rax
 158 0053 8B4004   		movl	4(%rax), %eax
 159              	.L9:
 160              		.loc 2 90 9 is_stmt 1 discriminator 4
 161 0056 8945F4   		movl	%eax, -12(%rbp)
  91:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynWidth && formatAttr->dynPrecision) {
 162              		.loc 2 91 19 discriminator 4
 163 0059 488B45E0 		movq	-32(%rbp), %rax
 164 005d 8B4010   		movl	16(%rax), %eax
 165              		.loc 2 91 8 discriminator 4
 166 0060 85C0     		testl	%eax, %eax
 167 0062 7439     		je	.L10
 168              		.loc 2 91 43 discriminator 1
 169 0064 488B45E0 		movq	-32(%rbp), %rax
 170 0068 8B4014   		movl	20(%rax), %eax
 171              		.loc 2 91 30 discriminator 1
 172 006b 85C0     		testl	%eax, %eax
 173 006d 742E     		je	.L10
  92:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, formatAttr->precision, ldValue);
 174              		.loc 2 92 16
GAS LISTING /tmp/ccPPTXZA.s 			page 15


 175 006f 488B45E0 		movq	-32(%rbp), %rax
 176 0073 8B4808   		movl	8(%rax), %ecx
 177 0076 8B55F4   		movl	-12(%rbp), %edx
 178 0079 488B75D8 		movq	-40(%rbp), %rsi
 179 007d 488B45E8 		movq	-24(%rbp), %rax
 180 0081 FF75C8   		pushq	-56(%rbp)
 181 0084 FF75C0   		pushq	-64(%rbp)
 182 0087 4889C7   		movq	%rax, %rdi
 183 008a B8000000 		movl	$0, %eax
 183      00
 184 008f E8000000 		call	SecIndirectSprintf
 184      00
 185 0094 4883C410 		addq	$16, %rsp
 186 0098 E98A0000 		jmp	.L11
 186      00
 187              	.L10:
  93:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynWidth) {
 188              		.loc 2 93 26
 189 009d 488B45E0 		movq	-32(%rbp), %rax
 190 00a1 8B4010   		movl	16(%rax), %eax
 191              		.loc 2 93 15
 192 00a4 85C0     		testl	%eax, %eax
 193 00a6 7427     		je	.L12
  94:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, ldValue);
 194              		.loc 2 94 16
 195 00a8 8B55F4   		movl	-12(%rbp), %edx
 196 00ab 488B4DD8 		movq	-40(%rbp), %rcx
 197 00af 488B45E8 		movq	-24(%rbp), %rax
 198 00b3 FF75C8   		pushq	-56(%rbp)
 199 00b6 FF75C0   		pushq	-64(%rbp)
 200 00b9 4889CE   		movq	%rcx, %rsi
 201 00bc 4889C7   		movq	%rax, %rdi
 202 00bf B8000000 		movl	$0, %eax
 202      00
 203 00c4 E8000000 		call	SecIndirectSprintf
 203      00
 204 00c9 4883C410 		addq	$16, %rsp
 205 00cd EB58     		jmp	.L11
 206              	.L12:
  95:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynPrecision) {
 207              		.loc 2 95 26
 208 00cf 488B45E0 		movq	-32(%rbp), %rax
 209 00d3 8B4014   		movl	20(%rax), %eax
 210              		.loc 2 95 15
 211 00d6 85C0     		testl	%eax, %eax
 212 00d8 742B     		je	.L13
  96:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, formatAttr->precision, ldValue);
 213              		.loc 2 96 16
 214 00da 488B45E0 		movq	-32(%rbp), %rax
 215 00de 8B5008   		movl	8(%rax), %edx
 216 00e1 488B4DD8 		movq	-40(%rbp), %rcx
 217 00e5 488B45E8 		movq	-24(%rbp), %rax
 218 00e9 FF75C8   		pushq	-56(%rbp)
 219 00ec FF75C0   		pushq	-64(%rbp)
 220 00ef 4889CE   		movq	%rcx, %rsi
 221 00f2 4889C7   		movq	%rax, %rdi
 222 00f5 B8000000 		movl	$0, %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 16


 222      00
 223 00fa E8000000 		call	SecIndirectSprintf
 223      00
 224 00ff 4883C410 		addq	$16, %rsp
 225 0103 EB22     		jmp	.L11
 226              	.L13:
  97:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
  98:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return SecIndirectSprintf(strDest, fmt, ldValue);
 227              		.loc 2 98 12
 228 0105 488B55D8 		movq	-40(%rbp), %rdx
 229 0109 488B45E8 		movq	-24(%rbp), %rax
 230 010d FF75C8   		pushq	-56(%rbp)
 231 0110 FF75C0   		pushq	-64(%rbp)
 232 0113 4889D6   		movq	%rdx, %rsi
 233 0116 4889C7   		movq	%rax, %rdi
 234 0119 B8000000 		movl	$0, %eax
 234      00
 235 011e E8000000 		call	SecIndirectSprintf
 235      00
 236 0123 4883C410 		addq	$16, %rsp
 237              	.L11:
  99:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 238              		.loc 2 99 1
 239 0127 488B7DF8 		movq	-8(%rbp), %rdi
 240 012b 6448333C 		xorq	%fs:40, %rdi
 240      25280000 
 240      00
 241 0134 7405     		je	.L14
 242 0136 E8000000 		call	__stack_chk_fail@PLT
 242      00
 243              	.L14:
 244 013b C9       		leave
 245              	.LCFI8:
 246              		.cfi_def_cfa 7, 8
 247 013c C3       		ret
 248              		.cfi_endproc
 249              	.LFE8:
 251              		.section	.text.SecFormatDboule,"ax",@progbits
 253              	SecFormatDboule:
 254              	.LFB9:
 100:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 101:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 102:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* out put double value to dest */
 103:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecFormatDboule(char *strDest, const SecFormatAttr *formatAttr, const char *fmt, double 
 104:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 255              		.loc 2 104 1
 256              		.cfi_startproc
 257 0000 F30F1EFA 		endbr64
 258 0004 55       		pushq	%rbp
 259              	.LCFI9:
 260              		.cfi_def_cfa_offset 16
 261              		.cfi_offset 6, -16
 262 0005 4889E5   		movq	%rsp, %rbp
 263              	.LCFI10:
 264              		.cfi_def_cfa_register 6
 265 0008 4883EC30 		subq	$48, %rsp
 266 000c 48897DE8 		movq	%rdi, -24(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 17


 267 0010 488975E0 		movq	%rsi, -32(%rbp)
 268 0014 488955D8 		movq	%rdx, -40(%rbp)
 269 0018 F20F1145 		movsd	%xmm0, -48(%rbp)
 269      D0
 270              		.loc 2 104 1
 271 001d 64488B04 		movq	%fs:40, %rax
 271      25280000 
 271      00
 272 0026 488945F8 		movq	%rax, -8(%rbp)
 273 002a 31C0     		xorl	%eax, %eax
 105:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int fldWidth = ((formatAttr->flags & SECUREC_FLAG_LEFT) ? (-(formatAttr->fldWidth)) : formatAtt
 274              		.loc 2 105 32
 275 002c 488B45E0 		movq	-32(%rbp), %rax
 276 0030 8B00     		movl	(%rax), %eax
 277              		.loc 2 105 40
 278 0032 83E004   		andl	$4, %eax
 279              		.loc 2 105 89
 280 0035 85C0     		testl	%eax, %eax
 281 0037 740B     		je	.L16
 282              		.loc 2 105 76 discriminator 1
 283 0039 488B45E0 		movq	-32(%rbp), %rax
 284 003d 8B4004   		movl	4(%rax), %eax
 285              		.loc 2 105 89 discriminator 1
 286 0040 F7D8     		negl	%eax
 287 0042 EB07     		jmp	.L17
 288              	.L16:
 289              		.loc 2 105 89 is_stmt 0 discriminator 2
 290 0044 488B45E0 		movq	-32(%rbp), %rax
 291 0048 8B4004   		movl	4(%rax), %eax
 292              	.L17:
 293              		.loc 2 105 9 is_stmt 1 discriminator 4
 294 004b 8945F4   		movl	%eax, -12(%rbp)
 106:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynWidth && formatAttr->dynPrecision) {
 295              		.loc 2 106 19 discriminator 4
 296 004e 488B45E0 		movq	-32(%rbp), %rax
 297 0052 8B4010   		movl	16(%rax), %eax
 298              		.loc 2 106 8 discriminator 4
 299 0055 85C0     		testl	%eax, %eax
 300 0057 7438     		je	.L18
 301              		.loc 2 106 43 discriminator 1
 302 0059 488B45E0 		movq	-32(%rbp), %rax
 303 005d 8B4014   		movl	20(%rax), %eax
 304              		.loc 2 106 30 discriminator 1
 305 0060 85C0     		testl	%eax, %eax
 306 0062 742D     		je	.L18
 107:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, formatAttr->precision, dValue);
 307              		.loc 2 107 16
 308 0064 488B45E0 		movq	-32(%rbp), %rax
 309 0068 8B4808   		movl	8(%rax), %ecx
 310 006b 488B7DD0 		movq	-48(%rbp), %rdi
 311 006f 8B55F4   		movl	-12(%rbp), %edx
 312 0072 488B75D8 		movq	-40(%rbp), %rsi
 313 0076 488B45E8 		movq	-24(%rbp), %rax
 314 007a 66480F6E 		movq	%rdi, %xmm0
 314      C7
 315 007f 4889C7   		movq	%rax, %rdi
 316 0082 B8010000 		movl	$1, %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 18


 316      00
 317 0087 E8000000 		call	SecIndirectSprintf
 317      00
 318 008c E9870000 		jmp	.L19
 318      00
 319              	.L18:
 108:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynWidth) {
 320              		.loc 2 108 26
 321 0091 488B45E0 		movq	-32(%rbp), %rax
 322 0095 8B4010   		movl	16(%rax), %eax
 323              		.loc 2 108 15
 324 0098 85C0     		testl	%eax, %eax
 325 009a 7426     		je	.L20
 109:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, dValue);
 326              		.loc 2 109 16
 327 009c 488B75D0 		movq	-48(%rbp), %rsi
 328 00a0 8B55F4   		movl	-12(%rbp), %edx
 329 00a3 488B4DD8 		movq	-40(%rbp), %rcx
 330 00a7 488B45E8 		movq	-24(%rbp), %rax
 331 00ab 66480F6E 		movq	%rsi, %xmm0
 331      C6
 332 00b0 4889CE   		movq	%rcx, %rsi
 333 00b3 4889C7   		movq	%rax, %rdi
 334 00b6 B8010000 		movl	$1, %eax
 334      00
 335 00bb E8000000 		call	SecIndirectSprintf
 335      00
 336 00c0 EB56     		jmp	.L19
 337              	.L20:
 110:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynPrecision) {
 338              		.loc 2 110 26
 339 00c2 488B45E0 		movq	-32(%rbp), %rax
 340 00c6 8B4014   		movl	20(%rax), %eax
 341              		.loc 2 110 15
 342 00c9 85C0     		testl	%eax, %eax
 343 00cb 742A     		je	.L21
 111:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, formatAttr->precision, dValue);
 344              		.loc 2 111 16
 345 00cd 488B45E0 		movq	-32(%rbp), %rax
 346 00d1 8B5008   		movl	8(%rax), %edx
 347 00d4 488B75D0 		movq	-48(%rbp), %rsi
 348 00d8 488B4DD8 		movq	-40(%rbp), %rcx
 349 00dc 488B45E8 		movq	-24(%rbp), %rax
 350 00e0 66480F6E 		movq	%rsi, %xmm0
 350      C6
 351 00e5 4889CE   		movq	%rcx, %rsi
 352 00e8 4889C7   		movq	%rax, %rdi
 353 00eb B8010000 		movl	$1, %eax
 353      00
 354 00f0 E8000000 		call	SecIndirectSprintf
 354      00
 355 00f5 EB21     		jmp	.L19
 356              	.L21:
 112:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 113:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return SecIndirectSprintf(strDest, fmt, dValue);
 357              		.loc 2 113 12
 358 00f7 488B4DD0 		movq	-48(%rbp), %rcx
GAS LISTING /tmp/ccPPTXZA.s 			page 19


 359 00fb 488B55D8 		movq	-40(%rbp), %rdx
 360 00ff 488B45E8 		movq	-24(%rbp), %rax
 361 0103 66480F6E 		movq	%rcx, %xmm0
 361      C1
 362 0108 4889D6   		movq	%rdx, %rsi
 363 010b 4889C7   		movq	%rax, %rdi
 364 010e B8010000 		movl	$1, %eax
 364      00
 365 0113 E8000000 		call	SecIndirectSprintf
 365      00
 366              	.L19:
 114:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 367              		.loc 2 114 1
 368 0118 488B7DF8 		movq	-8(%rbp), %rdi
 369 011c 6448333C 		xorq	%fs:40, %rdi
 369      25280000 
 369      00
 370 0125 7405     		je	.L22
 371 0127 E8000000 		call	__stack_chk_fail@PLT
 371      00
 372              	.L22:
 373 012c C9       		leave
 374              	.LCFI11:
 375              		.cfi_def_cfa 7, 8
 376 012d C3       		ret
 377              		.cfi_endproc
 378              	.LFE9:
 380              		.section	.text.SecIsSameSize,"ax",@progbits
 382              	SecIsSameSize:
 383              	.LFB10:
 115:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 116:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 117:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 118:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* to clear e506 warning */
 119:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecIsSameSize(size_t sizeA, size_t sizeB)
 120:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 384              		.loc 2 120 1
 385              		.cfi_startproc
 386 0000 F30F1EFA 		endbr64
 387 0004 55       		pushq	%rbp
 388              	.LCFI12:
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 6, -16
 391 0005 4889E5   		movq	%rsp, %rbp
 392              	.LCFI13:
 393              		.cfi_def_cfa_register 6
 394 0008 4883EC20 		subq	$32, %rsp
 395 000c 48897DE8 		movq	%rdi, -24(%rbp)
 396 0010 488975E0 		movq	%rsi, -32(%rbp)
 397              		.loc 2 120 1
 398 0014 64488B04 		movq	%fs:40, %rax
 398      25280000 
 398      00
 399 001d 488945F8 		movq	%rax, -8(%rbp)
 400 0021 31C0     		xorl	%eax, %eax
 121:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return sizeA == sizeB;
 401              		.loc 2 121 18
GAS LISTING /tmp/ccPPTXZA.s 			page 20


 402 0023 488B45E8 		movq	-24(%rbp), %rax
 403 0027 483B45E0 		cmpq	-32(%rbp), %rax
 404 002b 0F94C0   		sete	%al
 405 002e 0FB6C0   		movzbl	%al, %eax
 122:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 406              		.loc 2 122 1
 407 0031 488B55F8 		movq	-8(%rbp), %rdx
 408 0035 64483314 		xorq	%fs:40, %rdx
 408      25280000 
 408      00
 409 003e 7405     		je	.L25
 410 0040 E8000000 		call	__stack_chk_fail@PLT
 410      00
 411              	.L25:
 412 0045 C9       		leave
 413              	.LCFI14:
 414              		.cfi_def_cfa 7, 8
 415 0046 C3       		ret
 416              		.cfi_endproc
 417              	.LFE10:
 419              		.section	.text.SecDecodeFlags,"ax",@progbits
 421              	SecDecodeFlags:
 422              	.LFB11:
 123:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 124:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 125:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_DWORD(val32, numBase) do { \
 126:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 127:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[(val32) % (numBase)]; \
 128:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while (((val32) /= (numBase)) != 0)
 129:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 130:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_USE_SPECIAL_DIV64) || (defined(SECUREC_VXWORKS_VERSION_5_4) && !defined(SECUREC
 131:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 132:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Fast divide by 10 algorithm.
 133:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Calculation divisor multiply  0xcccccccccccccccdULL, resultHi64 >> 3 as quotient
 134:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 135:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static void SecU64Div10(SecUnsignedInt64 divisor, SecUnsignedInt64 *quotient, SecUnsignedInt32 *rem
 136:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 137:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 mask = 0xffffffffULL; /* use 0xffffffffULL as 32 bit mask */
 138:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 magicHi = 0xccccccccULL; /* fast divide 10 magic numbers high 32bit 0xcccccccc
 139:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 magicLow = 0xcccccccdULL; /* fast divide 10 magic numbers low 32bit  0xccccccc
 140:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 divisorHi = (SecUnsignedInt64)(SECUREC_SHR_DWORD(divisor)); /* hig 32 bit use 
 141:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 divisorLow = (SecUnsignedInt64)(divisor & mask); /* low 32 bit mask */
 142:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorHi = divisorHi * magicHi;
 143:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorLow1 = divisorHi * magicLow;
 144:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorLow2 = divisorLow * magicHi;
 145:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorLow3 = divisorLow * magicLow;
 146:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 carry = (factorLow1 & mask) + (factorLow2 & mask) + SECUREC_SHR_DWORD(factorLo
 147:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 resultHi64 = factorHi + SECUREC_SHR_DWORD(factorLow1) + \
 148:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                    SECUREC_SHR_DWORD(factorLow2) + SECUREC_SHR_DWORD(carry);
 149:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 150:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *quotient = resultHi64 >> 3; /* fast divide 10 magic numbers 3 */
 151:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *remainder = (SecUnsignedInt32)(divisor - ((*quotient) * 10)); /* quotient mul 10 */
 152:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return;
 153:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 154:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_VXWORKS_VERSION_5_4) && !defined(SECUREC_ON_64BITS)
 155:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 156:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Divide function for VXWORKS
GAS LISTING /tmp/ccPPTXZA.s 			page 21


 157:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 158:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecU64Div32(SecUnsignedInt64 divisor, SecUnsignedInt32 radix,
 159:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 *quotient, SecUnsignedInt32 *remainder)
 160:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 161:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     switch (radix) {
 162:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_RADIX_DECIMAL:
 163:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             SecU64Div10(divisor, quotient, remainder);
 164:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 165:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_RADIX_HEX:
 166:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *quotient = divisor >> SECUREC_OFFSET_DIV_HEX;
 167:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *remainder = divisor & 0xfULL; /* mask one hex number by 0xfULL */
 168:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 169:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_RADIX_OCTAL:
 170:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *quotient = divisor >> SECUREC_OFFSET_DIV_OCTAL;
 171:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *remainder = divisor & 0x7ULL; /* mask one hex number by 0x7ULL */
 172:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 173:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         default:
 174:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 175:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 176:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 177:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 178:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 179:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 180:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 181:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_USE_SPECIAL_DIV64)
 182:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* The compiler does not provide 64 bit division problems */
 183:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_QWORD_BASE10(val64) do { \
 184:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 quotient = 0; \
 185:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt32 digit = 0; \
 186:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecU64Div10((val64), &(quotient), &(digit)); \
 187:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 188:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[digit]; \
 189:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (val64) = quotient; \
 190:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while ((val64) != 0)
 191:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 192:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_QWORD_BASE10(val64) do { \
 193:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 194:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[(val64) % SECUREC_RADIX_DECIMAL]; \
 195:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while (((val64) /= SECUREC_RADIX_DECIMAL) != 0)
 196:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 197:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_QWORD(val64, numBase) do { \
 198:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 199:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[(val64) % (numBase)]; \
 200:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while (((val64) /= (numBase)) != 0)
 201:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 202:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 203:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_WRITE_STR_OPT(src, txtLen, outStream, outChars) do { \
 204:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int ii_; \
 205:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     for (ii_ = 0; ii_ < (txtLen); ++ii_) { \
 206:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *((SecChar *)(void *)((outStream)->cur)) = *(SecChar *)(src); \
 207:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->cur += sizeof(SecChar); \
 208:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (src) = (src) + 1; \
 209:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } \
 210:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->count -= (txtLen) * (int)(sizeof(SecChar)); \
 211:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(outChars) = *(outChars) + (txtLen); \
 212:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 213:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
GAS LISTING /tmp/ccPPTXZA.s 			page 22


 214:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_WRITE_STR(src, txtLen, outStream, outChars) do { \
 215:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if ((txtLen) < 12) { /* performance optimization for mobile number length 12 */ \
 216:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_SAFE_WRITE_STR_OPT((src), (txtLen), (outStream), (outChars)); \
 217:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else { \
 218:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SecDoMemcpy((outStream)->cur, (src), ((size_t)(unsigned int)(txtLen) * (sizeof(SecChar))));
 219:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->cur += (size_t)((size_t)(unsigned int)(txtLen) * (sizeof(SecChar))); \
 220:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->count -= (txtLen) * (int)(sizeof(SecChar)); \
 221:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *(outChars) = *(outChars) + (txtLen); \
 222:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } \
 223:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 224:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 225:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_WRITE_CHAR(c, outStream, outChars) do { \
 226:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *((SecChar *)(void *)((outStream)->cur)) = (SecChar)(c); \
 227:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->cur += sizeof(SecChar); \
 228:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->count -= (int)(sizeof(SecChar)); \
 229:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(outChars) = *(outChars) + 1; \
 230:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 231:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 232:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_PADDING(padChar, padLen, outStream, outChars) do { \
 233:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int ii_; \
 234:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     for (ii_ = 0; ii_ < (padLen); ++ii_) { \
 235:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *((SecChar *)(void *)((outStream)->cur)) = (SecChar)(padChar); \
 236:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->cur += sizeof(SecChar); \
 237:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } \
 238:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->count -= (padLen) * (int)(sizeof(SecChar)); \
 239:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(outChars) = *(outChars) + (padLen); \
 240:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 241:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 242:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* The count variable can be reduced to 0, and the external function complements the \0 terminator.
 243:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_IS_REST_BUF_ENOUGH(stream, needLen) ((int)((stream)->count - \
 244:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (int)(needLen) * (int)(sizeof(SecChar))) >= 0)
 245:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 246:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_STATE_OFFSET  256
 247:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 248:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_TYPE(c, fmtTable)  ((((unsigned int)(int)(c)) <= (unsigned int)(int)SECUREC_CHA
 249:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ((fmtTable)[(unsigned char)(c)]) : 0)
 250:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_DECODE_STATE(c, fmtTable, lastState) (SecFmtState)((((fmtTable)[(SECUREC_FMT_TYPE(c
 251:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ((unsigned char)STAT_INVALID + 1) + \
 252:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (unsigned char)(lastState) + \
 253:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_FMT_STATE_OFFSET])))
 254:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 255:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_DECODE_STATE(c, fmtTable, lastState) (SecFmtState)(((fmtTable)[((fmtTable)[(unsigne
 256:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ((unsigned char)STAT_INVALID + 1) + \
 257:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (unsigned char)(lastState) + \
 258:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_FMT_STATE_OFFSET]))
 259:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 260:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 261:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static void SecDecodeFlags(SecChar ch, SecFormatAttr *attr)
 262:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 423              		.loc 2 262 1
 424              		.cfi_startproc
 425 0000 F30F1EFA 		endbr64
 426 0004 55       		pushq	%rbp
 427              	.LCFI15:
 428              		.cfi_def_cfa_offset 16
 429              		.cfi_offset 6, -16
 430 0005 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/ccPPTXZA.s 			page 23


 431              	.LCFI16:
 432              		.cfi_def_cfa_register 6
 433 0008 4883EC20 		subq	$32, %rsp
 434 000c 89F8     		movl	%edi, %eax
 435 000e 488975E0 		movq	%rsi, -32(%rbp)
 436 0012 8845EC   		movb	%al, -20(%rbp)
 437              		.loc 2 262 1
 438 0015 64488B04 		movq	%fs:40, %rax
 438      25280000 
 438      00
 439 001e 488945F8 		movq	%rax, -8(%rbp)
 440 0022 31C0     		xorl	%eax, %eax
 263:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     switch (ch) {
 441              		.loc 2 263 5
 442 0024 0FBE45EC 		movsbl	-20(%rbp), %eax
 443 0028 83E820   		subl	$32, %eax
 444 002b 83F810   		cmpl	$16, %eax
 445 002e 0F878100 		ja	.L37
 445      0000
 446 0034 89C0     		movl	%eax, %eax
 447 0036 488D1485 		leaq	0(,%rax,4), %rdx
 447      00000000 
 448 003e 488D0500 		leaq	.L29(%rip), %rax
 448      000000
 449 0045 8B0402   		movl	(%rdx,%rax), %eax
 450 0048 4898     		cltq
 451 004a 488D1500 		leaq	.L29(%rip), %rdx
 451      000000
 452 0051 4801D0   		addq	%rdx, %rax
 453 0054 3EFFE0   		notrack jmp	*%rax
 454              		.section	.rodata.SecDecodeFlags,"a",@progbits
 455              		.align 4
 456              		.align 4
 457              	.L29:
 458 0000 00000000 		.long	.L33-.L29
 459 0004 00000000 		.long	.L37-.L29
 460 0008 00000000 		.long	.L37-.L29
 461 000c 00000000 		.long	.L32-.L29
 462 0010 00000000 		.long	.L37-.L29
 463 0014 00000000 		.long	.L37-.L29
 464 0018 00000000 		.long	.L37-.L29
 465 001c 00000000 		.long	.L37-.L29
 466 0020 00000000 		.long	.L37-.L29
 467 0024 00000000 		.long	.L37-.L29
 468 0028 00000000 		.long	.L37-.L29
 469 002c 00000000 		.long	.L31-.L29
 470 0030 00000000 		.long	.L37-.L29
 471 0034 00000000 		.long	.L30-.L29
 472 0038 00000000 		.long	.L37-.L29
 473 003c 00000000 		.long	.L37-.L29
 474 0040 00000000 		.long	.L28-.L29
 475              		.section	.text.SecDecodeFlags
 476              	.L33:
 264:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR(' '):
 265:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_SIGN_SPACE;
 477              		.loc 2 265 25
 478 0057 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 24


 479 005b 8B00     		movl	(%rax), %eax
 480 005d 83C802   		orl	$2, %eax
 481 0060 89C2     		movl	%eax, %edx
 482 0062 488B45E0 		movq	-32(%rbp), %rax
 483 0066 8910     		movl	%edx, (%rax)
 266:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 484              		.loc 2 266 13
 485 0068 EB4C     		jmp	.L34
 486              	.L31:
 267:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('+'):
 268:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_SIGN;
 487              		.loc 2 268 25
 488 006a 488B45E0 		movq	-32(%rbp), %rax
 489 006e 8B00     		movl	(%rax), %eax
 490 0070 83C801   		orl	$1, %eax
 491 0073 89C2     		movl	%eax, %edx
 492 0075 488B45E0 		movq	-32(%rbp), %rax
 493 0079 8910     		movl	%edx, (%rax)
 269:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 494              		.loc 2 269 13
 495 007b EB39     		jmp	.L34
 496              	.L30:
 270:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('-'):
 271:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_LEFT;
 497              		.loc 2 271 25
 498 007d 488B45E0 		movq	-32(%rbp), %rax
 499 0081 8B00     		movl	(%rax), %eax
 500 0083 83C804   		orl	$4, %eax
 501 0086 89C2     		movl	%eax, %edx
 502 0088 488B45E0 		movq	-32(%rbp), %rax
 503 008c 8910     		movl	%edx, (%rax)
 272:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 504              		.loc 2 272 13
 505 008e EB26     		jmp	.L34
 506              	.L28:
 273:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('0'):
 274:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_LEADZERO;   /* add zero th the front */
 507              		.loc 2 274 25
 508 0090 488B45E0 		movq	-32(%rbp), %rax
 509 0094 8B00     		movl	(%rax), %eax
 510 0096 83C808   		orl	$8, %eax
 511 0099 89C2     		movl	%eax, %edx
 512 009b 488B45E0 		movq	-32(%rbp), %rax
 513 009f 8910     		movl	%edx, (%rax)
 275:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 514              		.loc 2 275 13
 515 00a1 EB13     		jmp	.L34
 516              	.L32:
 276:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('#'):
 277:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_ALTERNATE;  /* output %x with 0x */
 517              		.loc 2 277 25
 518 00a3 488B45E0 		movq	-32(%rbp), %rax
 519 00a7 8B00     		movl	(%rax), %eax
 520 00a9 0C80     		orb	$-128, %al
 521 00ab 89C2     		movl	%eax, %edx
 522 00ad 488B45E0 		movq	-32(%rbp), %rax
 523 00b1 8910     		movl	%edx, (%rax)
GAS LISTING /tmp/ccPPTXZA.s 			page 25


 278:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 524              		.loc 2 278 13
 525 00b3 EB01     		jmp	.L34
 526              	.L37:
 279:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         default:
 280:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 527              		.loc 2 280 13
 528 00b5 90       		nop
 529              	.L34:
 281:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 282:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return;
 530              		.loc 2 282 5
 531 00b6 90       		nop
 283:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 532              		.loc 2 283 1
 533 00b7 488B45F8 		movq	-8(%rbp), %rax
 534 00bb 64483304 		xorq	%fs:40, %rax
 534      25280000 
 534      00
 535 00c4 7405     		je	.L36
 536 00c6 E8000000 		call	__stack_chk_fail@PLT
 536      00
 537              	.L36:
 538 00cb C9       		leave
 539              	.LCFI17:
 540              		.cfi_def_cfa 7, 8
 541 00cc C3       		ret
 542              		.cfi_endproc
 543              	.LFE11:
 545              		.section	.text.SecDecodeSizeI,"ax",@progbits
 547              	SecDecodeSizeI:
 548              	.LFB12:
 284:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 285:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 286:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 287:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded size identifier in format string to Reduce the number of lines of function code
 288:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 289:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeSizeI(SecFormatAttr *attr, const SecChar **format)
 290:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 549              		.loc 2 290 1
 550              		.cfi_startproc
 551 0000 F30F1EFA 		endbr64
 552 0004 55       		pushq	%rbp
 553              	.LCFI18:
 554              		.cfi_def_cfa_offset 16
 555              		.cfi_offset 6, -16
 556 0005 4889E5   		movq	%rsp, %rbp
 557              	.LCFI19:
 558              		.cfi_def_cfa_register 6
 559 0008 4883EC20 		subq	$32, %rsp
 560 000c 48897DE8 		movq	%rdi, -24(%rbp)
 561 0010 488975E0 		movq	%rsi, -32(%rbp)
 562              		.loc 2 290 1
 563 0014 64488B04 		movq	%fs:40, %rax
 563      25280000 
 563      00
 564 001d 488945F8 		movq	%rax, -8(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 26


 565 0021 31C0     		xorl	%eax, %eax
 291:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
 292:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->flags |= SECUREC_FLAG_I64;    /* %I  to  INT64 */
 566              		.loc 2 292 17
 567 0023 488B45E8 		movq	-24(%rbp), %rax
 568 0027 8B00     		movl	(%rax), %eax
 569 0029 80CC80   		orb	$-128, %ah
 570 002c 89C2     		movl	%eax, %edx
 571 002e 488B45E8 		movq	-24(%rbp), %rax
 572 0032 8910     		movl	%edx, (%rax)
 293:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 294:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if ((**format == SECUREC_CHAR('6')) && (*((*format) + 1) == SECUREC_CHAR('4'))) {
 573              		.loc 2 294 11
 574 0034 488B45E0 		movq	-32(%rbp), %rax
 575 0038 488B00   		movq	(%rax), %rax
 576              		.loc 2 294 10
 577 003b 0FB600   		movzbl	(%rax), %eax
 578              		.loc 2 294 8
 579 003e 3C36     		cmpb	$54, %al
 580 0040 753A     		jne	.L39
 581              		.loc 2 294 48 discriminator 1
 582 0042 488B45E0 		movq	-32(%rbp), %rax
 583 0046 488B00   		movq	(%rax), %rax
 584              		.loc 2 294 57 discriminator 1
 585 0049 4883C001 		addq	$1, %rax
 586              		.loc 2 294 45 discriminator 1
 587 004d 0FB600   		movzbl	(%rax), %eax
 588              		.loc 2 294 41 discriminator 1
 589 0050 3C34     		cmpb	$52, %al
 590 0052 7528     		jne	.L39
 295:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (*format) += 2; /* add 2 to skip I64 */
 591              		.loc 2 295 19
 592 0054 488B45E0 		movq	-32(%rbp), %rax
 593 0058 488B00   		movq	(%rax), %rax
 594 005b 488D5002 		leaq	2(%rax), %rdx
 595 005f 488B45E0 		movq	-32(%rbp), %rax
 596 0063 488910   		movq	%rdx, (%rax)
 296:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         attr->flags |= SECUREC_FLAG_I64;    /* %I64  to  INT64 */
 597              		.loc 2 296 21
 598 0066 488B45E8 		movq	-24(%rbp), %rax
 599 006a 8B00     		movl	(%rax), %eax
 600 006c 80CC80   		orb	$-128, %ah
 601 006f 89C2     		movl	%eax, %edx
 602 0071 488B45E8 		movq	-24(%rbp), %rax
 603 0075 8910     		movl	%edx, (%rax)
 604 0077 E9A00000 		jmp	.L40
 604      00
 605              	.L39:
 297:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if ((**format == SECUREC_CHAR('3')) && (*((*format) + 1) == SECUREC_CHAR('2'))) {
 606              		.loc 2 297 18
 607 007c 488B45E0 		movq	-32(%rbp), %rax
 608 0080 488B00   		movq	(%rax), %rax
 609              		.loc 2 297 17
 610 0083 0FB600   		movzbl	(%rax), %eax
 611              		.loc 2 297 15
 612 0086 3C33     		cmpb	$51, %al
 613 0088 7537     		jne	.L41
GAS LISTING /tmp/ccPPTXZA.s 			page 27


 614              		.loc 2 297 55 discriminator 1
 615 008a 488B45E0 		movq	-32(%rbp), %rax
 616 008e 488B00   		movq	(%rax), %rax
 617              		.loc 2 297 64 discriminator 1
 618 0091 4883C001 		addq	$1, %rax
 619              		.loc 2 297 52 discriminator 1
 620 0095 0FB600   		movzbl	(%rax), %eax
 621              		.loc 2 297 48 discriminator 1
 622 0098 3C32     		cmpb	$50, %al
 623 009a 7525     		jne	.L41
 298:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (*format) += 2; /* add 2 to skip I32 */
 624              		.loc 2 298 19
 625 009c 488B45E0 		movq	-32(%rbp), %rax
 626 00a0 488B00   		movq	(%rax), %rax
 627 00a3 488D5002 		leaq	2(%rax), %rdx
 628 00a7 488B45E0 		movq	-32(%rbp), %rax
 629 00ab 488910   		movq	%rdx, (%rax)
 299:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         attr->flags &= ~SECUREC_FLAG_I64;   /* %I64  to  INT32 */
 630              		.loc 2 299 21
 631 00ae 488B45E8 		movq	-24(%rbp), %rax
 632 00b2 8B00     		movl	(%rax), %eax
 633 00b4 80E47F   		andb	$127, %ah
 634 00b7 89C2     		movl	%eax, %edx
 635 00b9 488B45E8 		movq	-24(%rbp), %rax
 636 00bd 8910     		movl	%edx, (%rax)
 637 00bf EB5B     		jmp	.L40
 638              	.L41:
 300:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if ((**format == SECUREC_CHAR('d')) || (**format == SECUREC_CHAR('i')) ||
 639              		.loc 2 300 18
 640 00c1 488B45E0 		movq	-32(%rbp), %rax
 641 00c5 488B00   		movq	(%rax), %rax
 642              		.loc 2 300 17
 643 00c8 0FB600   		movzbl	(%rax), %eax
 644              		.loc 2 300 15
 645 00cb 3C64     		cmpb	$100, %al
 646 00cd 744D     		je	.L40
 647              		.loc 2 300 53 discriminator 1
 648 00cf 488B45E0 		movq	-32(%rbp), %rax
 649 00d3 488B00   		movq	(%rax), %rax
 650              		.loc 2 300 52 discriminator 1
 651 00d6 0FB600   		movzbl	(%rax), %eax
 652              		.loc 2 300 48 discriminator 1
 653 00d9 3C69     		cmpb	$105, %al
 654 00db 743F     		je	.L40
 301:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (**format == SECUREC_CHAR('o')) || (**format == SECUREC_CHAR('u')) ||
 655              		.loc 2 301 11 discriminator 2
 656 00dd 488B45E0 		movq	-32(%rbp), %rax
 657 00e1 488B00   		movq	(%rax), %rax
 658              		.loc 2 301 10 discriminator 2
 659 00e4 0FB600   		movzbl	(%rax), %eax
 300:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if ((**format == SECUREC_CHAR('d')) || (**format == SECUREC_CHAR('i')) ||
 660              		.loc 2 300 83 discriminator 2
 661 00e7 3C6F     		cmpb	$111, %al
 662 00e9 7431     		je	.L40
 663              		.loc 2 301 46
 664 00eb 488B45E0 		movq	-32(%rbp), %rax
 665 00ef 488B00   		movq	(%rax), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 28


 666              		.loc 2 301 45
 667 00f2 0FB600   		movzbl	(%rax), %eax
 668              		.loc 2 301 41
 669 00f5 3C75     		cmpb	$117, %al
 670 00f7 7423     		je	.L40
 302:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (**format == SECUREC_CHAR('x')) || (**format == SECUREC_CHAR('X'))) {
 671              		.loc 2 302 11 discriminator 1
 672 00f9 488B45E0 		movq	-32(%rbp), %rax
 673 00fd 488B00   		movq	(%rax), %rax
 674              		.loc 2 302 10 discriminator 1
 675 0100 0FB600   		movzbl	(%rax), %eax
 301:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (**format == SECUREC_CHAR('o')) || (**format == SECUREC_CHAR('u')) ||
 676              		.loc 2 301 76 discriminator 1
 677 0103 3C78     		cmpb	$120, %al
 678 0105 7415     		je	.L40
 679              		.loc 2 302 46
 680 0107 488B45E0 		movq	-32(%rbp), %rax
 681 010b 488B00   		movq	(%rax), %rax
 682              		.loc 2 302 45
 683 010e 0FB600   		movzbl	(%rax), %eax
 684              		.loc 2 302 41
 685 0111 3C58     		cmpb	$88, %al
 686 0113 7407     		je	.L40
 303:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* do nothing */
 304:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 305:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* Compatibility  code for "%I" just print I */
 306:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 687              		.loc 2 306 16
 688 0115 B8FFFFFF 		movl	$-1, %eax
 688      FF
 689 011a EB05     		jmp	.L42
 690              	.L40:
 307:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 308:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 691              		.loc 2 308 12
 692 011c B8000000 		movl	$0, %eax
 692      00
 693              	.L42:
 309:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 694              		.loc 2 309 1
 695 0121 488B4DF8 		movq	-8(%rbp), %rcx
 696 0125 6448330C 		xorq	%fs:40, %rcx
 696      25280000 
 696      00
 697 012e 7405     		je	.L43
 698 0130 E8000000 		call	__stack_chk_fail@PLT
 698      00
 699              	.L43:
 700 0135 C9       		leave
 701              	.LCFI20:
 702              		.cfi_def_cfa 7, 8
 703 0136 C3       		ret
 704              		.cfi_endproc
 705              	.LFE12:
 707              		.section	.text.SecDecodeSize,"ax",@progbits
 709              	SecDecodeSize:
 710              	.LFB13:
GAS LISTING /tmp/ccPPTXZA.s 			page 29


 310:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 311:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded size identifier in format string
 312:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 313:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeSize(SecChar ch, SecFormatAttr *attr, const SecChar **format)
 314:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 711              		.loc 2 314 1
 712              		.cfi_startproc
 713 0000 F30F1EFA 		endbr64
 714 0004 55       		pushq	%rbp
 715              	.LCFI21:
 716              		.cfi_def_cfa_offset 16
 717              		.cfi_offset 6, -16
 718 0005 4889E5   		movq	%rsp, %rbp
 719              	.LCFI22:
 720              		.cfi_def_cfa_register 6
 721 0008 4883EC30 		subq	$48, %rsp
 722 000c 89F8     		movl	%edi, %eax
 723 000e 488975E0 		movq	%rsi, -32(%rbp)
 724 0012 488955D8 		movq	%rdx, -40(%rbp)
 725 0016 8845EC   		movb	%al, -20(%rbp)
 726              		.loc 2 314 1
 727 0019 64488B04 		movq	%fs:40, %rax
 727      25280000 
 727      00
 728 0022 488945F8 		movq	%rax, -8(%rbp)
 729 0026 31C0     		xorl	%eax, %eax
 315:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     switch (ch) {
 730              		.loc 2 315 5
 731 0028 0FBE45EC 		movsbl	-20(%rbp), %eax
 732 002c 83E849   		subl	$73, %eax
 733 002f 83F831   		cmpl	$49, %eax
 734 0032 0F872C01 		ja	.L63
 734      0000
 735 0038 89C0     		movl	%eax, %eax
 736 003a 488D1485 		leaq	0(,%rax,4), %rdx
 736      00000000 
 737 0042 488D0500 		leaq	.L47(%rip), %rax
 737      000000
 738 0049 8B0402   		movl	(%rdx,%rax), %eax
 739 004c 4898     		cltq
 740 004e 488D1500 		leaq	.L47(%rip), %rdx
 740      000000
 741 0055 4801D0   		addq	%rdx, %rax
 742 0058 3EFFE0   		notrack jmp	*%rax
 743              		.section	.rodata.SecDecodeSize,"a",@progbits
 744              		.align 4
 745              		.align 4
 746              	.L47:
 747 0000 00000000 		.long	.L54-.L47
 748 0004 00000000 		.long	.L63-.L47
 749 0008 00000000 		.long	.L63-.L47
 750 000c 00000000 		.long	.L50-.L47
 751 0010 00000000 		.long	.L63-.L47
 752 0014 00000000 		.long	.L63-.L47
 753 0018 00000000 		.long	.L63-.L47
 754 001c 00000000 		.long	.L63-.L47
 755 0020 00000000 		.long	.L63-.L47
GAS LISTING /tmp/ccPPTXZA.s 			page 30


 756 0024 00000000 		.long	.L63-.L47
 757 0028 00000000 		.long	.L63-.L47
 758 002c 00000000 		.long	.L63-.L47
 759 0030 00000000 		.long	.L63-.L47
 760 0034 00000000 		.long	.L63-.L47
 761 0038 00000000 		.long	.L63-.L47
 762 003c 00000000 		.long	.L63-.L47
 763 0040 00000000 		.long	.L63-.L47
 764 0044 00000000 		.long	.L46-.L47
 765 0048 00000000 		.long	.L63-.L47
 766 004c 00000000 		.long	.L63-.L47
 767 0050 00000000 		.long	.L63-.L47
 768 0054 00000000 		.long	.L63-.L47
 769 0058 00000000 		.long	.L63-.L47
 770 005c 00000000 		.long	.L63-.L47
 771 0060 00000000 		.long	.L63-.L47
 772 0064 00000000 		.long	.L63-.L47
 773 0068 00000000 		.long	.L63-.L47
 774 006c 00000000 		.long	.L63-.L47
 775 0070 00000000 		.long	.L63-.L47
 776 0074 00000000 		.long	.L63-.L47
 777 0078 00000000 		.long	.L63-.L47
 778 007c 00000000 		.long	.L53-.L47
 779 0080 00000000 		.long	.L63-.L47
 780 0084 00000000 		.long	.L52-.L47
 781 0088 00000000 		.long	.L63-.L47
 782 008c 00000000 		.long	.L51-.L47
 783 0090 00000000 		.long	.L63-.L47
 784 0094 00000000 		.long	.L63-.L47
 785 0098 00000000 		.long	.L63-.L47
 786 009c 00000000 		.long	.L63-.L47
 787 00a0 00000000 		.long	.L50-.L47
 788 00a4 00000000 		.long	.L63-.L47
 789 00a8 00000000 		.long	.L63-.L47
 790 00ac 00000000 		.long	.L49-.L47
 791 00b0 00000000 		.long	.L63-.L47
 792 00b4 00000000 		.long	.L63-.L47
 793 00b8 00000000 		.long	.L48-.L47
 794 00bc 00000000 		.long	.L63-.L47
 795 00c0 00000000 		.long	.L63-.L47
 796 00c4 00000000 		.long	.L46-.L47
 797              		.section	.text.SecDecodeSize
 798              	.L52:
 316:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 317:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('j'):
 318:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_INTMAX;
 799              		.loc 2 318 25
 800 005b 488B45E0 		movq	-32(%rbp), %rax
 801 005f 8B00     		movl	(%rax), %eax
 802 0061 0D000004 		orl	$262144, %eax
 802      00
 803 0066 89C2     		movl	%eax, %edx
 804 0068 488B45E0 		movq	-32(%rbp), %rax
 805 006c 8910     		movl	%edx, (%rax)
 319:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 806              		.loc 2 319 13
 807 006e E9F50000 		jmp	.L55
GAS LISTING /tmp/ccPPTXZA.s 			page 31


 807      00
 808              	.L50:
 320:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 321:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('q'):
 322:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             /* fall-through */ /* FALLTHRU */
 323:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('L'):
 324:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_LONGLONG | SECUREC_FLAG_LONG_DOUBLE;
 809              		.loc 2 324 25
 810 0073 488B45E0 		movq	-32(%rbp), %rax
 811 0077 8B00     		movl	(%rax), %eax
 812 0079 80CC14   		orb	$20, %ah
 813 007c 89C2     		movl	%eax, %edx
 814 007e 488B45E0 		movq	-32(%rbp), %rax
 815 0082 8910     		movl	%edx, (%rax)
 325:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 816              		.loc 2 325 13
 817 0084 E9DF0000 		jmp	.L55
 817      00
 818              	.L51:
 326:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('l'):
 327:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (**format == SECUREC_CHAR('l')) {
 819              		.loc 2 327 18
 820 0089 488B45D8 		movq	-40(%rbp), %rax
 821 008d 488B00   		movq	(%rax), %rax
 822              		.loc 2 327 17
 823 0090 0FB600   		movzbl	(%rax), %eax
 824              		.loc 2 327 16
 825 0093 3C6C     		cmpb	$108, %al
 826 0095 7528     		jne	.L56
 328:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 *format = *format + 1;
 827              		.loc 2 328 27
 828 0097 488B45D8 		movq	-40(%rbp), %rax
 829 009b 488B00   		movq	(%rax), %rax
 830              		.loc 2 328 35
 831 009e 488D5001 		leaq	1(%rax), %rdx
 832              		.loc 2 328 25
 833 00a2 488B45D8 		movq	-40(%rbp), %rax
 834 00a6 488910   		movq	%rdx, (%rax)
 329:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_LONGLONG;   /* long long */
 835              		.loc 2 329 29
 836 00a9 488B45E0 		movq	-32(%rbp), %rax
 837 00ad 8B00     		movl	(%rax), %eax
 838 00af 80CC10   		orb	$16, %ah
 839 00b2 89C2     		movl	%eax, %edx
 840 00b4 488B45E0 		movq	-32(%rbp), %rax
 841 00b8 8910     		movl	%edx, (%rax)
 330:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             } else {
 331:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_LONG;   /* long int or wchar_t */
 332:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 333:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 842              		.loc 2 333 13
 843 00ba E9A90000 		jmp	.L55
 843      00
 844              	.L56:
 331:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 845              		.loc 2 331 29
 846 00bf 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 32


 847 00c3 8B00     		movl	(%rax), %eax
 848 00c5 83C810   		orl	$16, %eax
 849 00c8 89C2     		movl	%eax, %edx
 850 00ca 488B45E0 		movq	-32(%rbp), %rax
 851 00ce 8910     		movl	%edx, (%rax)
 852              		.loc 2 333 13
 853 00d0 E9930000 		jmp	.L55
 853      00
 854              	.L49:
 334:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('t'):
 335:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_PTRDIFF;
 855              		.loc 2 335 25
 856 00d5 488B45E0 		movq	-32(%rbp), %rax
 857 00d9 8B00     		movl	(%rax), %eax
 858 00db 0D000001 		orl	$65536, %eax
 858      00
 859 00e0 89C2     		movl	%eax, %edx
 860 00e2 488B45E0 		movq	-32(%rbp), %rax
 861 00e6 8910     		movl	%edx, (%rax)
 336:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 862              		.loc 2 336 13
 863 00e8 EB7E     		jmp	.L55
 864              	.L46:
 337:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 338:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('z'):
 339:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             /* fall-through */ /* FALLTHRU */
 340:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('Z'):
 341:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_SIZE;
 865              		.loc 2 341 25
 866 00ea 488B45E0 		movq	-32(%rbp), %rax
 867 00ee 8B00     		movl	(%rax), %eax
 868 00f0 0D000002 		orl	$131072, %eax
 868      00
 869 00f5 89C2     		movl	%eax, %edx
 870 00f7 488B45E0 		movq	-32(%rbp), %rax
 871 00fb 8910     		movl	%edx, (%rax)
 342:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 872              		.loc 2 342 13
 873 00fd EB69     		jmp	.L55
 874              	.L54:
 343:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 344:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('I'):
 345:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (SecDecodeSizeI(attr, format) != 0) {
 875              		.loc 2 345 17
 876 00ff 488B55D8 		movq	-40(%rbp), %rdx
 877 0103 488B45E0 		movq	-32(%rbp), %rax
 878 0107 4889D6   		movq	%rdx, %rsi
 879 010a 4889C7   		movq	%rax, %rdi
 880 010d E8000000 		call	SecDecodeSizeI
 880      00
 881              		.loc 2 345 16
 882 0112 85C0     		testl	%eax, %eax
 883 0114 7451     		je	.L64
 346:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* Compatibility  code for "%I" just print I */
 347:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;
 884              		.loc 2 347 24
 885 0116 B8FFFFFF 		movl	$-1, %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 33


 885      FF
 886 011b EB50     		jmp	.L59
 887              	.L53:
 348:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 349:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 350:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('h'):
 351:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (**format == SECUREC_CHAR('h')) {
 888              		.loc 2 351 18
 889 011d 488B45D8 		movq	-40(%rbp), %rax
 890 0121 488B00   		movq	(%rax), %rax
 891              		.loc 2 351 17
 892 0124 0FB600   		movzbl	(%rax), %eax
 893              		.loc 2 351 16
 894 0127 3C68     		cmpb	$104, %al
 895 0129 7513     		jne	.L60
 352:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_CHAR;   /* char */
 896              		.loc 2 352 29
 897 012b 488B45E0 		movq	-32(%rbp), %rax
 898 012f 8B00     		movl	(%rax), %eax
 899 0131 80CC20   		orb	$32, %ah
 900 0134 89C2     		movl	%eax, %edx
 901 0136 488B45E0 		movq	-32(%rbp), %rax
 902 013a 8910     		movl	%edx, (%rax)
 353:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             } else {
 354:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_SHORT;  /* short int */
 355:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 356:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 903              		.loc 2 356 13
 904 013c EB2A     		jmp	.L55
 905              	.L60:
 354:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 906              		.loc 2 354 29
 907 013e 488B45E0 		movq	-32(%rbp), %rax
 908 0142 8B00     		movl	(%rax), %eax
 909 0144 83C820   		orl	$32, %eax
 910 0147 89C2     		movl	%eax, %edx
 911 0149 488B45E0 		movq	-32(%rbp), %rax
 912 014d 8910     		movl	%edx, (%rax)
 913              		.loc 2 356 13
 914 014f EB17     		jmp	.L55
 915              	.L48:
 357:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('w'):
 358:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_WIDECHAR;   /* wide char */
 916              		.loc 2 358 25
 917 0151 488B45E0 		movq	-32(%rbp), %rax
 918 0155 8B00     		movl	(%rax), %eax
 919 0157 80CC08   		orb	$8, %ah
 920 015a 89C2     		movl	%eax, %edx
 921 015c 488B45E0 		movq	-32(%rbp), %rax
 922 0160 8910     		movl	%edx, (%rax)
 359:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 923              		.loc 2 359 13
 924 0162 EB04     		jmp	.L55
 925              	.L63:
 360:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         default:
 361:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 926              		.loc 2 361 13
GAS LISTING /tmp/ccPPTXZA.s 			page 34


 927 0164 90       		nop
 928 0165 EB01     		jmp	.L55
 929              	.L64:
 349:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('h'):
 930              		.loc 2 349 13
 931 0167 90       		nop
 932              	.L55:
 362:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 363:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 933              		.loc 2 363 12
 934 0168 B8000000 		movl	$0, %eax
 934      00
 935              	.L59:
 364:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 936              		.loc 2 364 1
 937 016d 488B4DF8 		movq	-8(%rbp), %rcx
 938 0171 6448330C 		xorq	%fs:40, %rcx
 938      25280000 
 938      00
 939 017a 7405     		je	.L62
 940 017c E8000000 		call	__stack_chk_fail@PLT
 940      00
 941              	.L62:
 942 0181 C9       		leave
 943              	.LCFI23:
 944              		.cfi_def_cfa 7, 8
 945 0182 C3       		ret
 946              		.cfi_endproc
 947              	.LFE13:
 949              		.section	.text.SecDecodeTypeC,"ax",@progbits
 951              	SecDecodeTypeC:
 952              	.LFB14:
 365:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 366:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 367:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded char type identifier
 368:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 369:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeC(SecFormatAttr *attr, unsigned int cValue, SecFormatBuf *formatBuf, SecBuf
 370:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 953              		.loc 2 370 1
 954              		.cfi_startproc
 955 0000 F30F1EFA 		endbr64
 956 0004 55       		pushq	%rbp
 957              	.LCFI24:
 958              		.cfi_def_cfa_offset 16
 959              		.cfi_offset 6, -16
 960 0005 4889E5   		movq	%rsp, %rbp
 961              	.LCFI25:
 962              		.cfi_def_cfa_register 6
 963 0008 4883EC40 		subq	$64, %rsp
 964 000c 48897DD8 		movq	%rdi, -40(%rbp)
 965 0010 8975D4   		movl	%esi, -44(%rbp)
 966 0013 488955C8 		movq	%rdx, -56(%rbp)
 967 0017 48894DC0 		movq	%rcx, -64(%rbp)
 968              		.loc 2 370 1
 969 001b 64488B04 		movq	%fs:40, %rax
 969      25280000 
 969      00
GAS LISTING /tmp/ccPPTXZA.s 			page 35


 970 0024 488945F8 		movq	%rax, -8(%rbp)
 971 0028 31C0     		xorl	%eax, %eax
 371:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT)) && !(defined(__hpux)) && !(defined(SECUREC_ON_SOLARI
 372:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->flags &= ~SECUREC_FLAG_LEADZERO;
 972              		.loc 2 372 17
 973 002a 488B45D8 		movq	-40(%rbp), %rax
 974 002e 8B00     		movl	(%rax), %eax
 975 0030 83E0F7   		andl	$-9, %eax
 976 0033 89C2     		movl	%eax, %edx
 977 0035 488B45D8 		movq	-40(%rbp), %rax
 978 0039 8910     		movl	%edx, (%rax)
 373:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 374:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 375:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 376:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->bufferIsWide = 1;
 377:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & SECUREC_FLAG_SHORT) {
 378:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_MBTOWC
 379:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* multibyte character to wide  character */
 380:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         char tmpChar[2]; /* One character string, length is 2 */
 381:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         tmpChar[0] = (char)(cValue & 0x00ff);
 382:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         tmpChar[1] = '\0';
 383:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 384:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (mbtowc(buffer->wStr, tmpChar, sizeof(tmpChar)) < 0) {
 385:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 386:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 387:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 388:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 389:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 390:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 391:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         buffer->wStr[0] = (wchar_t)cValue;
 392:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 393:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatBuf->wStr = buffer->wStr;
 394:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 1;                /* only 1 wide character */
 395:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* SECUREC_FOR_WCHAR */
 396:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->bufferIsWide = 0;
 979              		.loc 2 396 24
 980 003b 488B45D8 		movq	-40(%rbp), %rax
 981 003f C7400C00 		movl	$0, 12(%rax)
 981      000000
 397:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & (SECUREC_FLAG_LONG | SECUREC_FLAG_WIDECHAR)) {
 982              		.loc 2 397 13
 983 0046 488B45D8 		movq	-40(%rbp), %rax
 984 004a 8B00     		movl	(%rax), %eax
 985              		.loc 2 397 21
 986 004c 25100800 		andl	$2064, %eax
 986      00
 987              		.loc 2 397 8
 988 0051 85C0     		testl	%eax, %eax
 989 0053 7437     		je	.L66
 990              	.LBB2:
 398:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCTOMB
 399:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         wchar_t wChar = (wchar_t)cValue;
 991              		.loc 2 399 17
 992 0055 8B45D4   		movl	-44(%rbp), %eax
 993 0058 8945F0   		movl	%eax, -16(%rbp)
 400:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         int textLen;
 401:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* wide  character  to multibyte character */
GAS LISTING /tmp/ccPPTXZA.s 			page 36


 402:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_MASK_MSVC_CRT_WARNING
 403:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = wctomb(buffer->str, wChar);
 994              		.loc 2 403 32
 995 005b 488B45C0 		movq	-64(%rbp), %rax
 996              		.loc 2 403 19
 997 005f 8B55F0   		movl	-16(%rbp), %edx
 998 0062 89D6     		movl	%edx, %esi
 999 0064 4889C7   		movq	%rax, %rdi
 1000 0067 E8000000 		call	wctomb@PLT
 1000      00
 1001 006c 8945F4   		movl	%eax, -12(%rbp)
 404:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_END_MASK_MSVC_CRT_WARNING
 405:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (textLen < 0) {
 1002              		.loc 2 405 12
 1003 006f 837DF400 		cmpl	$0, -12(%rbp)
 1004 0073 7907     		jns	.L67
 406:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1005              		.loc 2 406 20
 1006 0075 B8FFFFFF 		movl	$-1, %eax
 1006      FF
 1007 007a EB33     		jmp	.L68
 1008              	.L67:
 407:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 408:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->str = buffer->str;
 1009              		.loc 2 408 26
 1010 007c 488B55C0 		movq	-64(%rbp), %rdx
 1011              		.loc 2 408 24
 1012 0080 488B45C8 		movq	-56(%rbp), %rax
 1013 0084 488910   		movq	%rdx, (%rax)
 409:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return textLen;
 1014              		.loc 2 409 16
 1015 0087 8B45F4   		movl	-12(%rbp), %eax
 1016 008a EB23     		jmp	.L68
 1017              	.L66:
 1018              	.LBE2:
 1019              	.LBB3:
 410:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 411:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 412:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 413:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 414:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* get  multibyte character from argument */
 415:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         unsigned short temp;
 416:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         temp = (unsigned short)cValue;
 1020              		.loc 2 416 14
 1021 008c 8B45D4   		movl	-44(%rbp), %eax
 1022 008f 668945EE 		movw	%ax, -18(%rbp)
 417:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         buffer->str[0] = (char)temp;
 1023              		.loc 2 417 26
 1024 0093 0FB745EE 		movzwl	-18(%rbp), %eax
 1025 0097 89C2     		movl	%eax, %edx
 1026              		.loc 2 417 24
 1027 0099 488B45C0 		movq	-64(%rbp), %rax
 1028 009d 8810     		movb	%dl, (%rax)
 418:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->str = buffer->str;
 1029              		.loc 2 418 26
 1030 009f 488B55C0 		movq	-64(%rbp), %rdx
 1031              		.loc 2 418 24
GAS LISTING /tmp/ccPPTXZA.s 			page 37


 1032 00a3 488B45C8 		movq	-56(%rbp), %rax
 1033 00a7 488910   		movq	%rdx, (%rax)
 419:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return 1; /* only 1 character */
 1034              		.loc 2 419 16
 1035 00aa B8010000 		movl	$1, %eax
 1035      00
 1036              	.L68:
 1037              	.LBE3:
 420:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 421:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 422:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 423:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1038              		.loc 2 423 1
 1039 00af 488B4DF8 		movq	-8(%rbp), %rcx
 1040 00b3 6448330C 		xorq	%fs:40, %rcx
 1040      25280000 
 1040      00
 1041 00bc 7405     		je	.L69
 1042 00be E8000000 		call	__stack_chk_fail@PLT
 1042      00
 1043              	.L69:
 1044 00c3 C9       		leave
 1045              	.LCFI26:
 1046              		.cfi_def_cfa 7, 8
 1047 00c4 C3       		ret
 1048              		.cfi_endproc
 1049              	.LFE14:
 1051              		.section	.data.g_wStrNullString,"aw"
 1052              		.align 32
 1055              	g_wStrNullString:
 1056 0000 28000000 		.long	40
 1057 0004 6E000000 		.long	110
 1058 0008 75000000 		.long	117
 1059 000c 6C000000 		.long	108
 1060 0010 6C000000 		.long	108
 1061 0014 29000000 		.long	41
 1062 0018 00000000 		.long	0
 1063 001c 00000000 		.long	0
 1064              		.section	.data.g_strNullString,"aw"
 1065              		.align 8
 1068              	g_strNullString:
 1069 0000 286E756C 		.string	"(null)"
 1069      6C2900
 1070 0007 00       		.zero	1
 1071              		.section	.text.SecDecodeTypeSchar,"ax",@progbits
 1073              	SecDecodeTypeSchar:
 1074              	.LFB15:
 424:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 425:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* literal string to print null ptr, define it as array rather than const text area
 426:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * is to avoid gcc warning with pointing const text with variable
 427:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 428:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
 429:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static wchar_t g_wStrNullString[SECUREC_NULL_STRING_SIZE] = { L'(', L'n', L'u', L'l', L'l', L')', L
 430:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 431:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static char g_strNullString[SECUREC_NULL_STRING_SIZE] = "(null)";
 432:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 433:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeSchar(const SecFormatAttr *attr, SecFormatBuf *formatBuf)
GAS LISTING /tmp/ccPPTXZA.s 			page 38


 434:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1075              		.loc 2 434 1
 1076              		.cfi_startproc
 1077 0000 F30F1EFA 		endbr64
 1078 0004 55       		pushq	%rbp
 1079              	.LCFI27:
 1080              		.cfi_def_cfa_offset 16
 1081              		.cfi_offset 6, -16
 1082 0005 4889E5   		movq	%rsp, %rbp
 1083              	.LCFI28:
 1084              		.cfi_def_cfa_register 6
 1085 0008 4883EC30 		subq	$48, %rsp
 1086 000c 48897DD8 		movq	%rdi, -40(%rbp)
 1087 0010 488975D0 		movq	%rsi, -48(%rbp)
 1088              		.loc 2 434 1
 1089 0014 64488B04 		movq	%fs:40, %rax
 1089      25280000 
 1089      00
 1090 001d 488945F8 		movq	%rax, -8(%rbp)
 1091 0021 31C0     		xorl	%eax, %eax
 435:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int finalPrecision = (attr->precision == -1) ? SECUREC_INT_MAX : attr->precision;
 1092              		.loc 2 435 31
 1093 0023 488B45D8 		movq	-40(%rbp), %rax
 1094 0027 8B4008   		movl	8(%rax), %eax
 1095              		.loc 2 435 68
 1096 002a 83F8FF   		cmpl	$-1, %eax
 1097 002d 7409     		je	.L71
 1098              		.loc 2 435 68 is_stmt 0 discriminator 1
 1099 002f 488B45D8 		movq	-40(%rbp), %rax
 1100 0033 8B4008   		movl	8(%rax), %eax
 1101 0036 EB05     		jmp	.L72
 1102              	.L71:
 1103              		.loc 2 435 68 discriminator 2
 1104 0038 B8FFFFFF 		movl	$2147483647, %eax
 1104      7F
 1105              	.L72:
 1106              		.loc 2 435 9 is_stmt 1 discriminator 4
 1107 003d 8945EC   		movl	%eax, -20(%rbp)
 436:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;
 437:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 438:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatBuf->str == NULL) {   /* NULL passed, use special string */
 1108              		.loc 2 438 18 discriminator 4
 1109 0040 488B45D0 		movq	-48(%rbp), %rax
 1110 0044 488B00   		movq	(%rax), %rax
 1111              		.loc 2 438 8 discriminator 4
 1112 0047 4885C0   		testq	%rax, %rax
 1113 004a 750E     		jne	.L73
 439:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->str = g_strNullString;
 1114              		.loc 2 439 24
 1115 004c 488B45D0 		movq	-48(%rbp), %rax
 1116 0050 488D1500 		leaq	g_strNullString(%rip), %rdx
 1116      000000
 1117 0057 488910   		movq	%rdx, (%rax)
 1118              	.L73:
 440:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 441:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (finalPrecision == SECUREC_INT_MAX) {
 1119              		.loc 2 441 8
GAS LISTING /tmp/ccPPTXZA.s 			page 39


 1120 005a 817DECFF 		cmpl	$2147483647, -20(%rbp)
 1120      FFFF7F
 1121 0061 7514     		jne	.L74
 442:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* precision NOT assigned */
 443:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* The strlen performance is high when the string length is greater than 32 */
 444:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = (int)strlen(formatBuf->str);
 1122              		.loc 2 444 40
 1123 0063 488B45D0 		movq	-48(%rbp), %rax
 1124 0067 488B00   		movq	(%rax), %rax
 1125              		.loc 2 444 24
 1126 006a 4889C7   		movq	%rax, %rdi
 1127 006d E8000000 		call	strlen@PLT
 1127      00
 1128              		.loc 2 444 17
 1129 0072 8945E8   		movl	%eax, -24(%rbp)
 1130 0075 EB22     		jmp	.L75
 1131              	.L74:
 1132              	.LBB4:
 445:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 446:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* precision assigned */
 447:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         size_t tmpLen;
 448:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_CALC_STR_LEN(formatBuf->str, (size_t)(unsigned int)finalPrecision, &tmpLen);
 1133              		.loc 2 448 9
 1134 0077 8B45EC   		movl	-20(%rbp), %eax
 1135 007a 89C2     		movl	%eax, %edx
 1136 007c 488B45D0 		movq	-48(%rbp), %rax
 1137 0080 488B00   		movq	(%rax), %rax
 1138 0083 4889D6   		movq	%rdx, %rsi
 1139 0086 4889C7   		movq	%rax, %rdi
 1140 0089 E8000000 		call	strnlen@PLT
 1140      00
 1141 008e 488945F0 		movq	%rax, -16(%rbp)
 449:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = (int)tmpLen;
 1142              		.loc 2 449 19
 1143 0092 488B45F0 		movq	-16(%rbp), %rax
 1144              		.loc 2 449 17
 1145 0096 8945E8   		movl	%eax, -24(%rbp)
 1146              	.L75:
 1147              	.LBE4:
 450:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 451:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return textLen;
 1148              		.loc 2 451 12
 1149 0099 8B45E8   		movl	-24(%rbp), %eax
 452:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1150              		.loc 2 452 1
 1151 009c 488B4DF8 		movq	-8(%rbp), %rcx
 1152 00a0 6448330C 		xorq	%fs:40, %rcx
 1152      25280000 
 1152      00
 1153 00a9 7405     		je	.L77
 1154 00ab E8000000 		call	__stack_chk_fail@PLT
 1154      00
 1155              	.L77:
 1156 00b0 C9       		leave
 1157              	.LCFI29:
 1158              		.cfi_def_cfa 7, 8
 1159 00b1 C3       		ret
GAS LISTING /tmp/ccPPTXZA.s 			page 40


 1160              		.cfi_endproc
 1161              	.LFE15:
 1163              		.section	.text.SecDecodeTypeSwchar,"ax",@progbits
 1165              	SecDecodeTypeSwchar:
 1166              	.LFB16:
 453:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 454:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
 455:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeSwchar(SecFormatAttr *attr, SecFormatBuf *formatBuf)
 456:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1167              		.loc 2 456 1
 1168              		.cfi_startproc
 1169 0000 F30F1EFA 		endbr64
 1170 0004 55       		pushq	%rbp
 1171              	.LCFI30:
 1172              		.cfi_def_cfa_offset 16
 1173              		.cfi_offset 6, -16
 1174 0005 4889E5   		movq	%rsp, %rbp
 1175              	.LCFI31:
 1176              		.cfi_def_cfa_register 6
 1177 0008 4883EC30 		subq	$48, %rsp
 1178 000c 48897DD8 		movq	%rdi, -40(%rbp)
 1179 0010 488975D0 		movq	%rsi, -48(%rbp)
 1180              		.loc 2 456 1
 1181 0014 64488B04 		movq	%fs:40, %rax
 1181      25280000 
 1181      00
 1182 001d 488945F8 		movq	%rax, -8(%rbp)
 1183 0021 31C0     		xorl	%eax, %eax
 457:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int finalPrecision = (attr->precision == -1) ? SECUREC_INT_MAX : attr->precision;
 1184              		.loc 2 457 31
 1185 0023 488B45D8 		movq	-40(%rbp), %rax
 1186 0027 8B4008   		movl	8(%rax), %eax
 1187              		.loc 2 457 68
 1188 002a 83F8FF   		cmpl	$-1, %eax
 1189 002d 7409     		je	.L79
 1190              		.loc 2 457 68 is_stmt 0 discriminator 1
 1191 002f 488B45D8 		movq	-40(%rbp), %rax
 1192 0033 8B4008   		movl	8(%rax), %eax
 1193 0036 EB05     		jmp	.L80
 1194              	.L79:
 1195              		.loc 2 457 68 discriminator 2
 1196 0038 B8FFFFFF 		movl	$2147483647, %eax
 1196      7F
 1197              	.L80:
 1198              		.loc 2 457 9 is_stmt 1 discriminator 4
 1199 003d 8945EC   		movl	%eax, -20(%rbp)
 458:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;
 459:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 460:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->bufferIsWide = 1;
 1200              		.loc 2 460 24 discriminator 4
 1201 0040 488B45D8 		movq	-40(%rbp), %rax
 1202 0044 C7400C01 		movl	$1, 12(%rax)
 1202      000000
 461:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatBuf->wStr == NULL) {  /* NULL passed, use special string */
 1203              		.loc 2 461 18 discriminator 4
 1204 004b 488B45D0 		movq	-48(%rbp), %rax
 1205 004f 488B00   		movq	(%rax), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 41


 1206              		.loc 2 461 8 discriminator 4
 1207 0052 4885C0   		testq	%rax, %rax
 1208 0055 750E     		jne	.L81
 462:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->wStr = g_wStrNullString;
 1209              		.loc 2 462 25
 1210 0057 488B45D0 		movq	-48(%rbp), %rax
 1211 005b 488D1500 		leaq	g_wStrNullString(%rip), %rdx
 1211      000000
 1212 0062 488910   		movq	%rdx, (%rax)
 1213              	.L81:
 1214              	.LBB5:
 463:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 464:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* textLen in wchar_t */
 465:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_CALC_WSTR_LEN(formatBuf->wStr, finalPrecision, &textLen);
 1215              		.loc 2 465 5
 1216 0065 488B45D0 		movq	-48(%rbp), %rax
 1217 0069 488B00   		movq	(%rax), %rax
 1218 006c 488945F0 		movq	%rax, -16(%rbp)
 1219 0070 C745E800 		movl	$0, -24(%rbp)
 1219      000000
 1220 0077 EB0E     		jmp	.L82
 1221              	.L84:
 1222              		.loc 2 465 5 is_stmt 0 discriminator 4
 1223 0079 8B45E8   		movl	-24(%rbp), %eax
 1224 007c 83C001   		addl	$1, %eax
 1225 007f 8945E8   		movl	%eax, -24(%rbp)
 1226 0082 488345F0 		addq	$4, -16(%rbp)
 1226      04
 1227              	.L82:
 1228              		.loc 2 465 5 discriminator 1
 1229 0087 8B45E8   		movl	-24(%rbp), %eax
 1230 008a 3945EC   		cmpl	%eax, -20(%rbp)
 1231 008d 7E0A     		jle	.L83
 1232              		.loc 2 465 5 discriminator 3
 1233 008f 488B45F0 		movq	-16(%rbp), %rax
 1234 0093 8B00     		movl	(%rax), %eax
 1235 0095 85C0     		testl	%eax, %eax
 1236 0097 75E0     		jne	.L84
 1237              	.L83:
 1238              	.LBE5:
 466:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 467:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return textLen;
 1239              		.loc 2 467 12 is_stmt 1
 1240 0099 8B45E8   		movl	-24(%rbp), %eax
 468:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1241              		.loc 2 468 1
 1242 009c 488B4DF8 		movq	-8(%rbp), %rcx
 1243 00a0 6448330C 		xorq	%fs:40, %rcx
 1243      25280000 
 1243      00
 1244 00a9 7405     		je	.L86
 1245 00ab E8000000 		call	__stack_chk_fail@PLT
 1245      00
 1246              	.L86:
 1247 00b0 C9       		leave
 1248              	.LCFI32:
 1249              		.cfi_def_cfa 7, 8
GAS LISTING /tmp/ccPPTXZA.s 			page 42


 1250 00b1 C3       		ret
 1251              		.cfi_endproc
 1252              	.LFE16:
 1254              		.section	.text.SecDecodeTypeS,"ax",@progbits
 1256              	SecDecodeTypeS:
 1257              	.LFB17:
 469:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 470:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 471:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 472:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded string identifier
 473:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 474:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeS(SecFormatAttr *attr, char *argPtr, SecFormatBuf *formatBuf)
 475:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1258              		.loc 2 475 1
 1259              		.cfi_startproc
 1260 0000 F30F1EFA 		endbr64
 1261 0004 55       		pushq	%rbp
 1262              	.LCFI33:
 1263              		.cfi_def_cfa_offset 16
 1264              		.cfi_offset 6, -16
 1265 0005 4889E5   		movq	%rsp, %rbp
 1266              	.LCFI34:
 1267              		.cfi_def_cfa_register 6
 1268 0008 4883EC30 		subq	$48, %rsp
 1269 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1270 0010 488975E0 		movq	%rsi, -32(%rbp)
 1271 0014 488955D8 		movq	%rdx, -40(%rbp)
 1272              		.loc 2 475 1
 1273 0018 64488B04 		movq	%fs:40, %rax
 1273      25280000 
 1273      00
 1274 0021 488945F8 		movq	%rax, -8(%rbp)
 1275 0025 31C0     		xorl	%eax, %eax
 476:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;
 477:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT)) && (!defined(SECUREC_ON_UNIX))
 478:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->flags &= ~SECUREC_FLAG_LEADZERO;
 1276              		.loc 2 478 17
 1277 0027 488B45E8 		movq	-24(%rbp), %rax
 1278 002b 8B00     		movl	(%rax), %eax
 1279 002d 83E0F7   		andl	$-9, %eax
 1280 0030 89C2     		movl	%eax, %edx
 1281 0032 488B45E8 		movq	-24(%rbp), %rax
 1282 0036 8910     		movl	%edx, (%rax)
 479:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 480:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatBuf->str = argPtr;
 1283              		.loc 2 480 20
 1284 0038 488B45D8 		movq	-40(%rbp), %rax
 1285 003c 488B55E0 		movq	-32(%rbp), %rdx
 1286 0040 488910   		movq	%rdx, (%rax)
 481:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 482:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_LINUX_FORMAT)
 483:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (!(attr->flags & SECUREC_FLAG_LONG)) {
 484:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         attr->flags |= SECUREC_FLAG_SHORT;
 485:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 486:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 487:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & SECUREC_FLAG_SHORT) {
 488:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in multibyte chars */
GAS LISTING /tmp/ccPPTXZA.s 			page 43


 489:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSchar(attr, formatBuf);
 490:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 491:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in wide chars */
 492:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSwchar(attr, formatBuf);
 493:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 494:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* SECUREC_FOR_WCHAR */
 495:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & (SECUREC_FLAG_LONG | SECUREC_FLAG_WIDECHAR)) {
 1287              		.loc 2 495 13
 1288 0043 488B45E8 		movq	-24(%rbp), %rax
 1289 0047 8B00     		movl	(%rax), %eax
 1290              		.loc 2 495 21
 1291 0049 25100800 		andl	$2064, %eax
 1291      00
 1292              		.loc 2 495 8
 1293 004e 85C0     		testl	%eax, %eax
 1294 0050 7418     		je	.L88
 496:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in wide chars */
 497:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
 498:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSwchar(attr, formatBuf);
 1295              		.loc 2 498 19
 1296 0052 488B55D8 		movq	-40(%rbp), %rdx
 1297 0056 488B45E8 		movq	-24(%rbp), %rax
 1298 005a 4889D6   		movq	%rdx, %rsi
 1299 005d 4889C7   		movq	%rax, %rdi
 1300 0060 E8000000 		call	SecDecodeTypeSwchar
 1300      00
 1301 0065 8945F4   		movl	%eax, -12(%rbp)
 1302 0068 EB16     		jmp	.L89
 1303              	.L88:
 499:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 500:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = 0;
 501:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 502:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 503:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in multibyte chars */
 504:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSchar(attr, formatBuf);
 1304              		.loc 2 504 19
 1305 006a 488B55D8 		movq	-40(%rbp), %rdx
 1306 006e 488B45E8 		movq	-24(%rbp), %rax
 1307 0072 4889D6   		movq	%rdx, %rsi
 1308 0075 4889C7   		movq	%rax, %rdi
 1309 0078 E8000000 		call	SecDecodeTypeSchar
 1309      00
 1310 007d 8945F4   		movl	%eax, -12(%rbp)
 1311              	.L89:
 505:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 506:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif /* SECUREC_FOR_WCHAR */
 507:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return textLen;
 1312              		.loc 2 507 12
 1313 0080 8B45F4   		movl	-12(%rbp), %eax
 508:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1314              		.loc 2 508 1
 1315 0083 488B4DF8 		movq	-8(%rbp), %rcx
 1316 0087 6448330C 		xorq	%fs:40, %rcx
 1316      25280000 
 1316      00
 1317 0090 7405     		je	.L91
 1318 0092 E8000000 		call	__stack_chk_fail@PLT
GAS LISTING /tmp/ccPPTXZA.s 			page 44


 1318      00
 1319              	.L91:
 1320 0097 C9       		leave
 1321              	.LCFI35:
 1322              		.cfi_def_cfa 7, 8
 1323 0098 C3       		ret
 1324              		.cfi_endproc
 1325              	.LFE17:
 1327              		.section	.text.SecOutputOneChar,"ax",@progbits
 1329              	SecOutputOneChar:
 1330              	.LFB18:
 509:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 510:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 511:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Write one character to dest buffer
 512:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 513:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static void SecOutputOneChar(SecChar ch, SecPrintfStream *stream, int *counter)
 514:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1331              		.loc 2 514 1
 1332              		.cfi_startproc
 1333 0000 F30F1EFA 		endbr64
 1334 0004 55       		pushq	%rbp
 1335              	.LCFI36:
 1336              		.cfi_def_cfa_offset 16
 1337              		.cfi_offset 6, -16
 1338 0005 4889E5   		movq	%rsp, %rbp
 1339              	.LCFI37:
 1340              		.cfi_def_cfa_register 6
 1341 0008 4883EC30 		subq	$48, %rsp
 1342 000c 89F8     		movl	%edi, %eax
 1343 000e 488975E0 		movq	%rsi, -32(%rbp)
 1344 0012 488955D8 		movq	%rdx, -40(%rbp)
 1345 0016 8845EC   		movb	%al, -20(%rbp)
 1346              		.loc 2 514 1
 1347 0019 64488B04 		movq	%fs:40, %rax
 1347      25280000 
 1347      00
 1348 0022 488945F8 		movq	%rax, -8(%rbp)
 1349 0026 31C0     		xorl	%eax, %eax
 515:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* normal state, write character */
 516:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (SECUREC_IS_REST_BUF_ENOUGH(stream, 1)) { /* only one char */
 1350              		.loc 2 516 9
 1351 0028 488B45E0 		movq	-32(%rbp), %rax
 1352 002c 8B00     		movl	(%rax), %eax
 1353              		.loc 2 516 8
 1354 002e 85C0     		testl	%eax, %eax
 1355 0030 7E42     		jle	.L93
 517:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_SAFE_WRITE_CHAR(ch, stream, counter); /* char * cast to wchar * */
 1356              		.loc 2 517 9
 1357 0032 488B45E0 		movq	-32(%rbp), %rax
 1358 0036 488B4008 		movq	8(%rax), %rax
 1359 003a 0FB655EC 		movzbl	-20(%rbp), %edx
 1360 003e 8810     		movb	%dl, (%rax)
 1361 0040 488B45E0 		movq	-32(%rbp), %rax
 1362 0044 488B4008 		movq	8(%rax), %rax
 1363 0048 488D5001 		leaq	1(%rax), %rdx
 1364 004c 488B45E0 		movq	-32(%rbp), %rax
 1365 0050 48895008 		movq	%rdx, 8(%rax)
GAS LISTING /tmp/ccPPTXZA.s 			page 45


 1366 0054 488B45E0 		movq	-32(%rbp), %rax
 1367 0058 8B00     		movl	(%rax), %eax
 1368 005a 8D50FF   		leal	-1(%rax), %edx
 1369 005d 488B45E0 		movq	-32(%rbp), %rax
 1370 0061 8910     		movl	%edx, (%rax)
 1371 0063 488B45D8 		movq	-40(%rbp), %rax
 1372 0067 8B00     		movl	(%rax), %eax
 1373 0069 8D5001   		leal	1(%rax), %edx
 1374 006c 488B45D8 		movq	-40(%rbp), %rax
 1375 0070 8910     		movl	%edx, (%rax)
 518:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 519:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 520:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SecWriteCharW(ch, stream, counter);
 521:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 522:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* optimize function call to code */
 523:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *counter = -1;
 524:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         stream->count = -1;
 525:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 526:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 527:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1376              		.loc 2 527 1
 1377 0072 EB14     		jmp	.L96
 1378              	.L93:
 523:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         stream->count = -1;
 1379              		.loc 2 523 18
 1380 0074 488B45D8 		movq	-40(%rbp), %rax
 1381 0078 C700FFFF 		movl	$-1, (%rax)
 1381      FFFF
 524:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 1382              		.loc 2 524 23
 1383 007e 488B45E0 		movq	-32(%rbp), %rax
 1384 0082 C700FFFF 		movl	$-1, (%rax)
 1384      FFFF
 1385              	.L96:
 1386              		.loc 2 527 1
 1387 0088 90       		nop
 1388 0089 488B45F8 		movq	-8(%rbp), %rax
 1389 008d 64483304 		xorq	%fs:40, %rax
 1389      25280000 
 1389      00
 1390 0096 7405     		je	.L95
 1391 0098 E8000000 		call	__stack_chk_fail@PLT
 1391      00
 1392              	.L95:
 1393 009d C9       		leave
 1394              	.LCFI38:
 1395              		.cfi_def_cfa 7, 8
 1396 009e C3       		ret
 1397              		.cfi_endproc
 1398              	.LFE18:
 1400              		.section	.text.SecDecodePrecision,"ax",@progbits
 1402              	SecDecodePrecision:
 1403              	.LFB19:
 528:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 529:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 530:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Check precison in format
 531:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
GAS LISTING /tmp/ccPPTXZA.s 			page 46


 532:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodePrecision(SecChar ch, SecFormatAttr *formatAttr)
 533:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1404              		.loc 2 533 1
 1405              		.cfi_startproc
 1406 0000 F30F1EFA 		endbr64
 1407 0004 55       		pushq	%rbp
 1408              	.LCFI39:
 1409              		.cfi_def_cfa_offset 16
 1410              		.cfi_offset 6, -16
 1411 0005 4889E5   		movq	%rsp, %rbp
 1412              	.LCFI40:
 1413              		.cfi_def_cfa_register 6
 1414 0008 4883EC20 		subq	$32, %rsp
 1415 000c 89F8     		movl	%edi, %eax
 1416 000e 488975E0 		movq	%rsi, -32(%rbp)
 1417 0012 8845EC   		movb	%al, -20(%rbp)
 1418              		.loc 2 533 1
 1419 0015 64488B04 		movq	%fs:40, %rax
 1419      25280000 
 1419      00
 1420 001e 488945F8 		movq	%rax, -8(%rbp)
 1421 0022 31C0     		xorl	%eax, %eax
 534:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynPrecision == 0) {
 1422              		.loc 2 534 19
 1423 0024 488B45E0 		movq	-32(%rbp), %rax
 1424 0028 8B4014   		movl	20(%rax), %eax
 1425              		.loc 2 534 8
 1426 002b 85C0     		testl	%eax, %eax
 1427 002d 7545     		jne	.L98
 535:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* add digit to current precision */
 536:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (SECUREC_MUL_TEN_ADD_BEYOND_MAX(formatAttr->precision)) {
 1428              		.loc 2 536 13
 1429 002f 488B45E0 		movq	-32(%rbp), %rax
 1430 0033 8B4008   		movl	8(%rax), %eax
 1431              		.loc 2 536 12
 1432 0036 3D14AE47 		cmpl	$21474836, %eax
 1432      01
 1433 003b 7E07     		jle	.L99
 537:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1434              		.loc 2 537 20
 1435 003d B8FFFFFF 		movl	$-1, %eax
 1435      FF
 1436 0042 EB60     		jmp	.L100
 1437              	.L99:
 538:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 539:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatAttr->precision = (int)SECUREC_MUL_TEN((unsigned int)formatAttr->precision) +
 1438              		.loc 2 539 38
 1439 0044 488B45E0 		movq	-32(%rbp), %rax
 1440 0048 8B4008   		movl	8(%rax), %eax
 1441 004b 8D148500 		leal	0(,%rax,4), %edx
 1441      000000
 1442 0052 488B45E0 		movq	-32(%rbp), %rax
 1443 0056 8B4008   		movl	8(%rax), %eax
 1444 0059 01D0     		addl	%edx, %eax
 1445 005b 01C0     		addl	%eax, %eax
 1446              		.loc 2 539 33
 1447 005d 89C2     		movl	%eax, %edx
GAS LISTING /tmp/ccPPTXZA.s 			page 47


 540:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1448              		.loc 2 540 13
 1449 005f 0FB645EC 		movzbl	-20(%rbp), %eax
 1450 0063 83E830   		subl	$48, %eax
 1451 0066 0FB6C0   		movzbl	%al, %eax
 539:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1452              		.loc 2 539 91
 1453 0069 01C2     		addl	%eax, %edx
 539:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1454              		.loc 2 539 31
 1455 006b 488B45E0 		movq	-32(%rbp), %rax
 1456 006f 895008   		movl	%edx, 8(%rax)
 1457 0072 EB2B     		jmp	.L101
 1458              	.L98:
 541:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 542:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (formatAttr->precision < 0) {
 1459              		.loc 2 542 23
 1460 0074 488B45E0 		movq	-32(%rbp), %rax
 1461 0078 8B4008   		movl	8(%rax), %eax
 1462              		.loc 2 542 12
 1463 007b 85C0     		testl	%eax, %eax
 1464 007d 790B     		jns	.L102
 543:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->precision = -1;
 1465              		.loc 2 543 35
 1466 007f 488B45E0 		movq	-32(%rbp), %rax
 1467 0083 C74008FF 		movl	$-1, 8(%rax)
 1467      FFFFFF
 1468              	.L102:
 544:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 545:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (formatAttr->precision > SECUREC_MAX_WIDTH_LEN) {
 1469              		.loc 2 545 23
 1470 008a 488B45E0 		movq	-32(%rbp), %rax
 1471 008e 8B4008   		movl	8(%rax), %eax
 1472              		.loc 2 545 12
 1473 0091 3DC8CCCC 		cmpl	$214748360, %eax
 1473      0C
 1474 0096 7E07     		jle	.L101
 546:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1475              		.loc 2 546 20
 1476 0098 B8FFFFFF 		movl	$-1, %eax
 1476      FF
 1477 009d EB05     		jmp	.L100
 1478              	.L101:
 547:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 548:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 549:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 1479              		.loc 2 549 12
 1480 009f B8000000 		movl	$0, %eax
 1480      00
 1481              	.L100:
 550:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1482              		.loc 2 550 1
 1483 00a4 488B4DF8 		movq	-8(%rbp), %rcx
 1484 00a8 6448330C 		xorq	%fs:40, %rcx
 1484      25280000 
 1484      00
 1485 00b1 7405     		je	.L103
GAS LISTING /tmp/ccPPTXZA.s 			page 48


 1486 00b3 E8000000 		call	__stack_chk_fail@PLT
 1486      00
 1487              	.L103:
 1488 00b8 C9       		leave
 1489              	.LCFI41:
 1490              		.cfi_def_cfa 7, 8
 1491 00b9 C3       		ret
 1492              		.cfi_endproc
 1493              	.LFE19:
 1495              		.section	.text.SecDecodeWidth,"ax",@progbits
 1497              	SecDecodeWidth:
 1498              	.LFB20:
 551:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 552:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 553:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 554:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Check width in format
 555:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 556:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeWidth(SecChar ch, SecFormatAttr *formatAttr, SecFmtState lastState)
 557:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1499              		.loc 2 557 1
 1500              		.cfi_startproc
 1501 0000 F30F1EFA 		endbr64
 1502 0004 55       		pushq	%rbp
 1503              	.LCFI42:
 1504              		.cfi_def_cfa_offset 16
 1505              		.cfi_offset 6, -16
 1506 0005 4889E5   		movq	%rsp, %rbp
 1507              	.LCFI43:
 1508              		.cfi_def_cfa_register 6
 1509 0008 4883EC20 		subq	$32, %rsp
 1510 000c 89F8     		movl	%edi, %eax
 1511 000e 488975E0 		movq	%rsi, -32(%rbp)
 1512 0012 8955E8   		movl	%edx, -24(%rbp)
 1513 0015 8845EC   		movb	%al, -20(%rbp)
 1514              		.loc 2 557 1
 1515 0018 64488B04 		movq	%fs:40, %rax
 1515      25280000 
 1515      00
 1516 0021 488945F8 		movq	%rax, -8(%rbp)
 1517 0025 31C0     		xorl	%eax, %eax
 558:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynWidth == 0) {
 1518              		.loc 2 558 19
 1519 0027 488B45E0 		movq	-32(%rbp), %rax
 1520 002b 8B4010   		movl	16(%rax), %eax
 1521              		.loc 2 558 8
 1522 002e 85C0     		testl	%eax, %eax
 1523 0030 7556     		jne	.L105
 559:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (lastState != STAT_WIDTH) {
 1524              		.loc 2 559 12
 1525 0032 837DE803 		cmpl	$3, -24(%rbp)
 1526 0036 740B     		je	.L106
 560:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->fldWidth = 0;
 1527              		.loc 2 560 34
 1528 0038 488B45E0 		movq	-32(%rbp), %rax
 1529 003c C7400400 		movl	$0, 4(%rax)
 1529      000000
 1530              	.L106:
GAS LISTING /tmp/ccPPTXZA.s 			page 49


 561:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 562:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (SECUREC_MUL_TEN_ADD_BEYOND_MAX(formatAttr->fldWidth)) {
 1531              		.loc 2 562 13
 1532 0043 488B45E0 		movq	-32(%rbp), %rax
 1533 0047 8B4004   		movl	4(%rax), %eax
 1534              		.loc 2 562 12
 1535 004a 3D14AE47 		cmpl	$21474836, %eax
 1535      01
 1536 004f 7E07     		jle	.L107
 563:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1537              		.loc 2 563 20
 1538 0051 B8FFFFFF 		movl	$-1, %eax
 1538      FF
 1539 0056 EB78     		jmp	.L108
 1540              	.L107:
 564:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 565:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatAttr->fldWidth = (int)SECUREC_MUL_TEN((unsigned int)formatAttr->fldWidth) +
 1541              		.loc 2 565 37
 1542 0058 488B45E0 		movq	-32(%rbp), %rax
 1543 005c 8B4004   		movl	4(%rax), %eax
 1544 005f 8D148500 		leal	0(,%rax,4), %edx
 1544      000000
 1545 0066 488B45E0 		movq	-32(%rbp), %rax
 1546 006a 8B4004   		movl	4(%rax), %eax
 1547 006d 01D0     		addl	%edx, %eax
 1548 006f 01C0     		addl	%eax, %eax
 1549              		.loc 2 565 32
 1550 0071 89C2     		movl	%eax, %edx
 566:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1551              		.loc 2 566 13
 1552 0073 0FB645EC 		movzbl	-20(%rbp), %eax
 1553 0077 83E830   		subl	$48, %eax
 1554 007a 0FB6C0   		movzbl	%al, %eax
 565:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1555              		.loc 2 565 89
 1556 007d 01C2     		addl	%eax, %edx
 565:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1557              		.loc 2 565 30
 1558 007f 488B45E0 		movq	-32(%rbp), %rax
 1559 0083 895004   		movl	%edx, 4(%rax)
 1560 0086 EB43     		jmp	.L109
 1561              	.L105:
 567:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 568:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (formatAttr->fldWidth < 0) {
 1562              		.loc 2 568 23
 1563 0088 488B45E0 		movq	-32(%rbp), %rax
 1564 008c 8B4004   		movl	4(%rax), %eax
 1565              		.loc 2 568 12
 1566 008f 85C0     		testl	%eax, %eax
 1567 0091 7938     		jns	.L109
 569:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->flags |= SECUREC_FLAG_LEFT;
 1568              		.loc 2 569 31
 1569 0093 488B45E0 		movq	-32(%rbp), %rax
 1570 0097 8B00     		movl	(%rax), %eax
 1571 0099 83C804   		orl	$4, %eax
 1572 009c 89C2     		movl	%eax, %edx
 1573 009e 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 50


 1574 00a2 8910     		movl	%edx, (%rax)
 570:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->fldWidth = (-formatAttr->fldWidth);
 1575              		.loc 2 570 48
 1576 00a4 488B45E0 		movq	-32(%rbp), %rax
 1577 00a8 8B4004   		movl	4(%rax), %eax
 1578              		.loc 2 570 37
 1579 00ab F7D8     		negl	%eax
 1580 00ad 89C2     		movl	%eax, %edx
 1581              		.loc 2 570 34
 1582 00af 488B45E0 		movq	-32(%rbp), %rax
 1583 00b3 895004   		movl	%edx, 4(%rax)
 571:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (formatAttr->fldWidth > SECUREC_MAX_WIDTH_LEN) {
 1584              		.loc 2 571 27
 1585 00b6 488B45E0 		movq	-32(%rbp), %rax
 1586 00ba 8B4004   		movl	4(%rax), %eax
 1587              		.loc 2 571 16
 1588 00bd 3DC8CCCC 		cmpl	$214748360, %eax
 1588      0C
 1589 00c2 7E07     		jle	.L109
 572:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;
 1590              		.loc 2 572 24
 1591 00c4 B8FFFFFF 		movl	$-1, %eax
 1591      FF
 1592 00c9 EB05     		jmp	.L108
 1593              	.L109:
 573:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 574:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 575:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 576:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 1594              		.loc 2 576 12
 1595 00cb B8000000 		movl	$0, %eax
 1595      00
 1596              	.L108:
 577:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1597              		.loc 2 577 1
 1598 00d0 488B4DF8 		movq	-8(%rbp), %rcx
 1599 00d4 6448330C 		xorq	%fs:40, %rcx
 1599      25280000 
 1599      00
 1600 00dd 7405     		je	.L110
 1601 00df E8000000 		call	__stack_chk_fail@PLT
 1601      00
 1602              	.L110:
 1603 00e4 C9       		leave
 1604              	.LCFI44:
 1605              		.cfi_def_cfa 7, 8
 1606 00e5 C3       		ret
 1607              		.cfi_endproc
 1608              	.LFE20:
 1610              		.section	.text.SecOutputS,"ax",@progbits
 1612              	SecOutputS:
 1613              	.LFB21:
 578:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 579:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 580:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Formatting output core functions for wchar version.Called by a function such as vswprintf_s
 581:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * argList must not be declare as const
 582:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
GAS LISTING /tmp/ccPPTXZA.s 			page 51


 583:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecOutputSW(SecPrintfStream *stream, const wchar_t *cFormat, va_list argList)
 584:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 585:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 586:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Formatting output core functions for char version.Called by a function such as vsnprintf_s
 587:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 588:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecOutputS(SecPrintfStream *stream, const char *cFormat, va_list argList)
 589:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 590:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1614              		.loc 2 590 1
 1615              		.cfi_startproc
 1616 0000 F30F1EFA 		endbr64
 1617 0004 55       		pushq	%rbp
 1618              	.LCFI45:
 1619              		.cfi_def_cfa_offset 16
 1620              		.cfi_offset 6, -16
 1621 0005 4889E5   		movq	%rsp, %rbp
 1622              	.LCFI46:
 1623              		.cfi_def_cfa_register 6
 1624 0008 4881EC50 		subq	$848, %rsp
 1624      030000
 1625 000f 4889BDC8 		movq	%rdi, -824(%rbp)
 1625      FCFFFF
 1626 0016 4889B5C0 		movq	%rsi, -832(%rbp)
 1626      FCFFFF
 1627 001d 488995B8 		movq	%rdx, -840(%rbp)
 1627      FCFFFF
 1628              		.loc 2 590 1
 1629 0024 64488B04 		movq	%fs:40, %rax
 1629      25280000 
 1629      00
 1630 002d 488945F8 		movq	%rax, -8(%rbp)
 1631 0031 31C0     		xorl	%eax, %eax
 591:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     const SecChar *format = cFormat;
 1632              		.loc 2 591 20
 1633 0033 488B85C0 		movq	-832(%rbp), %rax
 1633      FCFFFF
 1634 003a 48898530 		movq	%rax, -720(%rbp)
 1634      FDFFFF
 592:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
 593:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     char *floatBuf = NULL;
 1635              		.loc 2 593 11
 1636 0041 48C78540 		movq	$0, -704(%rbp)
 1636      FDFFFF00 
 1636      000000
 594:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 595:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFormatBuf formatBuf;
 596:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     static const char *itoaUpperDigits = "0123456789ABCDEFX";
 597:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     static const char *itoaLowerDigits = "0123456789abcdefx";
 598:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     const char *digits = itoaUpperDigits;
 1637              		.loc 2 598 17
 1638 004c 488B0500 		movq	itoaUpperDigits.3563(%rip), %rax
 1638      000000
 1639 0053 48898548 		movq	%rax, -696(%rbp)
 1639      FDFFFF
 599:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     unsigned int radix = SECUREC_RADIX_DECIMAL;
 1640              		.loc 2 599 18
 1641 005a C785E4FC 		movl	$10, -796(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 52


 1641      FFFF0A00 
 1641      0000
 600:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int charsOut;               /* characters written */
 601:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int prefixLen = 0;  /* Must be initialized or compiler alerts */
 1642              		.loc 2 601 9
 1643 0064 C785E8FC 		movl	$0, -792(%rbp)
 1643      FFFF0000 
 1643      0000
 602:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int padding = 0;
 1644              		.loc 2 602 9
 1645 006e C7851CFD 		movl	$0, -740(%rbp)
 1645      FFFF0000 
 1645      0000
 603:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;                /* length of the text */
 604:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int noOutput = 0; /* Must be initialized or compiler alerts */
 1646              		.loc 2 604 9
 1647 0078 C785F0FC 		movl	$0, -784(%rbp)
 1647      FFFF0000 
 1647      0000
 605:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFmtState state;
 606:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFmtState lastState;
 607:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecChar prefix[SECUREC_PREFIX_LEN] = { 0 };
 1648              		.loc 2 607 13
 1649 0082 66C745DE 		movw	$0, -34(%rbp)
 1649      0000
 608:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecChar ch;                 /* currently read character */
 609:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     static const unsigned char stateTable[SECUREC_STATE_TABLE_SIZE] = {
 610:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* type 0:    nospecial meanin;
 611:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  1:   '%';
 612:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  2:    '.'
 613:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  3:    '*'
 614:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  4:    '0'
 615:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  5:    '1' ... '9'
 616:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  6:    ' ', '+', '-', '#'
 617:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  7:     'h', 'l', 'L', 'F', 'w' , 'N','z','q','t','j'
 618:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  8:     'd','o','u','i','x','X','e','f','g'
 619:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          */
 620:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 621:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 622:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x06, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x06, 0x02, 0
 623:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 624:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0x07, 0
 625:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0
 626:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x08, 0x07, 0x00, 0x07, 0x00, 0x00, 0
 627:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x08, 0x07, 0x00, 0x08, 0x07, 0x08, 0x00, 0x07, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0
 628:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* fill zero  for normal char 128 byte for 0x80 - 0xff */
 629:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 630:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 631:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 632:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 633:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 634:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 635:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 636:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 637:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* state  0: normal
 638:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  1: percent
 639:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  2: flag
GAS LISTING /tmp/ccPPTXZA.s 			page 53


 640:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  3: width
 641:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  4: dot
 642:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  5: precis
 643:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  6: size
 644:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  7: type
 645:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  8: invalid
 646:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          */
 647:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x08, 0x08, 0
 648:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x01, 0x00, 0x00, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x03, 0x03, 0x08, 0
 649:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x08, 0x08, 0x00, 0x00, 0x00, 0x02, 0x02, 0x03, 0x05, 0x05, 0x08, 0x00, 0x00, 0x00, 0x03, 0
 650:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x03, 0x05, 0x05, 0x08, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x08, 0x08, 0x08, 0x00, 0x00, 0
 651:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0
 652:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00
 653:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     };
 654:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 655:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFormatAttr formatAttr;
 656:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecBuffer buffer;
 657:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.flags = 0;
 1650              		.loc 2 657 22
 1651 0088 C785B0FD 		movl	$0, -592(%rbp)
 1651      FFFF0000 
 1651      0000
 658:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.bufferIsWide = 0;    /* flag for buffer contains wide chars */
 1652              		.loc 2 658 29
 1653 0092 C785BCFD 		movl	$0, -580(%rbp)
 1653      FFFF0000 
 1653      0000
 659:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.fldWidth = 0;
 1654              		.loc 2 659 25
 1655 009c C785B4FD 		movl	$0, -588(%rbp)
 1655      FFFF0000 
 1655      0000
 660:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.precision = 0;
 1656              		.loc 2 660 26
 1657 00a6 C785B8FD 		movl	$0, -584(%rbp)
 1657      FFFF0000 
 1657      0000
 661:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.dynWidth = 0;
 1658              		.loc 2 661 25
 1659 00b0 C785C0FD 		movl	$0, -576(%rbp)
 1659      FFFF0000 
 1659      0000
 662:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.dynPrecision = 0;
 1660              		.loc 2 662 29
 1661 00ba C785C4FD 		movl	$0, -572(%rbp)
 1661      FFFF0000 
 1661      0000
 663:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     charsOut = 0;
 1662              		.loc 2 663 14
 1663 00c4 C785E0FC 		movl	$0, -800(%rbp)
 1663      FFFF0000 
 1663      0000
 664:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     textLen = 0;
 1664              		.loc 2 664 13
 1665 00ce C785ECFC 		movl	$0, -788(%rbp)
 1665      FFFF0000 
 1665      0000
GAS LISTING /tmp/ccPPTXZA.s 			page 54


 665:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     state = STAT_NORMAL;        /* starting state */
 1666              		.loc 2 665 11
 1667 00d8 C785F4FC 		movl	$0, -780(%rbp)
 1667      FFFF0000 
 1667      0000
 666:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatBuf.str = NULL;
 1668              		.loc 2 666 19
 1669 00e2 48C78538 		movq	$0, -712(%rbp)
 1669      FDFFFF00 
 1669      000000
 667:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 668:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* loop each format character */
 669:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* remove format != NULL */
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     while ((ch = *format) != SECUREC_CHAR('\0') && charsOut >= 0) {
 1670              		.loc 2 670 11
 1671 00ed E9B71B00 		jmp	.L112
 1671      00
 1672              	.L288:
 671:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 1673              		.loc 2 671 9
 1674 00f2 488B8530 		movq	-720(%rbp), %rax
 1674      FDFFFF
 1675 00f9 4883C001 		addq	$1, %rax
 1676 00fd 48898530 		movq	%rax, -720(%rbp)
 1676      FDFFFF
 672:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         lastState = state;
 1677              		.loc 2 672 19
 1678 0104 8B85F4FC 		movl	-780(%rbp), %eax
 1678      FFFF
 1679 010a 898520FD 		movl	%eax, -736(%rbp)
 1679      FFFF
 673:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         state = SECUREC_DECODE_STATE(ch, stateTable, lastState);
 1680              		.loc 2 673 17
 1681 0110 0FB685DE 		movzbl	-802(%rbp), %eax
 1681      FCFFFF
 1682 0117 0FB6C0   		movzbl	%al, %eax
 1683 011a 4898     		cltq
 1684 011c 488D1500 		leaq	stateTable.3576(%rip), %rdx
 1684      000000
 1685 0123 0FB60410 		movzbl	(%rax,%rdx), %eax
 1686 0127 0FB6D0   		movzbl	%al, %edx
 1687 012a 89D0     		movl	%edx, %eax
 1688 012c C1E003   		sall	$3, %eax
 1689 012f 01C2     		addl	%eax, %edx
 1690 0131 8B8520FD 		movl	-736(%rbp), %eax
 1690      FFFF
 1691 0137 0FB6C0   		movzbl	%al, %eax
 1692 013a 01D0     		addl	%edx, %eax
 1693 013c 05000100 		addl	$256, %eax
 1693      00
 1694 0141 4898     		cltq
 1695 0143 488D1500 		leaq	stateTable.3576(%rip), %rdx
 1695      000000
 1696 014a 0FB60410 		movzbl	(%rax,%rdx), %eax
 1697              		.loc 2 673 15
 1698 014e 0FB6C0   		movzbl	%al, %eax
 1699 0151 8985F4FC 		movl	%eax, -780(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 55


 1699      FFFF
 1700 0157 83BDF4FC 		cmpl	$8, -780(%rbp)
 1700      FFFF08
 1701 015e 0F873E1B 		ja	.L113
 1701      0000
 1702 0164 8B85F4FC 		movl	-780(%rbp), %eax
 1702      FFFF
 1703 016a 488D1485 		leaq	0(,%rax,4), %rdx
 1703      00000000 
 1704 0172 488D0500 		leaq	.L115(%rip), %rax
 1704      000000
 1705 0179 8B0402   		movl	(%rdx,%rax), %eax
 1706 017c 4898     		cltq
 1707 017e 488D1500 		leaq	.L115(%rip), %rdx
 1707      000000
 1708 0185 4801D0   		addq	%rdx, %rax
 1709 0188 3EFFE0   		notrack jmp	*%rax
 1710              		.section	.rodata.SecOutputS,"a",@progbits
 1711              		.align 4
 1712              		.align 4
 1713              	.L115:
 1714 0000 00000000 		.long	.L123-.L115
 1715 0004 00000000 		.long	.L122-.L115
 1716 0008 00000000 		.long	.L121-.L115
 1717 000c 00000000 		.long	.L120-.L115
 1718 0010 00000000 		.long	.L119-.L115
 1719 0014 00000000 		.long	.L118-.L115
 1720 0018 00000000 		.long	.L117-.L115
 1721 001c 00000000 		.long	.L116-.L115
 1722 0020 00000000 		.long	.L114-.L115
 1723              		.section	.text.SecOutputS
 1724              	.L123:
 674:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         switch (state) {
 675:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_NORMAL:
 676:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 SecOutputOneChar(ch, stream, &charsOut);
 1725              		.loc 2 676 17
 1726 018b 0FBE85DE 		movsbl	-802(%rbp), %eax
 1726      FCFFFF
 1727 0192 488D95E0 		leaq	-800(%rbp), %rdx
 1727      FCFFFF
 1728 0199 488B8DC8 		movq	-824(%rbp), %rcx
 1728      FCFFFF
 1729 01a0 4889CE   		movq	%rcx, %rsi
 1730 01a3 89C7     		movl	%eax, %edi
 1731 01a5 E8000000 		call	SecOutputOneChar
 1731      00
 677:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 continue;
 1732              		.loc 2 677 17
 1733 01aa E9FA1A00 		jmp	.L112
 1733      00
 1734              	.L122:
 678:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_PERCENT:
 679:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* set default values */
 680:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 prefixLen = 0;
 1735              		.loc 2 680 27
 1736 01af C785E8FC 		movl	$0, -792(%rbp)
 1736      FFFF0000 
GAS LISTING /tmp/ccPPTXZA.s 			page 56


 1736      0000
 681:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 noOutput = 0;
 1737              		.loc 2 681 26
 1738 01b9 C785F0FC 		movl	$0, -784(%rbp)
 1738      FFFF0000 
 1738      0000
 682:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.flags = 0;
 1739              		.loc 2 682 34
 1740 01c3 C785B0FD 		movl	$0, -592(%rbp)
 1740      FFFF0000 
 1740      0000
 683:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.fldWidth = 0;
 1741              		.loc 2 683 37
 1742 01cd C785B4FD 		movl	$0, -588(%rbp)
 1742      FFFF0000 
 1742      0000
 684:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.precision = -1;
 1743              		.loc 2 684 38
 1744 01d7 C785B8FD 		movl	$-1, -584(%rbp)
 1744      FFFFFFFF 
 1744      FFFF
 685:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.bufferIsWide = 0;
 1745              		.loc 2 685 41
 1746 01e1 C785BCFD 		movl	$0, -580(%rbp)
 1746      FFFF0000 
 1746      0000
 686:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.dynWidth = 0;
 1747              		.loc 2 686 37
 1748 01eb C785C0FD 		movl	$0, -576(%rbp)
 1748      FFFF0000 
 1748      0000
 687:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.dynPrecision = 0;
 1749              		.loc 2 687 41
 1750 01f5 C785C4FD 		movl	$0, -572(%rbp)
 1750      FFFF0000 
 1750      0000
 688:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 1751              		.loc 2 688 17
 1752 01ff E9A51A00 		jmp	.L112
 1752      00
 1753              	.L121:
 689:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_FLAG:
 690:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* set flag based on which flag character */
 691:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 SecDecodeFlags(ch, &formatAttr);
 1754              		.loc 2 691 17
 1755 0204 0FBE85DE 		movsbl	-802(%rbp), %eax
 1755      FCFFFF
 1756 020b 488D95B0 		leaq	-592(%rbp), %rdx
 1756      FDFFFF
 1757 0212 4889D6   		movq	%rdx, %rsi
 1758 0215 89C7     		movl	%eax, %edi
 1759 0217 E8000000 		call	SecDecodeFlags
 1759      00
 692:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 1760              		.loc 2 692 17
 1761 021c E9881A00 		jmp	.L112
 1761      00
GAS LISTING /tmp/ccPPTXZA.s 			page 57


 1762              	.L120:
 693:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_WIDTH:
 694:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* update width value */
 695:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (ch == SECUREC_CHAR('*')) {
 1763              		.loc 2 695 20
 1764 0221 80BDDEFC 		cmpb	$42, -802(%rbp)
 1764      FFFF2A
 1765 0228 756C     		jne	.L124
 696:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* get width */
 697:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.fldWidth = (int)va_arg(argList, int);
 1766              		.loc 2 697 43
 1767 022a 488B85B8 		movq	-840(%rbp), %rax
 1767      FCFFFF
 1768 0231 8B00     		movl	(%rax), %eax
 1769 0233 83F82F   		cmpl	$47, %eax
 1770 0236 7730     		ja	.L125
 1771 0238 488B85B8 		movq	-840(%rbp), %rax
 1771      FCFFFF
 1772 023f 488B5010 		movq	16(%rax), %rdx
 1773 0243 488B85B8 		movq	-840(%rbp), %rax
 1773      FCFFFF
 1774 024a 8B00     		movl	(%rax), %eax
 1775 024c 89C0     		movl	%eax, %eax
 1776 024e 4801D0   		addq	%rdx, %rax
 1777 0251 488B95B8 		movq	-840(%rbp), %rdx
 1777      FCFFFF
 1778 0258 8B12     		movl	(%rdx), %edx
 1779 025a 8D4A08   		leal	8(%rdx), %ecx
 1780 025d 488B95B8 		movq	-840(%rbp), %rdx
 1780      FCFFFF
 1781 0264 890A     		movl	%ecx, (%rdx)
 1782 0266 EB1A     		jmp	.L126
 1783              	.L125:
 1784 0268 488B85B8 		movq	-840(%rbp), %rax
 1784      FCFFFF
 1785 026f 488B4008 		movq	8(%rax), %rax
 1786 0273 488D4808 		leaq	8(%rax), %rcx
 1787 0277 488B95B8 		movq	-840(%rbp), %rdx
 1787      FCFFFF
 1788 027e 48894A08 		movq	%rcx, 8(%rdx)
 1789              	.L126:
 1790 0282 8B00     		movl	(%rax), %eax
 1791              		.loc 2 697 41
 1792 0284 8985B4FD 		movl	%eax, -588(%rbp)
 1792      FFFF
 698:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynWidth = 1;
 1793              		.loc 2 698 41
 1794 028a C785C0FD 		movl	$1, -576(%rbp)
 1794      FFFF0100 
 1794      0000
 1795 0294 EB0A     		jmp	.L127
 1796              	.L124:
 699:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 } else {
 700:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynWidth = 0;
 1797              		.loc 2 700 41
 1798 0296 C785C0FD 		movl	$0, -576(%rbp)
 1798      FFFF0000 
GAS LISTING /tmp/ccPPTXZA.s 			page 58


 1798      0000
 1799              	.L127:
 701:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 702:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (SecDecodeWidth(ch, &formatAttr, lastState) != 0) {
 1800              		.loc 2 702 21
 1801 02a0 0FBE85DE 		movsbl	-802(%rbp), %eax
 1801      FCFFFF
 1802 02a7 8B9520FD 		movl	-736(%rbp), %edx
 1802      FFFF
 1803 02ad 488D8DB0 		leaq	-592(%rbp), %rcx
 1803      FDFFFF
 1804 02b4 4889CE   		movq	%rcx, %rsi
 1805 02b7 89C7     		movl	%eax, %edi
 1806 02b9 E8000000 		call	SecDecodeWidth
 1806      00
 1807              		.loc 2 702 20
 1808 02be 85C0     		testl	%eax, %eax
 1809 02c0 0F84E319 		je	.L112
 1809      0000
 703:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     return -1;
 1810              		.loc 2 703 28
 1811 02c6 B8FFFFFF 		movl	$-1, %eax
 1811      FF
 1812 02cb E91F1A00 		jmp	.L290
 1812      00
 1813              	.L119:
 704:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 705:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 706:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_DOT:
 707:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.precision = 0;
 1814              		.loc 2 707 38
 1815 02d0 C785B8FD 		movl	$0, -584(%rbp)
 1815      FFFF0000 
 1815      0000
 708:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 1816              		.loc 2 708 17
 1817 02da E9CA1900 		jmp	.L112
 1817      00
 1818              	.L118:
 709:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_PRECIS:
 710:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* update precison value */
 711:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (ch == SECUREC_CHAR('*')) {
 1819              		.loc 2 711 20
 1820 02df 80BDDEFC 		cmpb	$42, -802(%rbp)
 1820      FFFF2A
 1821 02e6 756C     		jne	.L130
 712:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* get precision from arg list */
 713:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.precision = (int)va_arg(argList, int);
 1822              		.loc 2 713 44
 1823 02e8 488B85B8 		movq	-840(%rbp), %rax
 1823      FCFFFF
 1824 02ef 8B00     		movl	(%rax), %eax
 1825 02f1 83F82F   		cmpl	$47, %eax
 1826 02f4 7730     		ja	.L131
 1827 02f6 488B85B8 		movq	-840(%rbp), %rax
 1827      FCFFFF
 1828 02fd 488B5010 		movq	16(%rax), %rdx
GAS LISTING /tmp/ccPPTXZA.s 			page 59


 1829 0301 488B85B8 		movq	-840(%rbp), %rax
 1829      FCFFFF
 1830 0308 8B00     		movl	(%rax), %eax
 1831 030a 89C0     		movl	%eax, %eax
 1832 030c 4801D0   		addq	%rdx, %rax
 1833 030f 488B95B8 		movq	-840(%rbp), %rdx
 1833      FCFFFF
 1834 0316 8B12     		movl	(%rdx), %edx
 1835 0318 8D4A08   		leal	8(%rdx), %ecx
 1836 031b 488B95B8 		movq	-840(%rbp), %rdx
 1836      FCFFFF
 1837 0322 890A     		movl	%ecx, (%rdx)
 1838 0324 EB1A     		jmp	.L132
 1839              	.L131:
 1840 0326 488B85B8 		movq	-840(%rbp), %rax
 1840      FCFFFF
 1841 032d 488B4008 		movq	8(%rax), %rax
 1842 0331 488D4808 		leaq	8(%rax), %rcx
 1843 0335 488B95B8 		movq	-840(%rbp), %rdx
 1843      FCFFFF
 1844 033c 48894A08 		movq	%rcx, 8(%rdx)
 1845              	.L132:
 1846 0340 8B00     		movl	(%rax), %eax
 1847              		.loc 2 713 42
 1848 0342 8985B8FD 		movl	%eax, -584(%rbp)
 1848      FFFF
 714:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynPrecision = 1;
 1849              		.loc 2 714 45
 1850 0348 C785C4FD 		movl	$1, -572(%rbp)
 1850      FFFF0100 
 1850      0000
 1851 0352 EB0A     		jmp	.L133
 1852              	.L130:
 715:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 } else {
 716:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynPrecision = 0;
 1853              		.loc 2 716 45
 1854 0354 C785C4FD 		movl	$0, -572(%rbp)
 1854      FFFF0000 
 1854      0000
 1855              	.L133:
 717:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 718:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (SecDecodePrecision(ch, &formatAttr) != 0) {
 1856              		.loc 2 718 21
 1857 035e 0FBE85DE 		movsbl	-802(%rbp), %eax
 1857      FCFFFF
 1858 0365 488D95B0 		leaq	-592(%rbp), %rdx
 1858      FDFFFF
 1859 036c 4889D6   		movq	%rdx, %rsi
 1860 036f 89C7     		movl	%eax, %edi
 1861 0371 E8000000 		call	SecDecodePrecision
 1861      00
 1862              		.loc 2 718 20
 1863 0376 85C0     		testl	%eax, %eax
 1864 0378 0F842B19 		je	.L112
 1864      0000
 719:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     return -1;
 1865              		.loc 2 719 28
GAS LISTING /tmp/ccPPTXZA.s 			page 60


 1866 037e B8FFFFFF 		movl	$-1, %eax
 1866      FF
 1867 0383 E9671900 		jmp	.L290
 1867      00
 1868              	.L117:
 720:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 721:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 722:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_SIZE:
 723:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* read a size specifier, set the formatAttr.flags based on it */
 724:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (SecDecodeSize(ch, &formatAttr, &format) != 0) {
 1869              		.loc 2 724 21
 1870 0388 0FBE85DE 		movsbl	-802(%rbp), %eax
 1870      FCFFFF
 1871 038f 488D9530 		leaq	-720(%rbp), %rdx
 1871      FDFFFF
 1872 0396 488D8DB0 		leaq	-592(%rbp), %rcx
 1872      FDFFFF
 1873 039d 4889CE   		movq	%rcx, %rsi
 1874 03a0 89C7     		movl	%eax, %edi
 1875 03a2 E8000000 		call	SecDecodeSize
 1875      00
 1876              		.loc 2 724 20
 1877 03a7 85C0     		testl	%eax, %eax
 1878 03a9 0F84FA18 		je	.L112
 1878      0000
 725:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* Compatibility  code for "%I" just print I */
 726:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     SecOutputOneChar(ch, stream, &charsOut);
 1879              		.loc 2 726 21
 1880 03af 0FBE85DE 		movsbl	-802(%rbp), %eax
 1880      FCFFFF
 1881 03b6 488D95E0 		leaq	-800(%rbp), %rdx
 1881      FCFFFF
 1882 03bd 488B8DC8 		movq	-824(%rbp), %rcx
 1882      FCFFFF
 1883 03c4 4889CE   		movq	%rcx, %rsi
 1884 03c7 89C7     		movl	%eax, %edi
 1885 03c9 E8000000 		call	SecOutputOneChar
 1885      00
 727:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     state = STAT_NORMAL;
 1886              		.loc 2 727 27
 1887 03ce C785F4FC 		movl	$0, -780(%rbp)
 1887      FFFF0000 
 1887      0000
 728:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     continue;
 1888              		.loc 2 728 21
 1889 03d8 E9CC1800 		jmp	.L112
 1889      00
 1890              	.L116:
 729:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 730:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 731:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_TYPE:
 732:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 switch (ch) {
 1891              		.loc 2 732 17
 1892 03dd 0FBE85DE 		movsbl	-802(%rbp), %eax
 1892      FCFFFF
 1893 03e4 83E841   		subl	$65, %eax
 1894 03e7 83F837   		cmpl	$55, %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 61


 1895 03ea 0F87E111 		ja	.L292
 1895      0000
 1896 03f0 89C0     		movl	%eax, %eax
 1897 03f2 488D1485 		leaq	0(,%rax,4), %rdx
 1897      00000000 
 1898 03fa 488D0500 		leaq	.L138(%rip), %rax
 1898      000000
 1899 0401 8B0402   		movl	(%rdx,%rax), %eax
 1900 0404 4898     		cltq
 1901 0406 488D1500 		leaq	.L138(%rip), %rdx
 1901      000000
 1902 040d 4801D0   		addq	%rdx, %rax
 1903 0410 3EFFE0   		notrack jmp	*%rax
 1904              		.section	.rodata.SecOutputS
 1905              		.align 4
 1906              		.align 4
 1907              	.L138:
 1908 0024 00000000 		.long	.L145-.L138
 1909 0028 00000000 		.long	.L292-.L138
 1910 002c 00000000 		.long	.L146-.L138
 1911 0030 00000000 		.long	.L292-.L138
 1912 0034 00000000 		.long	.L145-.L138
 1913 0038 00000000 		.long	.L145-.L138
 1914 003c 00000000 		.long	.L145-.L138
 1915 0040 00000000 		.long	.L292-.L138
 1916 0044 00000000 		.long	.L292-.L138
 1917 0048 00000000 		.long	.L292-.L138
 1918 004c 00000000 		.long	.L292-.L138
 1919 0050 00000000 		.long	.L292-.L138
 1920 0054 00000000 		.long	.L292-.L138
 1921 0058 00000000 		.long	.L292-.L138
 1922 005c 00000000 		.long	.L292-.L138
 1923 0060 00000000 		.long	.L292-.L138
 1924 0064 00000000 		.long	.L292-.L138
 1925 0068 00000000 		.long	.L292-.L138
 1926 006c 00000000 		.long	.L144-.L138
 1927 0070 00000000 		.long	.L292-.L138
 1928 0074 00000000 		.long	.L292-.L138
 1929 0078 00000000 		.long	.L292-.L138
 1930 007c 00000000 		.long	.L292-.L138
 1931 0080 00000000 		.long	.L137-.L138
 1932 0084 00000000 		.long	.L292-.L138
 1933 0088 00000000 		.long	.L292-.L138
 1934 008c 00000000 		.long	.L292-.L138
 1935 0090 00000000 		.long	.L292-.L138
 1936 0094 00000000 		.long	.L292-.L138
 1937 0098 00000000 		.long	.L292-.L138
 1938 009c 00000000 		.long	.L292-.L138
 1939 00a0 00000000 		.long	.L292-.L138
 1940 00a4 00000000 		.long	.L142-.L138
 1941 00a8 00000000 		.long	.L292-.L138
 1942 00ac 00000000 		.long	.L143-.L138
 1943 00b0 00000000 		.long	.L139-.L138
 1944 00b4 00000000 		.long	.L142-.L138
 1945 00b8 00000000 		.long	.L142-.L138
 1946 00bc 00000000 		.long	.L142-.L138
 1947 00c0 00000000 		.long	.L292-.L138
GAS LISTING /tmp/ccPPTXZA.s 			page 62


 1948 00c4 00000000 		.long	.L139-.L138
 1949 00c8 00000000 		.long	.L292-.L138
 1950 00cc 00000000 		.long	.L292-.L138
 1951 00d0 00000000 		.long	.L292-.L138
 1952 00d4 00000000 		.long	.L292-.L138
 1953 00d8 00000000 		.long	.L141-.L138
 1954 00dc 00000000 		.long	.L139-.L138
 1955 00e0 00000000 		.long	.L137-.L138
 1956 00e4 00000000 		.long	.L292-.L138
 1957 00e8 00000000 		.long	.L292-.L138
 1958 00ec 00000000 		.long	.L140-.L138
 1959 00f0 00000000 		.long	.L292-.L138
 1960 00f4 00000000 		.long	.L139-.L138
 1961 00f8 00000000 		.long	.L292-.L138
 1962 00fc 00000000 		.long	.L292-.L138
 1963 0100 00000000 		.long	.L137-.L138
 1964              		.section	.text.SecOutputS
 1965              	.L146:
 733:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('C'):
 734:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* wide char */
 735:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (!(formatAttr.flags & (SECUREC_FLAG_SHORT | SECUREC_FLAG_LONG | SECUREC_
 1966              		.loc 2 735 41
 1967 0413 8B85B0FD 		movl	-592(%rbp), %eax
 1967      FFFF
 1968              		.loc 2 735 48
 1969 0419 25300800 		andl	$2096, %eax
 1969      00
 1970              		.loc 2 735 28
 1971 041e 85C0     		testl	%eax, %eax
 1972 0420 750F     		jne	.L143
 736:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 737:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_SHORT;
 738:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 739:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_WIDECHAR;
 1973              		.loc 2 739 46
 1974 0422 8B85B0FD 		movl	-592(%rbp), %eax
 1974      FFFF
 1975 0428 80CC08   		orb	$8, %ah
 1976 042b 8985B0FD 		movl	%eax, -592(%rbp)
 1976      FFFF
 1977              	.L143:
 1978              	.LBB6:
 740:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 741:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 742:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */
 743:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* FALLTHRU */
 744:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('c'):
 745:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
 746:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             unsigned int cValue = (unsigned int)va_arg(argList, int);
 1979              		.loc 2 746 65
 1980 0431 488B85B8 		movq	-840(%rbp), %rax
 1980      FCFFFF
 1981 0438 8B00     		movl	(%rax), %eax
 1982 043a 83F82F   		cmpl	$47, %eax
 1983 043d 7730     		ja	.L147
 1984 043f 488B85B8 		movq	-840(%rbp), %rax
 1984      FCFFFF
GAS LISTING /tmp/ccPPTXZA.s 			page 63


 1985 0446 488B5010 		movq	16(%rax), %rdx
 1986 044a 488B85B8 		movq	-840(%rbp), %rax
 1986      FCFFFF
 1987 0451 8B00     		movl	(%rax), %eax
 1988 0453 89C0     		movl	%eax, %eax
 1989 0455 4801D0   		addq	%rdx, %rax
 1990 0458 488B95B8 		movq	-840(%rbp), %rdx
 1990      FCFFFF
 1991 045f 8B12     		movl	(%rdx), %edx
 1992 0461 8D4A08   		leal	8(%rdx), %ecx
 1993 0464 488B95B8 		movq	-840(%rbp), %rdx
 1993      FCFFFF
 1994 046b 890A     		movl	%ecx, (%rdx)
 1995 046d EB1A     		jmp	.L148
 1996              	.L147:
 1997 046f 488B85B8 		movq	-840(%rbp), %rax
 1997      FCFFFF
 1998 0476 488B4008 		movq	8(%rax), %rax
 1999 047a 488D4808 		leaq	8(%rax), %rcx
 2000 047e 488B95B8 		movq	-840(%rbp), %rdx
 2000      FCFFFF
 2001 0485 48894A08 		movq	%rcx, 8(%rdx)
 2002              	.L148:
 2003 0489 8B00     		movl	(%rax), %eax
 2004              		.loc 2 746 42
 2005 048b 898524FD 		movl	%eax, -732(%rbp)
 2005      FFFF
 747:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             textLen = SecDecodeTypeC(&formatAttr, cValue, &formatBuf, &buffer);
 2006              		.loc 2 747 39
 2007 0491 488D8DD0 		leaq	-560(%rbp), %rcx
 2007      FDFFFF
 2008 0498 488D9538 		leaq	-712(%rbp), %rdx
 2008      FDFFFF
 2009 049f 8BB524FD 		movl	-732(%rbp), %esi
 2009      FFFF
 2010 04a5 488D85B0 		leaq	-592(%rbp), %rax
 2010      FDFFFF
 2011 04ac 4889C7   		movq	%rax, %rdi
 2012 04af E8000000 		call	SecDecodeTypeC
 2012      00
 2013 04b4 8985ECFC 		movl	%eax, -788(%rbp)
 2013      FFFF
 748:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (textLen < 0) {
 2014              		.loc 2 748 32
 2015 04ba 83BDECFC 		cmpl	$0, -788(%rbp)
 2015      FFFF00
 2016 04c1 0F890D11 		jns	.L293
 2016      0000
 749:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 noOutput = 1;
 2017              		.loc 2 749 42
 2018 04c7 C785F0FC 		movl	$1, -784(%rbp)
 2018      FFFF0100 
 2018      0000
 2019              	.LBE6:
 750:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 751:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
 752:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
GAS LISTING /tmp/ccPPTXZA.s 			page 64


 2020              		.loc 2 752 25
 2021 04d1 E9FE1000 		jmp	.L293
 2021      00
 2022              	.L144:
 753:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('S'):    /* wide char string */
 754:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (!(formatAttr.flags & (SECUREC_FLAG_SHORT | SECUREC_FLAG_LONG | SECUREC_
 2023              		.loc 2 754 41
 2024 04d6 8B85B0FD 		movl	-592(%rbp), %eax
 2024      FFFF
 2025              		.loc 2 754 48
 2026 04dc 25300800 		andl	$2096, %eax
 2026      00
 2027              		.loc 2 754 28
 2028 04e1 85C0     		testl	%eax, %eax
 2029 04e3 750F     		jne	.L140
 755:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifndef SECUREC_FOR_WCHAR
 756:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_WIDECHAR;
 2030              		.loc 2 756 46
 2031 04e5 8B85B0FD 		movl	-592(%rbp), %eax
 2031      FFFF
 2032 04eb 80CC08   		orb	$8, %ah
 2033 04ee 8985B0FD 		movl	%eax, -592(%rbp)
 2033      FFFF
 2034              	.L140:
 2035              	.LBB7:
 757:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 758:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_SHORT;
 759:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 760:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 761:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */
 762:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* FALLTHRU */
 763:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('s'):
 764:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
 765:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             char *argPtr = (char *)va_arg(argList, char *);
 2036              		.loc 2 765 35
 2037 04f4 488B85B8 		movq	-840(%rbp), %rax
 2037      FCFFFF
 2038 04fb 8B00     		movl	(%rax), %eax
 2039 04fd 83F82F   		cmpl	$47, %eax
 2040 0500 7730     		ja	.L151
 2041 0502 488B85B8 		movq	-840(%rbp), %rax
 2041      FCFFFF
 2042 0509 488B5010 		movq	16(%rax), %rdx
 2043 050d 488B85B8 		movq	-840(%rbp), %rax
 2043      FCFFFF
 2044 0514 8B00     		movl	(%rax), %eax
 2045 0516 89C0     		movl	%eax, %eax
 2046 0518 4801D0   		addq	%rdx, %rax
 2047 051b 488B95B8 		movq	-840(%rbp), %rdx
 2047      FCFFFF
 2048 0522 8B12     		movl	(%rdx), %edx
 2049 0524 8D4A08   		leal	8(%rdx), %ecx
 2050 0527 488B95B8 		movq	-840(%rbp), %rdx
 2050      FCFFFF
 2051 052e 890A     		movl	%ecx, (%rdx)
 2052 0530 EB1A     		jmp	.L152
 2053              	.L151:
GAS LISTING /tmp/ccPPTXZA.s 			page 65


 2054 0532 488B85B8 		movq	-840(%rbp), %rax
 2054      FCFFFF
 2055 0539 488B4008 		movq	8(%rax), %rax
 2056 053d 488D4808 		leaq	8(%rax), %rcx
 2057 0541 488B95B8 		movq	-840(%rbp), %rdx
 2057      FCFFFF
 2058 0548 48894A08 		movq	%rcx, 8(%rdx)
 2059              	.L152:
 2060 054c 488B00   		movq	(%rax), %rax
 2061 054f 48898590 		movq	%rax, -624(%rbp)
 2061      FDFFFF
 766:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             textLen = SecDecodeTypeS(&formatAttr, argPtr, &formatBuf);
 2062              		.loc 2 766 39
 2063 0556 488D9538 		leaq	-712(%rbp), %rdx
 2063      FDFFFF
 2064 055d 488B8D90 		movq	-624(%rbp), %rcx
 2064      FDFFFF
 2065 0564 488D85B0 		leaq	-592(%rbp), %rax
 2065      FDFFFF
 2066 056b 4889CE   		movq	%rcx, %rsi
 2067 056e 4889C7   		movq	%rax, %rdi
 2068 0571 E8000000 		call	SecDecodeTypeS
 2068      00
 2069 0576 8985ECFC 		movl	%eax, -788(%rbp)
 2069      FFFF
 2070              	.LBE7:
 767:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
 768:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 2071              		.loc 2 768 25
 2072 057c E9571000 		jmp	.L150
 2072      00
 2073              	.L141:
 769:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('n'):
 770:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* higher risk disable it */
 771:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         return -1;
 2074              		.loc 2 771 32
 2075 0581 B8FFFFFF 		movl	$-1, %eax
 2075      FF
 2076 0586 E9641700 		jmp	.L290
 2076      00
 2077              	.L145:
 772:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('E'):    /* fall-through */ /* FALLTHRU */
 773:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('F'):    /* fall-through */ /* FALLTHRU */
 774:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('G'):    /* fall-through */ /* FALLTHRU */
 775:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('A'):    /* fall-through */ /* FALLTHRU */
 776:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* convert format char to lower , use Explicit conversion to clean up compi
 777:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         ch = (SecChar)(ch + ((SecChar)(SECUREC_CHAR('a')) - (SECUREC_CHAR('A'))));
 2078              		.loc 2 777 43
 2079 058b 0FB685DE 		movzbl	-802(%rbp), %eax
 2079      FCFFFF
 2080 0592 83C020   		addl	$32, %eax
 2081              		.loc 2 777 28
 2082 0595 8885DEFC 		movb	%al, -802(%rbp)
 2082      FFFF
 2083              	.L142:
 2084              	.LBB8:
 778:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */
GAS LISTING /tmp/ccPPTXZA.s 			page 66


 779:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* FALLTHRU */
 780:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('e'):    /* fall-through */ /* FALLTHRU */
 781:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('f'):    /* fall-through */ /* FALLTHRU */
 782:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('g'):    /* fall-through */ /* FALLTHRU */
 783:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('a'):
 784:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
 785:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
 786:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             int bufferSize = 0;         /* size of formatBuf.str */
 2085              		.loc 2 786 33
 2086 059b C785F8FC 		movl	$0, -776(%rbp)
 2086      FFFF0000 
 2086      0000
 787:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* floating point conversion */
 788:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatBuf.str = buffer.str; /* output buffer for float string with defa
 2087              		.loc 2 788 43
 2088 05a5 488D85D0 		leaq	-560(%rbp), %rax
 2088      FDFFFF
 2089 05ac 48898538 		movq	%rax, -712(%rbp)
 2089      FDFFFF
 789:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 790:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* compute the precision value */
 791:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.precision < 0) {
 2090              		.loc 2 791 43
 2091 05b3 8B85B8FD 		movl	-584(%rbp), %eax
 2091      FFFF
 2092              		.loc 2 791 32
 2093 05b9 85C0     		testl	%eax, %eax
 2094 05bb 790C     		jns	.L153
 792:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = SECUREC_FLOAT_DEFAULT_PRECISION;
 2095              		.loc 2 792 54
 2096 05bd C785B8FD 		movl	$6, -584(%rbp)
 2096      FFFF0600 
 2096      0000
 2097 05c7 EB1D     		jmp	.L154
 2098              	.L153:
 793:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.precision == 0 && ch == SECUREC_CHAR('g')) {
 2099              		.loc 2 793 50
 2100 05c9 8B85B8FD 		movl	-584(%rbp), %eax
 2100      FFFF
 2101              		.loc 2 793 39
 2102 05cf 85C0     		testl	%eax, %eax
 2103 05d1 7513     		jne	.L154
 2104              		.loc 2 793 66 discriminator 1
 2105 05d3 80BDDEFC 		cmpb	$103, -802(%rbp)
 2105      FFFF67
 2106 05da 750A     		jne	.L154
 794:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;
 2107              		.loc 2 794 54
 2108 05dc C785B8FD 		movl	$1, -584(%rbp)
 2108      FFFF0100 
 2108      0000
 2109              	.L154:
 795:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 796:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 797:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* calc buffer size to store double value
 798:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              * The maximum length of SECUREC_MAX_WIDTH_LEN is enough
 799:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              */
GAS LISTING /tmp/ccPPTXZA.s 			page 67


 800:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_LONG_DOUBLE) {
 2110              		.loc 2 800 43
 2111 05e6 8B85B0FD 		movl	-592(%rbp), %eax
 2111      FFFF
 2112              		.loc 2 800 50
 2113 05ec 25000400 		andl	$1024, %eax
 2113      00
 2114              		.loc 2 800 32
 2115 05f1 85C0     		testl	%eax, %eax
 2116 05f3 742F     		je	.L155
 801:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.precision > (SECUREC_MAX_WIDTH_LEN - SECUREC_FLOAT_B
 2117              		.loc 2 801 47
 2118 05f5 8B85B8FD 		movl	-584(%rbp), %eax
 2118      FFFF
 2119              		.loc 2 801 36
 2120 05fb 3D5CB9CC 		cmpl	$214743388, %eax
 2120      0C
 2121 0600 7E0F     		jle	.L156
 802:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2122              		.loc 2 802 46
 2123 0602 C785F0FC 		movl	$1, -784(%rbp)
 2123      FFFF0100 
 2123      0000
 803:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2124              		.loc 2 803 37
 2125 060c E97D0300 		jmp	.L157
 2125      00
 2126              	.L156:
 804:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 805:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* Long double needs to meet the basic print length */
 806:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 bufferSize = SECUREC_FLOAT_BUFSIZE_LB + formatAttr.precision + SECU
 2127              		.loc 2 806 83
 2128 0611 8B85B8FD 		movl	-584(%rbp), %eax
 2128      FFFF
 2129              		.loc 2 806 44
 2130 0617 056E1300 		addl	$4974, %eax
 2130      00
 2131 061c 8985F8FC 		movl	%eax, -776(%rbp)
 2131      FFFF
 2132 0622 EB2D     		jmp	.L158
 2133              	.L155:
 807:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
 808:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.precision > (SECUREC_MAX_WIDTH_LEN - SECUREC_FLOAT_B
 2134              		.loc 2 808 47
 2135 0624 8B85B8FD 		movl	-584(%rbp), %eax
 2135      FFFF
 2136              		.loc 2 808 36
 2137 062a 3D6BCBCC 		cmpl	$214748011, %eax
 2137      0C
 2138 062f 7E0F     		jle	.L159
 809:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2139              		.loc 2 809 46
 2140 0631 C785F0FC 		movl	$1, -784(%rbp)
 2140      FFFF0100 
 2140      0000
 810:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2141              		.loc 2 810 37
GAS LISTING /tmp/ccPPTXZA.s 			page 68


 2142 063b E94E0300 		jmp	.L157
 2142      00
 2143              	.L159:
 811:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 812:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* Double needs to meet the basic print length */
 813:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 bufferSize = SECUREC_FLOAT_BUFSIZE + formatAttr.precision + SECUREC
 2144              		.loc 2 813 80
 2145 0640 8B85B8FD 		movl	-584(%rbp), %eax
 2145      FFFF
 2146              		.loc 2 813 44
 2147 0646 055F0100 		addl	$351, %eax
 2147      00
 2148 064b 8985F8FC 		movl	%eax, -776(%rbp)
 2148      FFFF
 2149              	.L158:
 814:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 815:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.fldWidth > bufferSize) {
 2150              		.loc 2 815 43
 2151 0651 8B85B4FD 		movl	-588(%rbp), %eax
 2151      FFFF
 2152              		.loc 2 815 32
 2153 0657 3985F8FC 		cmpl	%eax, -776(%rbp)
 2153      FFFF
 2154 065d 7D0F     		jge	.L160
 816:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 bufferSize = formatAttr.fldWidth + SECUREC_FLOAT_BUF_EXT;
 2155              		.loc 2 816 56
 2156 065f 8B85B4FD 		movl	-588(%rbp), %eax
 2156      FFFF
 2157              		.loc 2 816 44
 2158 0665 83C002   		addl	$2, %eax
 2159 0668 8985F8FC 		movl	%eax, -776(%rbp)
 2159      FFFF
 2160              	.L160:
 817:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 818:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 819:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (bufferSize > SECUREC_BUFFER_SIZE) {
 2161              		.loc 2 819 32
 2162 066e 81BDF8FC 		cmpl	$512, -776(%rbp)
 2162      FFFF0002 
 2162      0000
 2163 0678 7E40     		jle	.L161
 820:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* the current vlaue of SECUREC_BUFFER_SIZE could NOT store the
 821:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                  * formatted float string
 822:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                  */
 823:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 floatBuf = (char *)SECUREC_MALLOC(((size_t)(unsigned int)bufferSize
 2164              		.loc 2 823 52
 2165 067a 8B85F8FC 		movl	-776(%rbp), %eax
 2165      FFFF
 2166 0680 89C0     		movl	%eax, %eax
 2167 0682 4889C7   		movq	%rax, %rdi
 2168 0685 E8000000 		call	malloc@PLT
 2168      00
 2169 068a 48898540 		movq	%rax, -704(%rbp)
 2169      FDFFFF
 824:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (floatBuf != NULL) {
 2170              		.loc 2 824 36
 2171 0691 4883BD40 		cmpq	$0, -704(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 69


 2171      FDFFFF00 
 2172 0699 7410     		je	.L162
 825:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatBuf.str = floatBuf;
 2173              		.loc 2 825 51
 2174 069b 488B8540 		movq	-704(%rbp), %rax
 2174      FDFFFF
 2175 06a2 48898538 		movq	%rax, -712(%rbp)
 2175      FDFFFF
 2176 06a9 EB0F     		jmp	.L161
 2177              	.L162:
 826:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
 827:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2178              		.loc 2 827 46
 2179 06ab C785F0FC 		movl	$1, -784(%rbp)
 2179      FFFF0100 
 2179      0000
 828:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2180              		.loc 2 828 37
 2181 06b5 E9D40200 		jmp	.L157
 2181      00
 2182              	.L161:
 2183              	.LBB9:
 829:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 830:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 831:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 832:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             do {
 833:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* add following code to call system sprintf API for float number *
 834:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 const SecChar *pFloatFmt = format - 2;  /* sub 2 to the position be
 2184              		.loc 2 834 67
 2185 06ba 488B8530 		movq	-720(%rbp), %rax
 2185      FDFFFF
 2186              		.loc 2 834 48
 2187 06c1 4883E802 		subq	$2, %rax
 2188 06c5 48898550 		movq	%rax, -688(%rbp)
 2188      FDFFFF
 835:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 int k;
 836:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 int fFmtStrLen;
 837:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 char fFmtBuf[SECUREC_FMT_STR_LEN];
 838:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 char *fFmtStr = fFmtBuf;
 2189              		.loc 2 838 39
 2190 06cc 488D45E0 		leaq	-32(%rbp), %rax
 2191 06d0 48898558 		movq	%rax, -680(%rbp)
 2191      FDFFFF
 839:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 char *fFmtHeap = NULL;    /* to clear warning */
 2192              		.loc 2 839 39
 2193 06d7 48C78560 		movq	$0, -672(%rbp)
 2193      FDFFFF00 
 2193      000000
 840:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 841:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 while (SECUREC_CHAR('%') != *pFloatFmt) { /* must meet '%' */
 2194              		.loc 2 841 39
 2195 06e2 EB08     		jmp	.L163
 2196              	.L164:
 842:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     --pFloatFmt;
 2197              		.loc 2 842 37
 2198 06e4 4883AD50 		subq	$1, -688(%rbp)
 2198      FDFFFF01 
GAS LISTING /tmp/ccPPTXZA.s 			page 70


 2199              	.L163:
 841:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     --pFloatFmt;
 2200              		.loc 2 841 61
 2201 06ec 488B8550 		movq	-688(%rbp), %rax
 2201      FDFFFF
 2202 06f3 0FB600   		movzbl	(%rax), %eax
 841:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     --pFloatFmt;
 2203              		.loc 2 841 39
 2204 06f6 3C25     		cmpb	$37, %al
 2205 06f8 75EA     		jne	.L164
 843:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 844:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 fFmtStrLen = (int)((format - pFloatFmt) + 1);   /* with ending term
 2206              		.loc 2 844 60
 2207 06fa 488B8530 		movq	-720(%rbp), %rax
 2207      FDFFFF
 2208 0701 482B8550 		subq	-688(%rbp), %rax
 2208      FDFFFF
 2209              		.loc 2 844 73
 2210 0708 83C001   		addl	$1, %eax
 2211              		.loc 2 844 44
 2212 070b 898528FD 		movl	%eax, -728(%rbp)
 2212      FFFF
 845:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (fFmtStrLen > SECUREC_FMT_STR_LEN) {
 2213              		.loc 2 845 36
 2214 0711 83BD28FD 		cmpl	$16, -728(%rbp)
 2214      FFFF10
 2215 0718 0F8EA500 		jle	.L165
 2215      0000
 846:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* if SECUREC_FMT_STR_LEN is NOT enough, alloc a new buffer */
 847:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     fFmtHeap = (char *)SECUREC_MALLOC((size_t)((unsigned int)fFmtSt
 2216              		.loc 2 847 56
 2217 071e 8B8528FD 		movl	-728(%rbp), %eax
 2217      FFFF
 2218 0724 89C0     		movl	%eax, %eax
 2219 0726 4889C7   		movq	%rax, %rdi
 2220 0729 E8000000 		call	malloc@PLT
 2220      00
 2221 072e 48898560 		movq	%rax, -672(%rbp)
 2221      FDFFFF
 848:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     if (fFmtHeap == NULL) {
 2222              		.loc 2 848 40
 2223 0735 4883BD60 		cmpq	$0, -672(%rbp)
 2223      FDFFFF00 
 2224 073d 750F     		jne	.L166
 849:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         noOutput = 1;
 2225              		.loc 2 849 50
 2226 073f C785F0FC 		movl	$1, -784(%rbp)
 2226      FFFF0100 
 2226      0000
 850:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 2227              		.loc 2 850 41
 2228 0749 E9400200 		jmp	.L157
 2228      00
 2229              	.L166:
 851:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } else {
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         for (k = 0; k < fFmtStrLen - 1; ++k) {
 2230              		.loc 2 852 48
GAS LISTING /tmp/ccPPTXZA.s 			page 71


 2231 074e C785FCFC 		movl	$0, -772(%rbp)
 2231      FFFF0000 
 2231      0000
 2232              		.loc 2 852 41
 2233 0758 EB32     		jmp	.L168
 2234              	.L169:
 853:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 854:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             fFmtHeap[k] = (char)(pFloatFmt[k]); /* copy the format 
 2235              		.loc 2 854 75 discriminator 3
 2236 075a 8B85FCFC 		movl	-772(%rbp), %eax
 2236      FFFF
 2237 0760 4863D0   		movslq	%eax, %rdx
 2238 0763 488B8550 		movq	-688(%rbp), %rax
 2238      FDFFFF
 2239 076a 4801D0   		addq	%rdx, %rax
 2240              		.loc 2 854 53 discriminator 3
 2241 076d 8B95FCFC 		movl	-772(%rbp), %edx
 2241      FFFF
 2242 0773 4863CA   		movslq	%edx, %rcx
 2243 0776 488B9560 		movq	-672(%rbp), %rdx
 2243      FDFFFF
 2244 077d 4801CA   		addq	%rcx, %rdx
 2245              		.loc 2 854 59 discriminator 3
 2246 0780 0FB600   		movzbl	(%rax), %eax
 2247              		.loc 2 854 57 discriminator 3
 2248 0783 8802     		movb	%al, (%rdx)
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 2249              		.loc 2 852 73 discriminator 3
 2250 0785 8385FCFC 		addl	$1, -772(%rbp)
 2250      FFFF01
 2251              	.L168:
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 2252              		.loc 2 852 68 discriminator 1
 2253 078c 8B8528FD 		movl	-728(%rbp), %eax
 2253      FFFF
 2254 0792 83E801   		subl	$1, %eax
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 2255              		.loc 2 852 41 discriminator 1
 2256 0795 3985FCFC 		cmpl	%eax, -772(%rbp)
 2256      FFFF
 2257 079b 7CBD     		jl	.L169
 855:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         }
 856:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         fFmtHeap[k] = '\0';
 2258              		.loc 2 856 49
 2259 079d 8B85FCFC 		movl	-772(%rbp), %eax
 2259      FFFF
 2260 07a3 4863D0   		movslq	%eax, %rdx
 2261 07a6 488B8560 		movq	-672(%rbp), %rax
 2261      FDFFFF
 2262 07ad 4801D0   		addq	%rdx, %rax
 2263              		.loc 2 856 53
 2264 07b0 C60000   		movb	$0, (%rax)
 857:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 858:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         fFmtStr = fFmtHeap;
 2265              		.loc 2 858 49
 2266 07b3 488B8560 		movq	-672(%rbp), %rax
 2266      FDFFFF
GAS LISTING /tmp/ccPPTXZA.s 			page 72


 2267 07ba 48898558 		movq	%rax, -680(%rbp)
 2267      FDFFFF
 2268 07c1 EB53     		jmp	.L170
 2269              	.L165:
 859:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
 860:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
 861:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* purpose of the repeat code is to solve the tool alarm  Redun
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     for (k = 0; k < fFmtStrLen - 1; ++k) {
 2270              		.loc 2 862 44
 2271 07c3 C785FCFC 		movl	$0, -772(%rbp)
 2271      FFFF0000 
 2271      0000
 2272              		.loc 2 862 37
 2273 07cd EB29     		jmp	.L171
 2274              	.L172:
 863:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 864:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         fFmtBuf[k] = (char)(pFloatFmt[k]);  /* copy the format stri
 2275              		.loc 2 864 70 discriminator 3
 2276 07cf 8B85FCFC 		movl	-772(%rbp), %eax
 2276      FFFF
 2277 07d5 4863D0   		movslq	%eax, %rdx
 2278 07d8 488B8550 		movq	-688(%rbp), %rax
 2278      FDFFFF
 2279 07df 4801D0   		addq	%rdx, %rax
 2280              		.loc 2 864 54 discriminator 3
 2281 07e2 0FB610   		movzbl	(%rax), %edx
 2282              		.loc 2 864 52 discriminator 3
 2283 07e5 8B85FCFC 		movl	-772(%rbp), %eax
 2283      FFFF
 2284 07eb 4898     		cltq
 2285 07ed 885405E0 		movb	%dl, -32(%rbp,%rax)
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 2286              		.loc 2 862 69 discriminator 3
 2287 07f1 8385FCFC 		addl	$1, -772(%rbp)
 2287      FFFF01
 2288              	.L171:
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 2289              		.loc 2 862 64 discriminator 1
 2290 07f8 8B8528FD 		movl	-728(%rbp), %eax
 2290      FFFF
 2291 07fe 83E801   		subl	$1, %eax
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 2292              		.loc 2 862 37 discriminator 1
 2293 0801 3985FCFC 		cmpl	%eax, -772(%rbp)
 2293      FFFF
 2294 0807 7CC6     		jl	.L172
 865:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
 866:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     fFmtBuf[k] = '\0';
 2295              		.loc 2 866 48
 2296 0809 8B85FCFC 		movl	-772(%rbp), %eax
 2296      FFFF
 2297 080f 4898     		cltq
 2298 0811 C64405E0 		movb	$0, -32(%rbp,%rax)
 2298      00
 2299              	.L170:
 867:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 868:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
GAS LISTING /tmp/ccPPTXZA.s 			page 73


 869:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_LONG_DOUBLE) {
 2300              		.loc 2 869 47
 2301 0816 8B85B0FD 		movl	-592(%rbp), %eax
 2301      FFFF
 2302              		.loc 2 869 54
 2303 081c 25000400 		andl	$1024, %eax
 2303      00
 2304              		.loc 2 869 36
 2305 0821 85C0     		testl	%eax, %eax
 2306 0823 7465     		je	.L173
 2307              	.LBB10:
 870:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 871:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     long double tmp = (long double)va_arg(argList, long double);
 2308              		.loc 2 871 49
 2309 0825 488B85B8 		movq	-840(%rbp), %rax
 2309      FCFFFF
 2310 082c 488B4008 		movq	8(%rax), %rax
 2311 0830 4883C00F 		addq	$15, %rax
 2312 0834 4883E0F0 		andq	$-16, %rax
 2313 0838 488D4810 		leaq	16(%rax), %rcx
 2314 083c 488B95B8 		movq	-840(%rbp), %rdx
 2314      FCFFFF
 2315 0843 48894A08 		movq	%rcx, 8(%rdx)
 2316 0847 DB28     		fldt	(%rax)
 2317 0849 DBBDA0FD 		fstpt	-608(%rbp)
 2317      FFFF
 872:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     textLen = SecFormatLongDboule(formatBuf.str, &formatAttr, fFmtS
 2318              		.loc 2 872 47
 2319 084f 488B8538 		movq	-712(%rbp), %rax
 2319      FDFFFF
 2320 0856 488B9558 		movq	-680(%rbp), %rdx
 2320      FDFFFF
 2321 085d 488D8DB0 		leaq	-592(%rbp), %rcx
 2321      FDFFFF
 2322 0864 FFB5A8FD 		pushq	-600(%rbp)
 2322      FFFF
 2323 086a FFB5A0FD 		pushq	-608(%rbp)
 2323      FFFF
 2324 0870 4889CE   		movq	%rcx, %rsi
 2325 0873 4889C7   		movq	%rax, %rdi
 2326 0876 E8000000 		call	SecFormatLongDboule
 2326      00
 2327 087b 4883C410 		addq	$16, %rsp
 2328 087f 8985ECFC 		movl	%eax, -788(%rbp)
 2328      FFFF
 2329              	.LBE10:
 2330 0885 E99C0000 		jmp	.L174
 2330      00
 2331              	.L173:
 2332              	.LBB11:
 873:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 874:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     double tmp = (double)va_arg(argList, double);
 875:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     textLen = SecFormatDboule(formatBuf.str, &formatAttr, fFmtStr, 
 876:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 877:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
 878:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     double tmp = (double)va_arg(argList, double);
 2333              		.loc 2 878 44
GAS LISTING /tmp/ccPPTXZA.s 			page 74


 2334 088a 488B85B8 		movq	-840(%rbp), %rax
 2334      FCFFFF
 2335 0891 8B4004   		movl	4(%rax), %eax
 2336 0894 3DAF0000 		cmpl	$175, %eax
 2336      00
 2337 0899 7733     		ja	.L175
 2338 089b 488B85B8 		movq	-840(%rbp), %rax
 2338      FCFFFF
 2339 08a2 488B5010 		movq	16(%rax), %rdx
 2340 08a6 488B85B8 		movq	-840(%rbp), %rax
 2340      FCFFFF
 2341 08ad 8B4004   		movl	4(%rax), %eax
 2342 08b0 89C0     		movl	%eax, %eax
 2343 08b2 4801D0   		addq	%rdx, %rax
 2344 08b5 488B95B8 		movq	-840(%rbp), %rdx
 2344      FCFFFF
 2345 08bc 8B5204   		movl	4(%rdx), %edx
 2346 08bf 8D4A10   		leal	16(%rdx), %ecx
 2347 08c2 488B95B8 		movq	-840(%rbp), %rdx
 2347      FCFFFF
 2348 08c9 894A04   		movl	%ecx, 4(%rdx)
 2349 08cc EB1A     		jmp	.L176
 2350              	.L175:
 2351 08ce 488B85B8 		movq	-840(%rbp), %rax
 2351      FCFFFF
 2352 08d5 488B4008 		movq	8(%rax), %rax
 2353 08d9 488D4808 		leaq	8(%rax), %rcx
 2354 08dd 488B95B8 		movq	-840(%rbp), %rdx
 2354      FCFFFF
 2355 08e4 48894A08 		movq	%rcx, 8(%rdx)
 2356              	.L176:
 2357 08e8 F20F1000 		movsd	(%rax), %xmm0
 2358 08ec F20F1185 		movsd	%xmm0, -616(%rbp)
 2358      98FDFFFF 
 879:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     textLen = SecFormatDboule(formatBuf.str, &formatAttr, fFmtStr, 
 2359              		.loc 2 879 47
 2360 08f4 488B8538 		movq	-712(%rbp), %rax
 2360      FDFFFF
 2361 08fb 488BB598 		movq	-616(%rbp), %rsi
 2361      FDFFFF
 2362 0902 488B9558 		movq	-680(%rbp), %rdx
 2362      FDFFFF
 2363 0909 488D8DB0 		leaq	-592(%rbp), %rcx
 2363      FDFFFF
 2364 0910 66480F6E 		movq	%rsi, %xmm0
 2364      C6
 2365 0915 4889CE   		movq	%rcx, %rsi
 2366 0918 4889C7   		movq	%rax, %rdi
 2367 091b E8000000 		call	SecFormatDboule
 2367      00
 2368 0920 8985ECFC 		movl	%eax, -788(%rbp)
 2368      FFFF
 2369              	.L174:
 2370              	.LBE11:
 880:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 881:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 882:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (fFmtHeap != NULL) {
GAS LISTING /tmp/ccPPTXZA.s 			page 75


 2371              		.loc 2 882 36
 2372 0926 4883BD60 		cmpq	$0, -672(%rbp)
 2372      FDFFFF00 
 2373 092e 741A     		je	.L177
 883:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* if buffer is alloced on heap, free it */
 884:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     SECUREC_FREE(fFmtHeap);
 2374              		.loc 2 884 37
 2375 0930 488B8560 		movq	-672(%rbp), %rax
 2375      FDFFFF
 2376 0937 4889C7   		movq	%rax, %rdi
 2377 093a E8000000 		call	free@PLT
 2377      00
 885:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     fFmtHeap = NULL;
 2378              		.loc 2 885 46
 2379 093f 48C78560 		movq	$0, -672(%rbp)
 2379      FDFFFF00 
 2379      000000
 2380              	.L177:
 886:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* to clear e438 last value assigned not used , the compiler wi
 887:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                      * optimize this code
 888:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                      */
 889:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     (void)fFmtHeap;
 890:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 891:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (textLen < 0 || textLen >= bufferSize) {
 2381              		.loc 2 891 36
 2382 094a 83BDECFC 		cmpl	$0, -788(%rbp)
 2382      FFFF00
 2383 0951 780E     		js	.L178
 2384              		.loc 2 891 49 discriminator 1
 2385 0953 8B85ECFC 		movl	-788(%rbp), %eax
 2385      FFFF
 2386 0959 3B85F8FC 		cmpl	-776(%rbp), %eax
 2386      FFFF
 2387 095f 7C0C     		jl	.L179
 2388              	.L178:
 892:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* bufferSize is large enough, just validation the return value
 893:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2389              		.loc 2 893 46
 2390 0961 C785F0FC 		movl	$1, -784(%rbp)
 2390      FFFF0100 
 2390      0000
 894:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2391              		.loc 2 894 37
 2392 096b EB21     		jmp	.L157
 2393              	.L179:
 895:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 896:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 897:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* no padding ,this variable to calculate amount of padding */
 898:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.fldWidth = textLen;
 2394              		.loc 2 898 53
 2395 096d 8B85ECFC 		movl	-788(%rbp), %eax
 2395      FFFF
 2396 0973 8985B4FD 		movl	%eax, -588(%rbp)
 2396      FFFF
 899:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = 0;  /* no padding ,this variable to  calculate amount o
 2397              		.loc 2 899 43
 2398 0979 C785E8FC 		movl	$0, -792(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 76


 2398      FFFF0000 
 2398      0000
 900:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags = 0;   /* clear all internal formatAttr.flags */
 2399              		.loc 2 900 50
 2400 0983 C785B0FD 		movl	$0, -592(%rbp)
 2400      FFFF0000 
 2400      0000
 901:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2401              		.loc 2 901 33
 2402 098d 90       		nop
 2403              	.L157:
 2404              	.LBE9:
 2405              	.LBE8:
 902:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } SECUREC_WHILE_ZERO;
 903:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
 904:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 2406              		.loc 2 904 25 discriminator 3
 2407 098e E9450C00 		jmp	.L150
 2407      00
 2408              	.L137:
 905:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 906:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         return -1;
 907:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 908:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('p'): /* fall-through */ /* FALLTHRU */
 909:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('X'): /* fall-through */ /* FALLTHRU */
 910:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('x'):
 911:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* unsigned lower hex output */
 912:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         digits = itoaLowerDigits;
 2409              		.loc 2 912 32 discriminator 1
 2410 0993 488B0500 		movq	itoaLowerDigits.3564(%rip), %rax
 2410      000000
 2411 099a 48898548 		movq	%rax, -696(%rbp)
 2411      FDFFFF
 913:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         radix = SECUREC_RADIX_HEX;
 2412              		.loc 2 913 31 discriminator 1
 2413 09a1 C785E4FC 		movl	$16, -796(%rbp)
 2413      FFFF1000 
 2413      0000
 914:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         switch (ch) {
 2414              		.loc 2 914 25 discriminator 1
 2415 09ab 0FBE85DE 		movsbl	-802(%rbp), %eax
 2415      FCFFFF
 2416 09b2 83F858   		cmpl	$88, %eax
 2417 09b5 743D     		je	.L180
 2418 09b7 83F870   		cmpl	$112, %eax
 2419 09ba 7548     		jne	.L294
 915:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('p'):
 916:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* print a pointer */
 917:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT)
 918:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
 919:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 920:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_POINTER;
 2420              		.loc 2 920 50
 2421 09bc 8B85B0FD 		movl	-592(%rbp), %eax
 2421      FFFF
 2422 09c2 80CC40   		orb	$64, %ah
 2423 09c5 8985B0FD 		movl	%eax, -592(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 77


 2423      FFFF
 921:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 922:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
 923:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_I64;   /* converting an int64 */
 2424              		.loc 2 923 50
 2425 09cb 8B85B0FD 		movl	-592(%rbp), %eax
 2425      FFFF
 2426 09d1 80CC80   		orb	$-128, %ah
 2427 09d4 8985B0FD 		movl	%eax, -592(%rbp)
 2427      FFFF
 924:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 925:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_LONG;  /* converting a long */
 926:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 927:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 928:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT) || defined(SECUREC_VXWORKS_PLATFORM)) && (!defined(SE
 929:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_VXWORKS_PLATFORM)
 930:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;
 931:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 932:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 0;
 2428              		.loc 2 932 54
 2429 09da C785B8FD 		movl	$0, -584(%rbp)
 2429      FFFF0000 
 2429      0000
 933:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 934:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_ALTERNATE; /* "0x" is not default 
 2430              		.loc 2 934 50
 2431 09e4 8B85B0FD 		movl	-592(%rbp), %eax
 2431      FFFF
 2432 09ea 0C80     		orb	$-128, %al
 2433 09ec 8985B0FD 		movl	%eax, -592(%rbp)
 2433      FFFF
 935:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2434              		.loc 2 935 33
 2435 09f2 EB11     		jmp	.L182
 2436              	.L180:
 936:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 937:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* not linux vxwoks */
 938:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(_AIX) || defined(SECUREC_ON_SOLARIS)
 939:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;
 940:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 941:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 2 * sizeof(void *);  /* 2 precision of diffe
 942:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 943:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 944:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 945:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_ON_UNIX)
 946:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 947:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 948:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* fall-through */ /* FALLTHRU */
 949:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('X'): /* fall-through */ /* FALLTHRU */
 950:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* unsigned upper hex output */
 951:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 digits = itoaUpperDigits;
 2437              		.loc 2 951 40
 2438 09f4 488B0500 		movq	itoaUpperDigits.3563(%rip), %rax
 2438      000000
 2439 09fb 48898548 		movq	%rax, -696(%rbp)
 2439      FDFFFF
 952:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
GAS LISTING /tmp/ccPPTXZA.s 			page 78


 2440              		.loc 2 952 33
 2441 0a02 EB01     		jmp	.L182
 2442              	.L294:
 953:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             default:
 954:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2443              		.loc 2 954 33
 2444 0a04 90       		nop
 2445              	.L182:
 955:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 956:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 957:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (formatAttr.flags & SECUREC_FLAG_ALTERNATE) {
 2446              		.loc 2 957 39
 2447 0a05 8B85B0FD 		movl	-592(%rbp), %eax
 2447      FFFF
 2448              		.loc 2 957 46
 2449 0a0b 25800000 		andl	$128, %eax
 2449      00
 2450              		.loc 2 957 28
 2451 0a10 85C0     		testl	%eax, %eax
 2452 0a12 742C     		je	.L139
 958:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* alternate form means '0x' prefix */
 959:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR('0');
 2453              		.loc 2 959 39
 2454 0a14 C645DE30 		movb	$48, -34(%rbp)
 960:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[1] = (SecChar)(digits[16]); /* 16 for 'x' or 'X' */
 2455              		.loc 2 960 57
 2456 0a18 488B8548 		movq	-696(%rbp), %rax
 2456      FDFFFF
 2457 0a1f 4883C010 		addq	$16, %rax
 2458              		.loc 2 960 41
 2459 0a23 0FB600   		movzbl	(%rax), %eax
 2460              		.loc 2 960 39
 2461 0a26 8845DF   		movb	%al, -33(%rbp)
 961:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 962:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT) || defined(SECUREC_VXWORKS_PLATFORM))
 963:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (ch == 'p') {
 2462              		.loc 2 963 32
 2463 0a29 80BDDEFC 		cmpb	$112, -802(%rbp)
 2463      FFFF70
 2464 0a30 7504     		jne	.L183
 964:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefix[1] = SECUREC_CHAR('x');
 2465              		.loc 2 964 43
 2466 0a32 C645DF78 		movb	$120, -33(%rbp)
 2467              	.L183:
 965:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 966:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 967:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(_AIX) || defined(SECUREC_ON_SOLARIS)
 968:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (ch == 'p') {
 969:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = 0;
 970:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
 971:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = SECUREC_PREFIX_LEN;
 972:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 973:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 974:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = SECUREC_PREFIX_LEN;
 2468              		.loc 2 974 39
 2469 0a36 C785E8FC 		movl	$2, -792(%rbp)
 2469      FFFF0200 
GAS LISTING /tmp/ccPPTXZA.s 			page 79


 2469      0000
 2470              	.L139:
 975:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 976:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 977:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 978:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */ /* FALLTHRU */
 979:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('i'):    /* fall-through */ /* FALLTHRU */
 980:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('d'):    /* fall-through */ /* FALLTHRU */
 981:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('u'):    /* fall-through */ /* FALLTHRU */
 982:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('o'):    /* fall-through */ /* FALLTHRU */
 983:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         switch (ch) {
 2471              		.loc 2 983 25 discriminator 2
 2472 0a40 0FBE85DE 		movsbl	-802(%rbp), %eax
 2472      FCFFFF
 2473 0a47 83F875   		cmpl	$117, %eax
 2474 0a4a 7428     		je	.L184
 2475 0a4c 83F875   		cmpl	$117, %eax
 2476 0a4f 7F59     		jg	.L295
 2477 0a51 83F86F   		cmpl	$111, %eax
 2478 0a54 742A     		je	.L186
 2479 0a56 83F86F   		cmpl	$111, %eax
 2480 0a59 7F4F     		jg	.L295
 2481 0a5b 83F864   		cmpl	$100, %eax
 2482 0a5e 7405     		je	.L187
 2483 0a60 83F869   		cmpl	$105, %eax
 2484 0a63 7545     		jne	.L295
 2485              	.L187:
 984:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('i'): /* fall-through */ /* FALLTHRU */
 985:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('d'): /* fall-through */ /* FALLTHRU */
 986:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* signed decimal output */
 987:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_SIGNED;
 2486              		.loc 2 987 50
 2487 0a65 8B85B0FD 		movl	-592(%rbp), %eax
 2487      FFFF
 2488 0a6b 83C840   		orl	$64, %eax
 2489 0a6e 8985B0FD 		movl	%eax, -592(%rbp)
 2489      FFFF
 2490              	.L184:
 988:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* fall-through */ /* FALLTHRU */
 989:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('u'):
 990:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 radix = SECUREC_RADIX_DECIMAL;
 2491              		.loc 2 990 39
 2492 0a74 C785E4FC 		movl	$10, -796(%rbp)
 2492      FFFF0A00 
 2492      0000
 991:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2493              		.loc 2 991 33
 2494 0a7e EB2E     		jmp	.L188
 2495              	.L186:
 992:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('o'):
 993:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* unsigned octal output */
 994:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 radix = SECUREC_RADIX_OCTAL;
 2496              		.loc 2 994 39
 2497 0a80 C785E4FC 		movl	$8, -796(%rbp)
 2497      FFFF0800 
 2497      0000
 995:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_ALTERNATE) {
GAS LISTING /tmp/ccPPTXZA.s 			page 80


 2498              		.loc 2 995 47
 2499 0a8a 8B85B0FD 		movl	-592(%rbp), %eax
 2499      FFFF
 2500              		.loc 2 995 54
 2501 0a90 25800000 		andl	$128, %eax
 2501      00
 2502              		.loc 2 995 36
 2503 0a95 85C0     		testl	%eax, %eax
 2504 0a97 7414     		je	.L296
 996:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* alternate form means force a leading 0 */
 997:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatAttr.flags |= SECUREC_FLAG_FORCE_OCTAL;
 2505              		.loc 2 997 54
 2506 0a99 8B85B0FD 		movl	-592(%rbp), %eax
 2506      FFFF
 2507 0a9f 80CC02   		orb	$2, %ah
 2508 0aa2 8985B0FD 		movl	%eax, -592(%rbp)
 2508      FFFF
 998:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 999:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2509              		.loc 2 999 33
 2510 0aa8 EB03     		jmp	.L296
 2511              	.L295:
1000:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             default:
1001:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2512              		.loc 2 1001 33
 2513 0aaa 90       		nop
 2514 0aab EB01     		jmp	.L188
 2515              	.L296:
 999:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             default:
 2516              		.loc 2 999 33
 2517 0aad 90       		nop
 2518              	.L188:
 2519              	.LBB12:
1002:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1003:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1004:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
1005:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1006:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SecUnsignedInt64 number = 0;    /* number to convert */
 2520              		.loc 2 1006 46
 2521 0aae 48C78568 		movq	$0, -664(%rbp)
 2521      FDFFFF00 
 2521      000000
1007:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SecInt64 l; /* temp long value */
1008:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1009:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* read argument into variable l */
1010:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_I64) {
 2522              		.loc 2 1010 43
 2523 0ab9 8B85B0FD 		movl	-592(%rbp), %eax
 2523      FFFF
 2524              		.loc 2 1010 50
 2525 0abf 25008000 		andl	$32768, %eax
 2525      00
 2526              		.loc 2 1010 32
 2527 0ac4 85C0     		testl	%eax, %eax
 2528 0ac6 7467     		je	.L190
1011:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (SecInt64)va_arg(argList, SecInt64);
 2529              		.loc 2 1011 35
GAS LISTING /tmp/ccPPTXZA.s 			page 81


 2530 0ac8 488B85B8 		movq	-840(%rbp), %rax
 2530      FCFFFF
 2531 0acf 8B00     		movl	(%rax), %eax
 2532 0ad1 83F82F   		cmpl	$47, %eax
 2533 0ad4 7730     		ja	.L191
 2534 0ad6 488B85B8 		movq	-840(%rbp), %rax
 2534      FCFFFF
 2535 0add 488B5010 		movq	16(%rax), %rdx
 2536 0ae1 488B85B8 		movq	-840(%rbp), %rax
 2536      FCFFFF
 2537 0ae8 8B00     		movl	(%rax), %eax
 2538 0aea 89C0     		movl	%eax, %eax
 2539 0aec 4801D0   		addq	%rdx, %rax
 2540 0aef 488B95B8 		movq	-840(%rbp), %rdx
 2540      FCFFFF
 2541 0af6 8B12     		movl	(%rdx), %edx
 2542 0af8 8D4A08   		leal	8(%rdx), %ecx
 2543 0afb 488B95B8 		movq	-840(%rbp), %rdx
 2543      FCFFFF
 2544 0b02 890A     		movl	%ecx, (%rdx)
 2545 0b04 EB1A     		jmp	.L192
 2546              	.L191:
 2547 0b06 488B85B8 		movq	-840(%rbp), %rax
 2547      FCFFFF
 2548 0b0d 488B4008 		movq	8(%rax), %rax
 2549 0b11 488D4808 		leaq	8(%rax), %rcx
 2550 0b15 488B95B8 		movq	-840(%rbp), %rdx
 2550      FCFFFF
 2551 0b1c 48894A08 		movq	%rcx, 8(%rdx)
 2552              	.L192:
 2553 0b20 488B00   		movq	(%rax), %rax
 2554 0b23 48898570 		movq	%rax, -656(%rbp)
 2554      FDFFFF
 2555 0b2a E93F0700 		jmp	.L193
 2555      00
 2556              	.L190:
1012:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_LONGLONG) {
 2557              		.loc 2 1012 50
 2558 0b2f 8B85B0FD 		movl	-592(%rbp), %eax
 2558      FFFF
 2559              		.loc 2 1012 57
 2560 0b35 25001000 		andl	$4096, %eax
 2560      00
 2561              		.loc 2 1012 39
 2562 0b3a 85C0     		testl	%eax, %eax
 2563 0b3c 7467     		je	.L194
1013:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (SecInt64)va_arg(argList, SecInt64);
 2564              		.loc 2 1013 35
 2565 0b3e 488B85B8 		movq	-840(%rbp), %rax
 2565      FCFFFF
 2566 0b45 8B00     		movl	(%rax), %eax
 2567 0b47 83F82F   		cmpl	$47, %eax
 2568 0b4a 7730     		ja	.L195
 2569 0b4c 488B85B8 		movq	-840(%rbp), %rax
 2569      FCFFFF
 2570 0b53 488B5010 		movq	16(%rax), %rdx
 2571 0b57 488B85B8 		movq	-840(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 82


 2571      FCFFFF
 2572 0b5e 8B00     		movl	(%rax), %eax
 2573 0b60 89C0     		movl	%eax, %eax
 2574 0b62 4801D0   		addq	%rdx, %rax
 2575 0b65 488B95B8 		movq	-840(%rbp), %rdx
 2575      FCFFFF
 2576 0b6c 8B12     		movl	(%rdx), %edx
 2577 0b6e 8D4A08   		leal	8(%rdx), %ecx
 2578 0b71 488B95B8 		movq	-840(%rbp), %rdx
 2578      FCFFFF
 2579 0b78 890A     		movl	%ecx, (%rdx)
 2580 0b7a EB1A     		jmp	.L196
 2581              	.L195:
 2582 0b7c 488B85B8 		movq	-840(%rbp), %rax
 2582      FCFFFF
 2583 0b83 488B4008 		movq	8(%rax), %rax
 2584 0b87 488D4808 		leaq	8(%rax), %rcx
 2585 0b8b 488B95B8 		movq	-840(%rbp), %rdx
 2585      FCFFFF
 2586 0b92 48894A08 		movq	%rcx, 8(%rdx)
 2587              	.L196:
 2588 0b96 488B00   		movq	(%rax), %rax
 2589 0b99 48898570 		movq	%rax, -656(%rbp)
 2589      FDFFFF
 2590 0ba0 E9C90600 		jmp	.L193
 2590      00
 2591              	.L194:
1014:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else
1015:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
1016:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_LONG) {
 2592              		.loc 2 1016 43
 2593 0ba5 8B85B0FD 		movl	-592(%rbp), %eax
 2593      FFFF
 2594              		.loc 2 1016 50
 2595 0bab 83E010   		andl	$16, %eax
 2596              		.loc 2 1016 32
 2597 0bae 85C0     		testl	%eax, %eax
 2598 0bb0 7467     		je	.L197
1017:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (long)va_arg(argList, long);
 2599              		.loc 2 1017 35
 2600 0bb2 488B85B8 		movq	-840(%rbp), %rax
 2600      FCFFFF
 2601 0bb9 8B00     		movl	(%rax), %eax
 2602 0bbb 83F82F   		cmpl	$47, %eax
 2603 0bbe 7730     		ja	.L198
 2604 0bc0 488B85B8 		movq	-840(%rbp), %rax
 2604      FCFFFF
 2605 0bc7 488B5010 		movq	16(%rax), %rdx
 2606 0bcb 488B85B8 		movq	-840(%rbp), %rax
 2606      FCFFFF
 2607 0bd2 8B00     		movl	(%rax), %eax
 2608 0bd4 89C0     		movl	%eax, %eax
 2609 0bd6 4801D0   		addq	%rdx, %rax
 2610 0bd9 488B95B8 		movq	-840(%rbp), %rdx
 2610      FCFFFF
 2611 0be0 8B12     		movl	(%rdx), %edx
 2612 0be2 8D4A08   		leal	8(%rdx), %ecx
GAS LISTING /tmp/ccPPTXZA.s 			page 83


 2613 0be5 488B95B8 		movq	-840(%rbp), %rdx
 2613      FCFFFF
 2614 0bec 890A     		movl	%ecx, (%rdx)
 2615 0bee EB1A     		jmp	.L199
 2616              	.L198:
 2617 0bf0 488B85B8 		movq	-840(%rbp), %rax
 2617      FCFFFF
 2618 0bf7 488B4008 		movq	8(%rax), %rax
 2619 0bfb 488D4808 		leaq	8(%rax), %rcx
 2620 0bff 488B95B8 		movq	-840(%rbp), %rdx
 2620      FCFFFF
 2621 0c06 48894A08 		movq	%rcx, 8(%rdx)
 2622              	.L199:
 2623 0c0a 488B00   		movq	(%rax), %rax
 2624 0c0d 48898570 		movq	%rax, -656(%rbp)
 2624      FDFFFF
 2625 0c14 E9550600 		jmp	.L193
 2625      00
 2626              	.L197:
1018:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else
1019:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif /* SECUREC_ON_64BITS */
1020:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_CHAR) {
 2627              		.loc 2 1020 43
 2628 0c19 8B85B0FD 		movl	-592(%rbp), %eax
 2628      FFFF
 2629              		.loc 2 1020 50
 2630 0c1f 25002000 		andl	$8192, %eax
 2630      00
 2631              		.loc 2 1020 32
 2632 0c24 85C0     		testl	%eax, %eax
 2633 0c26 0F843101 		je	.L200
 2633      0000
1021:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2634              		.loc 2 1021 47
 2635 0c2c 8B85B0FD 		movl	-592(%rbp), %eax
 2635      FFFF
 2636              		.loc 2 1021 54
 2637 0c32 83E040   		andl	$64, %eax
 2638              		.loc 2 1021 36
 2639 0c35 85C0     		testl	%eax, %eax
 2640 0c37 0F84B700 		je	.L201
 2640      0000
1022:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (char)va_arg(argList, int); /* sign extend */
 2641              		.loc 2 1022 47
 2642 0c3d 488B85B8 		movq	-840(%rbp), %rax
 2642      FCFFFF
 2643 0c44 8B00     		movl	(%rax), %eax
 2644 0c46 83F82F   		cmpl	$47, %eax
 2645 0c49 7730     		ja	.L202
 2646 0c4b 488B85B8 		movq	-840(%rbp), %rax
 2646      FCFFFF
 2647 0c52 488B5010 		movq	16(%rax), %rdx
 2648 0c56 488B85B8 		movq	-840(%rbp), %rax
 2648      FCFFFF
 2649 0c5d 8B00     		movl	(%rax), %eax
 2650 0c5f 89C0     		movl	%eax, %eax
 2651 0c61 4801D0   		addq	%rdx, %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 84


 2652 0c64 488B95B8 		movq	-840(%rbp), %rdx
 2652      FCFFFF
 2653 0c6b 8B12     		movl	(%rdx), %edx
 2654 0c6d 8D4A08   		leal	8(%rdx), %ecx
 2655 0c70 488B95B8 		movq	-840(%rbp), %rdx
 2655      FCFFFF
 2656 0c77 890A     		movl	%ecx, (%rdx)
 2657 0c79 EB1A     		jmp	.L203
 2658              	.L202:
 2659 0c7b 488B85B8 		movq	-840(%rbp), %rax
 2659      FCFFFF
 2660 0c82 488B4008 		movq	8(%rax), %rax
 2661 0c86 488D4808 		leaq	8(%rax), %rcx
 2662 0c8a 488B95B8 		movq	-840(%rbp), %rdx
 2662      FCFFFF
 2663 0c91 48894A08 		movq	%rcx, 8(%rdx)
 2664              	.L203:
 2665 0c95 8B00     		movl	(%rax), %eax
 2666              		.loc 2 1022 39
 2667 0c97 480FBEC0 		movsbq	%al, %rax
 2668 0c9b 48898570 		movq	%rax, -656(%rbp)
 2668      FDFFFF
1023:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     if (l >= 128) { /* 128 on some platform, char is always unsigne
 2669              		.loc 2 1023 40
 2670 0ca2 4883BD70 		cmpq	$127, -656(%rbp)
 2670      FDFFFF7F 
 2671 0caa 0F8EBE05 		jle	.L193
 2671      0000
 2672              	.LBB13:
1024:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SecUnsignedInt64 tmpL = (SecUnsignedInt64)l;
 2673              		.loc 2 1024 58
 2674 0cb0 488B8570 		movq	-656(%rbp), %rax
 2674      FDFFFF
 2675 0cb7 48898588 		movq	%rax, -632(%rbp)
 2675      FDFFFF
1025:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         unsigned char tmpCh = (unsigned char)(~(tmpL));
 2676              		.loc 2 1025 63
 2677 0cbe 488B8588 		movq	-632(%rbp), %rax
 2677      FDFFFF
 2678              		.loc 2 1025 55
 2679 0cc5 F7D0     		notl	%eax
 2680 0cc7 8885DFFC 		movb	%al, -801(%rbp)
 2680      FFFF
1026:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = tmpCh + 1;
 2681              		.loc 2 1026 51
 2682 0ccd 0FB685DF 		movzbl	-801(%rbp), %eax
 2682      FCFFFF
 2683 0cd4 83C001   		addl	$1, %eax
 2684              		.loc 2 1026 43
 2685 0cd7 4898     		cltq
 2686 0cd9 48898570 		movq	%rax, -656(%rbp)
 2686      FDFFFF
1027:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         formatAttr.flags |= SECUREC_FLAG_NEGATIVE;
 2687              		.loc 2 1027 58
 2688 0ce0 8B85B0FD 		movl	-592(%rbp), %eax
 2688      FFFF
 2689 0ce6 80CC01   		orb	$1, %ah
GAS LISTING /tmp/ccPPTXZA.s 			page 85


 2690 0ce9 8985B0FD 		movl	%eax, -592(%rbp)
 2690      FFFF
 2691 0cef E97A0500 		jmp	.L193
 2691      00
 2692              	.L201:
 2693              	.LBE13:
1028:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
1029:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1030:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (unsigned char)va_arg(argList, int);    /* zero-extend */
 2694              		.loc 2 1030 56
 2695 0cf4 488B85B8 		movq	-840(%rbp), %rax
 2695      FCFFFF
 2696 0cfb 8B00     		movl	(%rax), %eax
 2697 0cfd 83F82F   		cmpl	$47, %eax
 2698 0d00 7730     		ja	.L204
 2699 0d02 488B85B8 		movq	-840(%rbp), %rax
 2699      FCFFFF
 2700 0d09 488B5010 		movq	16(%rax), %rdx
 2701 0d0d 488B85B8 		movq	-840(%rbp), %rax
 2701      FCFFFF
 2702 0d14 8B00     		movl	(%rax), %eax
 2703 0d16 89C0     		movl	%eax, %eax
 2704 0d18 4801D0   		addq	%rdx, %rax
 2705 0d1b 488B95B8 		movq	-840(%rbp), %rdx
 2705      FCFFFF
 2706 0d22 8B12     		movl	(%rdx), %edx
 2707 0d24 8D4A08   		leal	8(%rdx), %ecx
 2708 0d27 488B95B8 		movq	-840(%rbp), %rdx
 2708      FCFFFF
 2709 0d2e 890A     		movl	%ecx, (%rdx)
 2710 0d30 EB1A     		jmp	.L205
 2711              	.L204:
 2712 0d32 488B85B8 		movq	-840(%rbp), %rax
 2712      FCFFFF
 2713 0d39 488B4008 		movq	8(%rax), %rax
 2714 0d3d 488D4808 		leaq	8(%rax), %rcx
 2715 0d41 488B95B8 		movq	-840(%rbp), %rdx
 2715      FCFFFF
 2716 0d48 48894A08 		movq	%rcx, 8(%rdx)
 2717              	.L205:
 2718 0d4c 8B00     		movl	(%rax), %eax
 2719              		.loc 2 1030 39
 2720 0d4e 0FB6C0   		movzbl	%al, %eax
 2721 0d51 48898570 		movq	%rax, -656(%rbp)
 2721      FDFFFF
 2722 0d58 E9110500 		jmp	.L193
 2722      00
 2723              	.L200:
1031:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1032:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1033:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_SHORT) {
 2724              		.loc 2 1033 50
 2725 0d5d 8B85B0FD 		movl	-592(%rbp), %eax
 2725      FFFF
 2726              		.loc 2 1033 57
 2727 0d63 83E020   		andl	$32, %eax
 2728              		.loc 2 1033 39
GAS LISTING /tmp/ccPPTXZA.s 			page 86


 2729 0d66 85C0     		testl	%eax, %eax
 2730 0d68 0F84E000 		je	.L206
 2730      0000
1034:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2731              		.loc 2 1034 47
 2732 0d6e 8B85B0FD 		movl	-592(%rbp), %eax
 2732      FFFF
 2733              		.loc 2 1034 54
 2734 0d74 83E040   		andl	$64, %eax
 2735              		.loc 2 1034 36
 2736 0d77 85C0     		testl	%eax, %eax
 2737 0d79 746A     		je	.L207
1035:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (short)va_arg(argList, int);    /* sign extend */
 2738              		.loc 2 1035 48
 2739 0d7b 488B85B8 		movq	-840(%rbp), %rax
 2739      FCFFFF
 2740 0d82 8B00     		movl	(%rax), %eax
 2741 0d84 83F82F   		cmpl	$47, %eax
 2742 0d87 7730     		ja	.L208
 2743 0d89 488B85B8 		movq	-840(%rbp), %rax
 2743      FCFFFF
 2744 0d90 488B5010 		movq	16(%rax), %rdx
 2745 0d94 488B85B8 		movq	-840(%rbp), %rax
 2745      FCFFFF
 2746 0d9b 8B00     		movl	(%rax), %eax
 2747 0d9d 89C0     		movl	%eax, %eax
 2748 0d9f 4801D0   		addq	%rdx, %rax
 2749 0da2 488B95B8 		movq	-840(%rbp), %rdx
 2749      FCFFFF
 2750 0da9 8B12     		movl	(%rdx), %edx
 2751 0dab 8D4A08   		leal	8(%rdx), %ecx
 2752 0dae 488B95B8 		movq	-840(%rbp), %rdx
 2752      FCFFFF
 2753 0db5 890A     		movl	%ecx, (%rdx)
 2754 0db7 EB1A     		jmp	.L209
 2755              	.L208:
 2756 0db9 488B85B8 		movq	-840(%rbp), %rax
 2756      FCFFFF
 2757 0dc0 488B4008 		movq	8(%rax), %rax
 2758 0dc4 488D4808 		leaq	8(%rax), %rcx
 2759 0dc8 488B95B8 		movq	-840(%rbp), %rdx
 2759      FCFFFF
 2760 0dcf 48894A08 		movq	%rcx, 8(%rdx)
 2761              	.L209:
 2762 0dd3 8B00     		movl	(%rax), %eax
 2763              		.loc 2 1035 39
 2764 0dd5 480FBFC0 		movswq	%ax, %rax
 2765 0dd9 48898570 		movq	%rax, -656(%rbp)
 2765      FDFFFF
 2766 0de0 E9890400 		jmp	.L193
 2766      00
 2767              	.L207:
1036:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1037:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (unsigned short)va_arg(argList, int);   /* zero-extend */
 2768              		.loc 2 1037 57
 2769 0de5 488B85B8 		movq	-840(%rbp), %rax
 2769      FCFFFF
GAS LISTING /tmp/ccPPTXZA.s 			page 87


 2770 0dec 8B00     		movl	(%rax), %eax
 2771 0dee 83F82F   		cmpl	$47, %eax
 2772 0df1 7730     		ja	.L210
 2773 0df3 488B85B8 		movq	-840(%rbp), %rax
 2773      FCFFFF
 2774 0dfa 488B5010 		movq	16(%rax), %rdx
 2775 0dfe 488B85B8 		movq	-840(%rbp), %rax
 2775      FCFFFF
 2776 0e05 8B00     		movl	(%rax), %eax
 2777 0e07 89C0     		movl	%eax, %eax
 2778 0e09 4801D0   		addq	%rdx, %rax
 2779 0e0c 488B95B8 		movq	-840(%rbp), %rdx
 2779      FCFFFF
 2780 0e13 8B12     		movl	(%rdx), %edx
 2781 0e15 8D4A08   		leal	8(%rdx), %ecx
 2782 0e18 488B95B8 		movq	-840(%rbp), %rdx
 2782      FCFFFF
 2783 0e1f 890A     		movl	%ecx, (%rdx)
 2784 0e21 EB1A     		jmp	.L211
 2785              	.L210:
 2786 0e23 488B85B8 		movq	-840(%rbp), %rax
 2786      FCFFFF
 2787 0e2a 488B4008 		movq	8(%rax), %rax
 2788 0e2e 488D4808 		leaq	8(%rax), %rcx
 2789 0e32 488B95B8 		movq	-840(%rbp), %rdx
 2789      FCFFFF
 2790 0e39 48894A08 		movq	%rcx, 8(%rdx)
 2791              	.L211:
 2792 0e3d 8B00     		movl	(%rax), %eax
 2793              		.loc 2 1037 39
 2794 0e3f 0FB7C0   		movzwl	%ax, %eax
 2795 0e42 48898570 		movq	%rax, -656(%rbp)
 2795      FDFFFF
 2796 0e49 E9200400 		jmp	.L193
 2796      00
 2797              	.L206:
1038:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1039:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1040:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1041:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
1042:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             else if (formatAttr.flags & SECUREC_FLAG_PTRDIFF) {
 2798              		.loc 2 1042 48
 2799 0e4e 8B85B0FD 		movl	-592(%rbp), %eax
 2799      FFFF
 2800              		.loc 2 1042 55
 2801 0e54 25000001 		andl	$65536, %eax
 2801      00
 2802              		.loc 2 1042 37
 2803 0e59 85C0     		testl	%eax, %eax
 2804 0e5b 7467     		je	.L212
1043:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (ptrdiff_t)va_arg(argList, ptrdiff_t);  /* sign extend */
 2805              		.loc 2 1043 35
 2806 0e5d 488B85B8 		movq	-840(%rbp), %rax
 2806      FCFFFF
 2807 0e64 8B00     		movl	(%rax), %eax
 2808 0e66 83F82F   		cmpl	$47, %eax
 2809 0e69 7730     		ja	.L213
GAS LISTING /tmp/ccPPTXZA.s 			page 88


 2810 0e6b 488B85B8 		movq	-840(%rbp), %rax
 2810      FCFFFF
 2811 0e72 488B5010 		movq	16(%rax), %rdx
 2812 0e76 488B85B8 		movq	-840(%rbp), %rax
 2812      FCFFFF
 2813 0e7d 8B00     		movl	(%rax), %eax
 2814 0e7f 89C0     		movl	%eax, %eax
 2815 0e81 4801D0   		addq	%rdx, %rax
 2816 0e84 488B95B8 		movq	-840(%rbp), %rdx
 2816      FCFFFF
 2817 0e8b 8B12     		movl	(%rdx), %edx
 2818 0e8d 8D4A08   		leal	8(%rdx), %ecx
 2819 0e90 488B95B8 		movq	-840(%rbp), %rdx
 2819      FCFFFF
 2820 0e97 890A     		movl	%ecx, (%rdx)
 2821 0e99 EB1A     		jmp	.L214
 2822              	.L213:
 2823 0e9b 488B85B8 		movq	-840(%rbp), %rax
 2823      FCFFFF
 2824 0ea2 488B4008 		movq	8(%rax), %rax
 2825 0ea6 488D4808 		leaq	8(%rax), %rcx
 2826 0eaa 488B95B8 		movq	-840(%rbp), %rdx
 2826      FCFFFF
 2827 0eb1 48894A08 		movq	%rcx, 8(%rdx)
 2828              	.L214:
 2829 0eb5 488B00   		movq	(%rax), %rax
 2830 0eb8 48898570 		movq	%rax, -656(%rbp)
 2830      FDFFFF
 2831 0ebf E9AA0300 		jmp	.L193
 2831      00
 2832              	.L212:
1044:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_SIZE) {
 2833              		.loc 2 1044 50
 2834 0ec4 8B85B0FD 		movl	-592(%rbp), %eax
 2834      FFFF
 2835              		.loc 2 1044 57
 2836 0eca 25000002 		andl	$131072, %eax
 2836      00
 2837              		.loc 2 1044 39
 2838 0ecf 85C0     		testl	%eax, %eax
 2839 0ed1 0F84D401 		je	.L215
 2839      0000
1045:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2840              		.loc 2 1045 47
 2841 0ed7 8B85B0FD 		movl	-592(%rbp), %eax
 2841      FFFF
 2842              		.loc 2 1045 54
 2843 0edd 83E040   		andl	$64, %eax
 2844              		.loc 2 1045 36
 2845 0ee0 85C0     		testl	%eax, %eax
 2846 0ee2 0F845C01 		je	.L216
 2846      0000
1046:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* No suitable macros were found to handle the branch */
1047:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     if (SecIsSameSize(sizeof(size_t), sizeof(long))) {
 2847              		.loc 2 1047 41
 2848 0ee8 BE080000 		movl	$8, %esi
 2848      00
GAS LISTING /tmp/ccPPTXZA.s 			page 89


 2849 0eed BF080000 		movl	$8, %edi
 2849      00
 2850 0ef2 E8000000 		call	SecIsSameSize
 2850      00
 2851              		.loc 2 1047 40
 2852 0ef7 85C0     		testl	%eax, %eax
 2853 0ef9 7467     		je	.L217
1048:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = va_arg(argList, long);  /* sign extend */
 2854              		.loc 2 1048 43
 2855 0efb 488B85B8 		movq	-840(%rbp), %rax
 2855      FCFFFF
 2856 0f02 8B00     		movl	(%rax), %eax
 2857 0f04 83F82F   		cmpl	$47, %eax
 2858 0f07 7730     		ja	.L218
 2859 0f09 488B85B8 		movq	-840(%rbp), %rax
 2859      FCFFFF
 2860 0f10 488B5010 		movq	16(%rax), %rdx
 2861 0f14 488B85B8 		movq	-840(%rbp), %rax
 2861      FCFFFF
 2862 0f1b 8B00     		movl	(%rax), %eax
 2863 0f1d 89C0     		movl	%eax, %eax
 2864 0f1f 4801D0   		addq	%rdx, %rax
 2865 0f22 488B95B8 		movq	-840(%rbp), %rdx
 2865      FCFFFF
 2866 0f29 8B12     		movl	(%rdx), %edx
 2867 0f2b 8D4A08   		leal	8(%rdx), %ecx
 2868 0f2e 488B95B8 		movq	-840(%rbp), %rdx
 2868      FCFFFF
 2869 0f35 890A     		movl	%ecx, (%rdx)
 2870 0f37 EB1A     		jmp	.L219
 2871              	.L218:
 2872 0f39 488B85B8 		movq	-840(%rbp), %rax
 2872      FCFFFF
 2873 0f40 488B4008 		movq	8(%rax), %rax
 2874 0f44 488D4808 		leaq	8(%rax), %rcx
 2875 0f48 488B95B8 		movq	-840(%rbp), %rdx
 2875      FCFFFF
 2876 0f4f 48894A08 		movq	%rcx, 8(%rdx)
 2877              	.L219:
 2878 0f53 488B00   		movq	(%rax), %rax
 2879 0f56 48898570 		movq	%rax, -656(%rbp)
 2879      FDFFFF
 2880 0f5d E90C0300 		jmp	.L193
 2880      00
 2881              	.L217:
1049:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } else if (SecIsSameSize(sizeof(size_t), sizeof(long long))) {
 2882              		.loc 2 1049 48
 2883 0f62 BE080000 		movl	$8, %esi
 2883      00
 2884 0f67 BF080000 		movl	$8, %edi
 2884      00
 2885 0f6c E8000000 		call	SecIsSameSize
 2885      00
 2886              		.loc 2 1049 47
 2887 0f71 85C0     		testl	%eax, %eax
 2888 0f73 7467     		je	.L220
1050:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = va_arg(argList, long long); /* sign extend */
GAS LISTING /tmp/ccPPTXZA.s 			page 90


 2889              		.loc 2 1050 43
 2890 0f75 488B85B8 		movq	-840(%rbp), %rax
 2890      FCFFFF
 2891 0f7c 8B00     		movl	(%rax), %eax
 2892 0f7e 83F82F   		cmpl	$47, %eax
 2893 0f81 7730     		ja	.L221
 2894 0f83 488B85B8 		movq	-840(%rbp), %rax
 2894      FCFFFF
 2895 0f8a 488B5010 		movq	16(%rax), %rdx
 2896 0f8e 488B85B8 		movq	-840(%rbp), %rax
 2896      FCFFFF
 2897 0f95 8B00     		movl	(%rax), %eax
 2898 0f97 89C0     		movl	%eax, %eax
 2899 0f99 4801D0   		addq	%rdx, %rax
 2900 0f9c 488B95B8 		movq	-840(%rbp), %rdx
 2900      FCFFFF
 2901 0fa3 8B12     		movl	(%rdx), %edx
 2902 0fa5 8D4A08   		leal	8(%rdx), %ecx
 2903 0fa8 488B95B8 		movq	-840(%rbp), %rdx
 2903      FCFFFF
 2904 0faf 890A     		movl	%ecx, (%rdx)
 2905 0fb1 EB1A     		jmp	.L222
 2906              	.L221:
 2907 0fb3 488B85B8 		movq	-840(%rbp), %rax
 2907      FCFFFF
 2908 0fba 488B4008 		movq	8(%rax), %rax
 2909 0fbe 488D4808 		leaq	8(%rax), %rcx
 2910 0fc2 488B95B8 		movq	-840(%rbp), %rdx
 2910      FCFFFF
 2911 0fc9 48894A08 		movq	%rcx, 8(%rdx)
 2912              	.L222:
 2913 0fcd 488B00   		movq	(%rax), %rax
 2914 0fd0 48898570 		movq	%rax, -656(%rbp)
 2914      FDFFFF
 2915 0fd7 E9920200 		jmp	.L193
 2915      00
 2916              	.L220:
1051:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } else {
1052:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = va_arg(argList, int);   /* sign extend */
 2917              		.loc 2 1052 45
 2918 0fdc 488B85B8 		movq	-840(%rbp), %rax
 2918      FCFFFF
 2919 0fe3 8B00     		movl	(%rax), %eax
 2920 0fe5 83F82F   		cmpl	$47, %eax
 2921 0fe8 7730     		ja	.L223
 2922 0fea 488B85B8 		movq	-840(%rbp), %rax
 2922      FCFFFF
 2923 0ff1 488B5010 		movq	16(%rax), %rdx
 2924 0ff5 488B85B8 		movq	-840(%rbp), %rax
 2924      FCFFFF
 2925 0ffc 8B00     		movl	(%rax), %eax
 2926 0ffe 89C0     		movl	%eax, %eax
 2927 1000 4801D0   		addq	%rdx, %rax
 2928 1003 488B95B8 		movq	-840(%rbp), %rdx
 2928      FCFFFF
 2929 100a 8B12     		movl	(%rdx), %edx
 2930 100c 8D4A08   		leal	8(%rdx), %ecx
GAS LISTING /tmp/ccPPTXZA.s 			page 91


 2931 100f 488B95B8 		movq	-840(%rbp), %rdx
 2931      FCFFFF
 2932 1016 890A     		movl	%ecx, (%rdx)
 2933 1018 EB1A     		jmp	.L224
 2934              	.L223:
 2935 101a 488B85B8 		movq	-840(%rbp), %rax
 2935      FCFFFF
 2936 1021 488B4008 		movq	8(%rax), %rax
 2937 1025 488D4808 		leaq	8(%rax), %rcx
 2938 1029 488B95B8 		movq	-840(%rbp), %rdx
 2938      FCFFFF
 2939 1030 48894A08 		movq	%rcx, 8(%rdx)
 2940              	.L224:
 2941 1034 8B00     		movl	(%rax), %eax
 2942              		.loc 2 1052 43
 2943 1036 4898     		cltq
 2944 1038 48898570 		movq	%rax, -656(%rbp)
 2944      FDFFFF
 2945 103f E92A0200 		jmp	.L193
 2945      00
 2946              	.L216:
1053:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
1054:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1055:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (SecInt64)(size_t)va_arg(argList, size_t);  /* sign extend 
 2947              		.loc 2 1055 59
 2948 1044 488B85B8 		movq	-840(%rbp), %rax
 2948      FCFFFF
 2949 104b 8B00     		movl	(%rax), %eax
 2950 104d 83F82F   		cmpl	$47, %eax
 2951 1050 7730     		ja	.L225
 2952 1052 488B85B8 		movq	-840(%rbp), %rax
 2952      FCFFFF
 2953 1059 488B5010 		movq	16(%rax), %rdx
 2954 105d 488B85B8 		movq	-840(%rbp), %rax
 2954      FCFFFF
 2955 1064 8B00     		movl	(%rax), %eax
 2956 1066 89C0     		movl	%eax, %eax
 2957 1068 4801D0   		addq	%rdx, %rax
 2958 106b 488B95B8 		movq	-840(%rbp), %rdx
 2958      FCFFFF
 2959 1072 8B12     		movl	(%rdx), %edx
 2960 1074 8D4A08   		leal	8(%rdx), %ecx
 2961 1077 488B95B8 		movq	-840(%rbp), %rdx
 2961      FCFFFF
 2962 107e 890A     		movl	%ecx, (%rdx)
 2963 1080 EB1A     		jmp	.L226
 2964              	.L225:
 2965 1082 488B85B8 		movq	-840(%rbp), %rax
 2965      FCFFFF
 2966 1089 488B4008 		movq	8(%rax), %rax
 2967 108d 488D4808 		leaq	8(%rax), %rcx
 2968 1091 488B95B8 		movq	-840(%rbp), %rdx
 2968      FCFFFF
 2969 1098 48894A08 		movq	%rcx, 8(%rdx)
 2970              	.L226:
 2971 109c 488B00   		movq	(%rax), %rax
 2972              		.loc 2 1055 39
GAS LISTING /tmp/ccPPTXZA.s 			page 92


 2973 109f 48898570 		movq	%rax, -656(%rbp)
 2973      FDFFFF
 2974 10a6 E9C30100 		jmp	.L193
 2974      00
 2975              	.L215:
1056:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1057:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_INTMAX) {
 2976              		.loc 2 1057 50
 2977 10ab 8B85B0FD 		movl	-592(%rbp), %eax
 2977      FFFF
 2978              		.loc 2 1057 57
 2979 10b1 25000004 		andl	$262144, %eax
 2979      00
 2980              		.loc 2 1057 39
 2981 10b6 85C0     		testl	%eax, %eax
 2982 10b8 0F84DB00 		je	.L227
 2982      0000
1058:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2983              		.loc 2 1058 47
 2984 10be 8B85B0FD 		movl	-592(%rbp), %eax
 2984      FFFF
 2985              		.loc 2 1058 54
 2986 10c4 83E040   		andl	$64, %eax
 2987              		.loc 2 1058 36
 2988 10c7 85C0     		testl	%eax, %eax
 2989 10c9 7467     		je	.L228
1059:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = va_arg(argList, SecInt64);  /* sign extend */
 2990              		.loc 2 1059 39
 2991 10cb 488B85B8 		movq	-840(%rbp), %rax
 2991      FCFFFF
 2992 10d2 8B00     		movl	(%rax), %eax
 2993 10d4 83F82F   		cmpl	$47, %eax
 2994 10d7 7730     		ja	.L229
 2995 10d9 488B85B8 		movq	-840(%rbp), %rax
 2995      FCFFFF
 2996 10e0 488B5010 		movq	16(%rax), %rdx
 2997 10e4 488B85B8 		movq	-840(%rbp), %rax
 2997      FCFFFF
 2998 10eb 8B00     		movl	(%rax), %eax
 2999 10ed 89C0     		movl	%eax, %eax
 3000 10ef 4801D0   		addq	%rdx, %rax
 3001 10f2 488B95B8 		movq	-840(%rbp), %rdx
 3001      FCFFFF
 3002 10f9 8B12     		movl	(%rdx), %edx
 3003 10fb 8D4A08   		leal	8(%rdx), %ecx
 3004 10fe 488B95B8 		movq	-840(%rbp), %rdx
 3004      FCFFFF
 3005 1105 890A     		movl	%ecx, (%rdx)
 3006 1107 EB1A     		jmp	.L230
 3007              	.L229:
 3008 1109 488B85B8 		movq	-840(%rbp), %rax
 3008      FCFFFF
 3009 1110 488B4008 		movq	8(%rax), %rax
 3010 1114 488D4808 		leaq	8(%rax), %rcx
 3011 1118 488B95B8 		movq	-840(%rbp), %rdx
 3011      FCFFFF
 3012 111f 48894A08 		movq	%rcx, 8(%rdx)
GAS LISTING /tmp/ccPPTXZA.s 			page 93


 3013              	.L230:
 3014 1123 488B00   		movq	(%rax), %rax
 3015 1126 48898570 		movq	%rax, -656(%rbp)
 3015      FDFFFF
 3016 112d E93C0100 		jmp	.L193
 3016      00
 3017              	.L228:
1060:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1061:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* sign extend */
1062:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (SecInt64)(SecUnsignedInt64)va_arg(argList, SecUnsignedInt6
 3018              		.loc 2 1062 69
 3019 1132 488B85B8 		movq	-840(%rbp), %rax
 3019      FCFFFF
 3020 1139 8B00     		movl	(%rax), %eax
 3021 113b 83F82F   		cmpl	$47, %eax
 3022 113e 7730     		ja	.L231
 3023 1140 488B85B8 		movq	-840(%rbp), %rax
 3023      FCFFFF
 3024 1147 488B5010 		movq	16(%rax), %rdx
 3025 114b 488B85B8 		movq	-840(%rbp), %rax
 3025      FCFFFF
 3026 1152 8B00     		movl	(%rax), %eax
 3027 1154 89C0     		movl	%eax, %eax
 3028 1156 4801D0   		addq	%rdx, %rax
 3029 1159 488B95B8 		movq	-840(%rbp), %rdx
 3029      FCFFFF
 3030 1160 8B12     		movl	(%rdx), %edx
 3031 1162 8D4A08   		leal	8(%rdx), %ecx
 3032 1165 488B95B8 		movq	-840(%rbp), %rdx
 3032      FCFFFF
 3033 116c 890A     		movl	%ecx, (%rdx)
 3034 116e EB1A     		jmp	.L232
 3035              	.L231:
 3036 1170 488B85B8 		movq	-840(%rbp), %rax
 3036      FCFFFF
 3037 1177 488B4008 		movq	8(%rax), %rax
 3038 117b 488D4808 		leaq	8(%rax), %rcx
 3039 117f 488B95B8 		movq	-840(%rbp), %rdx
 3039      FCFFFF
 3040 1186 48894A08 		movq	%rcx, 8(%rdx)
 3041              	.L232:
 3042 118a 488B00   		movq	(%rax), %rax
 3043              		.loc 2 1062 39
 3044 118d 48898570 		movq	%rax, -656(%rbp)
 3044      FDFFFF
 3045 1194 E9D50000 		jmp	.L193
 3045      00
 3046              	.L227:
1063:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1064:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1065:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1066:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             else {
1067:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 3047              		.loc 2 1067 47
 3048 1199 8B85B0FD 		movl	-592(%rbp), %eax
 3048      FFFF
 3049              		.loc 2 1067 54
GAS LISTING /tmp/ccPPTXZA.s 			page 94


 3050 119f 83E040   		andl	$64, %eax
 3051              		.loc 2 1067 36
 3052 11a2 85C0     		testl	%eax, %eax
 3053 11a4 7465     		je	.L233
1068:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = va_arg(argList, int);   /* sign extend */
 3054              		.loc 2 1068 41
 3055 11a6 488B85B8 		movq	-840(%rbp), %rax
 3055      FCFFFF
 3056 11ad 8B00     		movl	(%rax), %eax
 3057 11af 83F82F   		cmpl	$47, %eax
 3058 11b2 7730     		ja	.L234
 3059 11b4 488B85B8 		movq	-840(%rbp), %rax
 3059      FCFFFF
 3060 11bb 488B5010 		movq	16(%rax), %rdx
 3061 11bf 488B85B8 		movq	-840(%rbp), %rax
 3061      FCFFFF
 3062 11c6 8B00     		movl	(%rax), %eax
 3063 11c8 89C0     		movl	%eax, %eax
 3064 11ca 4801D0   		addq	%rdx, %rax
 3065 11cd 488B95B8 		movq	-840(%rbp), %rdx
 3065      FCFFFF
 3066 11d4 8B12     		movl	(%rdx), %edx
 3067 11d6 8D4A08   		leal	8(%rdx), %ecx
 3068 11d9 488B95B8 		movq	-840(%rbp), %rdx
 3068      FCFFFF
 3069 11e0 890A     		movl	%ecx, (%rdx)
 3070 11e2 EB1A     		jmp	.L235
 3071              	.L234:
 3072 11e4 488B85B8 		movq	-840(%rbp), %rax
 3072      FCFFFF
 3073 11eb 488B4008 		movq	8(%rax), %rax
 3074 11ef 488D4808 		leaq	8(%rax), %rcx
 3075 11f3 488B95B8 		movq	-840(%rbp), %rdx
 3075      FCFFFF
 3076 11fa 48894A08 		movq	%rcx, 8(%rdx)
 3077              	.L235:
 3078 11fe 8B00     		movl	(%rax), %eax
 3079              		.loc 2 1068 39
 3080 1200 4898     		cltq
 3081 1202 48898570 		movq	%rax, -656(%rbp)
 3081      FDFFFF
 3082 1209 EB63     		jmp	.L193
 3083              	.L233:
1069:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1070:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (unsigned int)va_arg(argList, int); /* zero-extend */
 3084              		.loc 2 1070 55
 3085 120b 488B85B8 		movq	-840(%rbp), %rax
 3085      FCFFFF
 3086 1212 8B00     		movl	(%rax), %eax
 3087 1214 83F82F   		cmpl	$47, %eax
 3088 1217 7730     		ja	.L236
 3089 1219 488B85B8 		movq	-840(%rbp), %rax
 3089      FCFFFF
 3090 1220 488B5010 		movq	16(%rax), %rdx
 3091 1224 488B85B8 		movq	-840(%rbp), %rax
 3091      FCFFFF
 3092 122b 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 95


 3093 122d 89C0     		movl	%eax, %eax
 3094 122f 4801D0   		addq	%rdx, %rax
 3095 1232 488B95B8 		movq	-840(%rbp), %rdx
 3095      FCFFFF
 3096 1239 8B12     		movl	(%rdx), %edx
 3097 123b 8D4A08   		leal	8(%rdx), %ecx
 3098 123e 488B95B8 		movq	-840(%rbp), %rdx
 3098      FCFFFF
 3099 1245 890A     		movl	%ecx, (%rdx)
 3100 1247 EB1A     		jmp	.L237
 3101              	.L236:
 3102 1249 488B85B8 		movq	-840(%rbp), %rax
 3102      FCFFFF
 3103 1250 488B4008 		movq	8(%rax), %rax
 3104 1254 488D4808 		leaq	8(%rax), %rcx
 3105 1258 488B95B8 		movq	-840(%rbp), %rdx
 3105      FCFFFF
 3106 125f 48894A08 		movq	%rcx, 8(%rdx)
 3107              	.L237:
 3108 1263 8B00     		movl	(%rax), %eax
 3109              		.loc 2 1070 39
 3110 1265 89C0     		movl	%eax, %eax
 3111 1267 48898570 		movq	%rax, -656(%rbp)
 3111      FDFFFF
 3112              	.L193:
1071:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1072:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1073:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1074:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1075:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* check for negative; copy into number */
1076:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if ((formatAttr.flags & SECUREC_FLAG_SIGNED) && l < 0) {
 3113              		.loc 2 1076 44
 3114 126e 8B85B0FD 		movl	-592(%rbp), %eax
 3114      FFFF
 3115              		.loc 2 1076 51
 3116 1274 83E040   		andl	$64, %eax
 3117              		.loc 2 1076 32
 3118 1277 85C0     		testl	%eax, %eax
 3119 1279 742C     		je	.L238
 3120              		.loc 2 1076 74 discriminator 1
 3121 127b 4883BD70 		cmpq	$0, -656(%rbp)
 3121      FDFFFF00 
 3122 1283 7922     		jns	.L238
1077:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 number = (SecUnsignedInt64)(-l);
 3123              		.loc 2 1077 61
 3124 1285 488B8570 		movq	-656(%rbp), %rax
 3124      FDFFFF
 3125 128c 48F7D8   		negq	%rax
 3126              		.loc 2 1077 40
 3127 128f 48898568 		movq	%rax, -664(%rbp)
 3127      FDFFFF
1078:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_NEGATIVE;
 3128              		.loc 2 1078 50
 3129 1296 8B85B0FD 		movl	-592(%rbp), %eax
 3129      FFFF
 3130 129c 80CC01   		orb	$1, %ah
 3131 129f 8985B0FD 		movl	%eax, -592(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 96


 3131      FFFF
 3132 12a5 EB0E     		jmp	.L239
 3133              	.L238:
1079:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
1080:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 number = (SecUnsignedInt64)l;
 3134              		.loc 2 1080 40
 3135 12a7 488B8570 		movq	-656(%rbp), %rax
 3135      FDFFFF
 3136 12ae 48898568 		movq	%rax, -664(%rbp)
 3136      FDFFFF
 3137              	.L239:
1081:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1082:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1083:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (((formatAttr.flags & SECUREC_FLAG_I64) == 0) &&
 3138              		.loc 2 1083 45
 3139 12b5 8B85B0FD 		movl	-592(%rbp), %eax
 3139      FFFF
 3140              		.loc 2 1083 52
 3141 12bb 25008000 		andl	$32768, %eax
 3141      00
 3142              		.loc 2 1083 32
 3143 12c0 85C0     		testl	%eax, %eax
 3144 12c2 7555     		jne	.L240
1084:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
1085:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_INTMAX) == 0) &&
 3145              		.loc 2 1085 45 discriminator 1
 3146 12c4 8B85B0FD 		movl	-592(%rbp), %eax
 3146      FFFF
 3147              		.loc 2 1085 52 discriminator 1
 3148 12ca 25000004 		andl	$262144, %eax
 3148      00
1083:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 3149              		.loc 2 1083 78 discriminator 1
 3150 12cf 85C0     		testl	%eax, %eax
 3151 12d1 7546     		jne	.L240
1086:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1087:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
1088:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_PTRDIFF) == 0) &&
 3152              		.loc 2 1088 45
 3153 12d3 8B85B0FD 		movl	-592(%rbp), %eax
 3153      FFFF
 3154              		.loc 2 1088 52
 3155 12d9 25000001 		andl	$65536, %eax
 3155      00
1085:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 3156              		.loc 2 1085 81
 3157 12de 85C0     		testl	%eax, %eax
 3158 12e0 7537     		jne	.L240
1089:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_SIZE) == 0) &&
 3159              		.loc 2 1089 45
 3160 12e2 8B85B0FD 		movl	-592(%rbp), %eax
 3160      FFFF
 3161              		.loc 2 1089 52
 3162 12e8 25000002 		andl	$131072, %eax
 3162      00
1088:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_SIZE) == 0) &&
 3163              		.loc 2 1088 82
GAS LISTING /tmp/ccPPTXZA.s 			page 97


 3164 12ed 85C0     		testl	%eax, %eax
 3165 12ef 7528     		jne	.L240
1090:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if !defined(SECUREC_COMPATIBLE_WIN_FORMAT)  /* on window 64 system sizeof long is 32bit */
1091:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_LONG) == 0) &&
 3166              		.loc 2 1091 45
 3167 12f1 8B85B0FD 		movl	-592(%rbp), %eax
 3167      FFFF
 3168              		.loc 2 1091 52
 3169 12f7 83E010   		andl	$16, %eax
1089:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if !defined(SECUREC_COMPATIBLE_WIN_FORMAT)  /* on window 64 system sizeof long is 32bit */
 3170              		.loc 2 1089 79
 3171 12fa 85C0     		testl	%eax, %eax
 3172 12fc 751B     		jne	.L240
1092:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1093:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1094:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_LONGLONG) == 0)) {
 3173              		.loc 2 1094 45
 3174 12fe 8B85B0FD 		movl	-592(%rbp), %eax
 3174      FFFF
 3175              		.loc 2 1094 52
 3176 1304 25001000 		andl	$4096, %eax
 3176      00
1091:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 3177              		.loc 2 1091 79
 3178 1309 85C0     		testl	%eax, %eax
 3179 130b 750C     		jne	.L240
1095:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1096:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     number &= 0xffffffff;  /* use 0xffffffff as 32 bit mask */
 3180              		.loc 2 1096 44
 3181 130d B8FFFFFF 		movl	$4294967295, %eax
 3181      FF
 3182 1312 48218568 		andq	%rax, -664(%rbp)
 3182      FDFFFF
 3183              	.L240:
1097:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1098:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1099:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* check precision value for default */
1100:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.precision < 0) {
 3184              		.loc 2 1100 43
 3185 1319 8B85B8FD 		movl	-584(%rbp), %eax
 3185      FFFF
 3186              		.loc 2 1100 32
 3187 131f 85C0     		testl	%eax, %eax
 3188 1321 790C     		jns	.L241
1101:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;   /* default precision */
 3189              		.loc 2 1101 54
 3190 1323 C785B8FD 		movl	$1, -584(%rbp)
 3190      FFFF0100 
 3190      0000
 3191 132d EB35     		jmp	.L242
 3192              	.L241:
1102:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
1103:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT)
1104:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
1105:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1106:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (!(formatAttr.flags & SECUREC_FLAG_POINTER)) {
 3193              		.loc 2 1106 49
GAS LISTING /tmp/ccPPTXZA.s 			page 98


 3194 132f 8B85B0FD 		movl	-592(%rbp), %eax
 3194      FFFF
 3195              		.loc 2 1106 56
 3196 1335 25004000 		andl	$16384, %eax
 3196      00
 3197              		.loc 2 1106 36
 3198 133a 85C0     		testl	%eax, %eax
 3199 133c 750F     		jne	.L243
1107:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
 3200              		.loc 2 1107 54
 3201 133e 8B85B0FD 		movl	-592(%rbp), %eax
 3201      FFFF
 3202 1344 83E0F7   		andl	$-9, %eax
 3203 1347 8985B0FD 		movl	%eax, -592(%rbp)
 3203      FFFF
 3204              	.L243:
1108:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1109:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1110:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.precision > SECUREC_MAX_PRECISION) {
 3205              		.loc 2 1110 47
 3206 134d 8B85B8FD 		movl	-584(%rbp), %eax
 3206      FFFF
 3207              		.loc 2 1110 36
 3208 1353 3D000200 		cmpl	$512, %eax
 3208      00
 3209 1358 7E0A     		jle	.L242
1111:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatAttr.precision = SECUREC_MAX_PRECISION;
 3210              		.loc 2 1111 58
 3211 135a C785B8FD 		movl	$512, -584(%rbp)
 3211      FFFF0002 
 3211      0000
 3212              	.L242:
1112:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1113:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1114:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1115:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* Check if data is 0; if so, turn off hex prefix,
1116:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              * 'p' add 0x prefix, otherwise not add prefix
1117:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              */
1118:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (number == 0) {
 3213              		.loc 2 1118 32
 3214 1364 4883BD68 		cmpq	$0, -664(%rbp)
 3214      FDFFFF00 
 3215 136c 750A     		jne	.L244
1119:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if !(defined(SECUREC_VXWORKS_PLATFORM) || defined(__hpux))
1120:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = 0;
 3216              		.loc 2 1120 43
 3217 136e C785E8FC 		movl	$0, -792(%rbp)
 3217      FFFF0000 
 3217      0000
 3218              	.L244:
1121:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1122:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if ((ch == 'p') && (formatAttr.flags & SECUREC_FLAG_ALTERNATE)) {
1123:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     prefixLen = SECUREC_PREFIX_LEN;
1124:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1125:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     prefixLen = 0;
1126:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1127:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
GAS LISTING /tmp/ccPPTXZA.s 			page 99


1128:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1129:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1130:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* Convert data to ASCII */
1131:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatBuf.str = &buffer.str[SECUREC_BUFFER_SIZE];
 3219              		.loc 2 1131 43
 3220 1378 488D85D0 		leaq	-560(%rbp), %rax
 3220      FDFFFF
 3221 137f 48050002 		addq	$512, %rax
 3221      0000
 3222 1385 48898538 		movq	%rax, -712(%rbp)
 3222      FDFFFF
1132:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1133:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (number > 0) {
 3223              		.loc 2 1133 32
 3224 138c 4883BD68 		cmpq	$0, -664(%rbp)
 3224      FDFFFF00 
 3225 1394 0F846A01 		je	.L297
 3225      0000
 3226 139a 83BDE4FC 		cmpl	$16, -796(%rbp)
 3226      FFFF10
 3227 13a1 0F84B600 		je	.L246
 3227      0000
 3228 13a7 83BDE4FC 		cmpl	$16, -796(%rbp)
 3228      FFFF10
 3229 13ae 0F875301 		ja	.L298
 3229      0000
 3230 13b4 83BDE4FC 		cmpl	$8, -796(%rbp)
 3230      FFFF08
 3231 13bb 0F84F000 		je	.L248
 3231      0000
 3232 13c1 83BDE4FC 		cmpl	$10, -796(%rbp)
 3232      FFFF0A
 3233 13c8 0F853901 		jne	.L298
 3233      0000
 3234 13ce EB01     		jmp	.L249
 3235              	.L299:
1134:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
1135:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 switch (radix) {
1136:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* the compiler will optimize each one */
1137:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     case SECUREC_RADIX_DECIMAL:
 3236              		.loc 2 1137 37
 3237 13d0 90       		nop
 3238              	.L249:
1138:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SECUREC_SPECIAL_QWORD_BASE10(number);
 3239              		.loc 2 1138 41 discriminator 1
 3240 13d1 488B8538 		movq	-712(%rbp), %rax
 3240      FDFFFF
 3241 13d8 4883E801 		subq	$1, %rax
 3242 13dc 48898538 		movq	%rax, -712(%rbp)
 3242      FDFFFF
 3243 13e3 488B8D68 		movq	-664(%rbp), %rcx
 3243      FDFFFF
 3244 13ea 48BACDCC 		movabsq	$-3689348814741910323, %rdx
 3244      CCCCCCCC 
 3244      CCCC
 3245 13f4 4889C8   		movq	%rcx, %rax
 3246 13f7 48F7E2   		mulq	%rdx
GAS LISTING /tmp/ccPPTXZA.s 			page 100


 3247 13fa 48C1EA03 		shrq	$3, %rdx
 3248 13fe 4889D0   		movq	%rdx, %rax
 3249 1401 48C1E002 		salq	$2, %rax
 3250 1405 4801D0   		addq	%rdx, %rax
 3251 1408 4801C0   		addq	%rax, %rax
 3252 140b 4829C1   		subq	%rax, %rcx
 3253 140e 4889CA   		movq	%rcx, %rdx
 3254 1411 488B8548 		movq	-696(%rbp), %rax
 3254      FDFFFF
 3255 1418 4801C2   		addq	%rax, %rdx
 3256 141b 488B8538 		movq	-712(%rbp), %rax
 3256      FDFFFF
 3257 1422 0FB612   		movzbl	(%rdx), %edx
 3258 1425 8810     		movb	%dl, (%rax)
 3259 1427 488B8568 		movq	-664(%rbp), %rax
 3259      FDFFFF
 3260 142e 48BACDCC 		movabsq	$-3689348814741910323, %rdx
 3260      CCCCCCCC 
 3260      CCCC
 3261 1438 48F7E2   		mulq	%rdx
 3262 143b 4889D0   		movq	%rdx, %rax
 3263 143e 48C1E803 		shrq	$3, %rax
 3264 1442 48898568 		movq	%rax, -664(%rbp)
 3264      FDFFFF
 3265 1449 4883BD68 		cmpq	$0, -664(%rbp)
 3265      FDFFFF00 
 3266 1451 0F8579FF 		jne	.L299
 3266      FFFF
1139:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 3267              		.loc 2 1139 41
 3268 1457 E9AC0000 		jmp	.L245
 3268      00
 3269              	.L300:
1140:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     case SECUREC_RADIX_HEX:
 3270              		.loc 2 1140 37
 3271 145c 90       		nop
 3272              	.L246:
1141:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_HEX);
 3273              		.loc 2 1141 41 discriminator 1
 3274 145d 488B8538 		movq	-712(%rbp), %rax
 3274      FDFFFF
 3275 1464 4883E801 		subq	$1, %rax
 3276 1468 48898538 		movq	%rax, -712(%rbp)
 3276      FDFFFF
 3277 146f 488B8568 		movq	-664(%rbp), %rax
 3277      FDFFFF
 3278 1476 83E00F   		andl	$15, %eax
 3279 1479 4889C2   		movq	%rax, %rdx
 3280 147c 488B8548 		movq	-696(%rbp), %rax
 3280      FDFFFF
 3281 1483 4801C2   		addq	%rax, %rdx
 3282 1486 488B8538 		movq	-712(%rbp), %rax
 3282      FDFFFF
 3283 148d 0FB612   		movzbl	(%rdx), %edx
 3284 1490 8810     		movb	%dl, (%rax)
 3285 1492 488B8568 		movq	-664(%rbp), %rax
 3285      FDFFFF
GAS LISTING /tmp/ccPPTXZA.s 			page 101


 3286 1499 48C1E804 		shrq	$4, %rax
 3287 149d 48898568 		movq	%rax, -664(%rbp)
 3287      FDFFFF
 3288 14a4 4883BD68 		cmpq	$0, -664(%rbp)
 3288      FDFFFF00 
 3289 14ac 75AE     		jne	.L300
1142:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 3290              		.loc 2 1142 41
 3291 14ae EB58     		jmp	.L245
 3292              	.L301:
1143:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     case SECUREC_RADIX_OCTAL:
 3293              		.loc 2 1143 37
 3294 14b0 90       		nop
 3295              	.L248:
1144:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_OCTAL);
 3296              		.loc 2 1144 41 discriminator 1
 3297 14b1 488B8538 		movq	-712(%rbp), %rax
 3297      FDFFFF
 3298 14b8 4883E801 		subq	$1, %rax
 3299 14bc 48898538 		movq	%rax, -712(%rbp)
 3299      FDFFFF
 3300 14c3 488B8568 		movq	-664(%rbp), %rax
 3300      FDFFFF
 3301 14ca 83E007   		andl	$7, %eax
 3302 14cd 4889C2   		movq	%rax, %rdx
 3303 14d0 488B8548 		movq	-696(%rbp), %rax
 3303      FDFFFF
 3304 14d7 4801C2   		addq	%rax, %rdx
 3305 14da 488B8538 		movq	-712(%rbp), %rax
 3305      FDFFFF
 3306 14e1 0FB612   		movzbl	(%rdx), %edx
 3307 14e4 8810     		movb	%dl, (%rax)
 3308 14e6 488B8568 		movq	-664(%rbp), %rax
 3308      FDFFFF
 3309 14ed 48C1E803 		shrq	$3, %rax
 3310 14f1 48898568 		movq	%rax, -664(%rbp)
 3310      FDFFFF
 3311 14f8 4883BD68 		cmpq	$0, -664(%rbp)
 3311      FDFFFF00 
 3312 1500 75AE     		jne	.L301
1145:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 3313              		.loc 2 1145 41
 3314 1502 EB04     		jmp	.L245
 3315              	.L297:
1146:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     default:
1147:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
1148:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1149:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* for 32 bits system */
1150:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (number <= 0xFFFFFFFFUL) {
1151:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* in most case, the value to be converted is small value */
1152:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     SecUnsignedInt32 n32Tmp = (SecUnsignedInt32)number;
1153:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     switch (radix) {
1154:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_HEX:
1155:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_DWORD(n32Tmp, SECUREC_RADIX_HEX);
1156:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1157:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_OCTAL:
1158:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_DWORD(n32Tmp, SECUREC_RADIX_OCTAL);
GAS LISTING /tmp/ccPPTXZA.s 			page 102


1159:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1160:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1161:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef _AIX
1162:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* the compiler will optimize div 10 */
1163:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_DECIMAL:
1164:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_DWORD(n32Tmp, SECUREC_RADIX_DECIMAL);
1165:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1166:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1167:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_DECIMAL:
1168:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             do {
1169:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 /* fast div 10 */
1170:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 SecUnsignedInt32 q;
1171:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 SecUnsignedInt32 r;
1172:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 do {
1173:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     *--formatBuf.str = digits[n32Tmp % SECUREC_RADI
1174:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = (n32Tmp >> 1) + (n32Tmp >> 2); /* fast div 
1175:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q + (q >> 4); /* fast div  magic 4 */
1176:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q + (q >> 8); /* fast div  magic 8 */
1177:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q + (q >> 16); /* fast div  magic 16 */
1178:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q >> 3; /* fast div  magic 3 */
1179:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     r = n32Tmp - SECUREC_MUL_TEN(q);
1180:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     n32Tmp = (r > 9) ? (q + 1) : q; /* fast div  ma
1181:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 } while (n32Tmp != 0);
1182:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             } SECUREC_WHILE_ZERO;
1183:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1184:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1185:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         default:
1186:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1187:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }   /* end switch */
1188:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1189:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* the value to be converted is greater than 4G */
1190:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_VXWORKS_VERSION_5_4)
1191:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     do {
1192:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SecUnsignedInt32 digit = 0; /* ascii value of digit */
1193:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SecUnsignedInt64 quotient = 0;
1194:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         if (SecU64Div32(number,(SecUnsignedInt32)radix, &quotient, 
1195:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             noOutput = 1;
1196:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1197:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         }
1198:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         *--formatBuf.str = digits[digit];
1199:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         number = quotient;
1200:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } while (number != 0);
1201:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1202:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     switch (radix) {
1203:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* the compiler will optimize div 10 */
1204:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_DECIMAL:
1205:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_QWORD_BASE10(number);
1206:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1207:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_OCTAL:
1208:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_OCTAL);
1209:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1210:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_HEX:
1211:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_HEX);
1212:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1213:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         default:
1214:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1215:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
GAS LISTING /tmp/ccPPTXZA.s 			page 103


1216:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1217:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1218:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1219:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1220:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 3316              		.loc 2 1220 29
 3317 1504 90       		nop
 3318 1505 EB01     		jmp	.L245
 3319              	.L298:
1147:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 3320              		.loc 2 1147 41
 3321 1507 90       		nop
 3322              	.L245:
1221:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* compute length of number,.if textLen > 0, then formatBuf.str must be
1222:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             textLen = (int)(size_t)((char *)&buffer.str[SECUREC_BUFFER_SIZE] - form
 3323              		.loc 2 1222 105
 3324 1508 488B8538 		movq	-712(%rbp), %rax
 3324      FDFFFF
 3325              		.loc 2 1222 94
 3326 150f 488D95D0 		leaq	-560(%rbp), %rdx
 3326      FDFFFF
 3327 1516 4881C200 		addq	$512, %rdx
 3327      020000
 3328 151d 4829C2   		subq	%rax, %rdx
 3329 1520 4889D0   		movq	%rdx, %rax
 3330              		.loc 2 1222 37
 3331 1523 8985ECFC 		movl	%eax, -788(%rbp)
 3331      FFFF
1223:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.precision > textLen) {
 3332              		.loc 2 1223 43
 3333 1529 8B85B8FD 		movl	-584(%rbp), %eax
 3333      FFFF
 3334              		.loc 2 1223 32
 3335 152f 3985ECFC 		cmpl	%eax, -788(%rbp)
 3335      FFFF
 3336 1535 7D4F     		jge	.L250
 3337              	.LBB14:
1224:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 int ii;
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 for (ii = 0; ii < formatAttr.precision - textLen; ++ii) {
 3338              		.loc 2 1225 41
 3339 1537 C78500FD 		movl	$0, -768(%rbp)
 3339      FFFF0000 
 3339      0000
 3340              		.loc 2 1225 33
 3341 1541 EB23     		jmp	.L251
 3342              	.L252:
1226:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3343              		.loc 2 1226 49 discriminator 3
 3344 1543 488B8538 		movq	-712(%rbp), %rax
 3344      FDFFFF
 3345              		.loc 2 1226 38 discriminator 3
 3346 154a 4883E801 		subq	$1, %rax
 3347              		.loc 2 1226 54 discriminator 3
 3348 154e 48898538 		movq	%rax, -712(%rbp)
 3348      FDFFFF
 3349              		.loc 2 1226 49 discriminator 3
 3350 1555 488B8538 		movq	-712(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 104


 3350      FDFFFF
 3351              		.loc 2 1226 54 discriminator 3
 3352 155c C60030   		movb	$48, (%rax)
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3353              		.loc 2 1225 83 discriminator 3
 3354 155f 838500FD 		addl	$1, -768(%rbp)
 3354      FFFF01
 3355              	.L251:
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3356              		.loc 2 1225 61 discriminator 1
 3357 1566 8B85B8FD 		movl	-584(%rbp), %eax
 3357      FFFF
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3358              		.loc 2 1225 72 discriminator 1
 3359 156c 2B85ECFC 		subl	-788(%rbp), %eax
 3359      FFFF
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3360              		.loc 2 1225 33 discriminator 1
 3361 1572 398500FD 		cmpl	%eax, -768(%rbp)
 3361      FFFF
 3362 1578 7CC9     		jl	.L252
1227:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1228:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 textLen = formatAttr.precision;
 3363              		.loc 2 1228 41
 3364 157a 8B85B8FD 		movl	-584(%rbp), %eax
 3364      FFFF
 3365 1580 8985ECFC 		movl	%eax, -788(%rbp)
 3365      FFFF
 3366              	.L250:
 3367              	.LBE14:
1229:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1230:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1231:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* Force a leading zero if FORCEOCTAL flag set */
1232:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if ((formatAttr.flags & SECUREC_FLAG_FORCE_OCTAL) &&
 3368              		.loc 2 1232 44
 3369 1586 8B85B0FD 		movl	-592(%rbp), %eax
 3369      FFFF
 3370              		.loc 2 1232 51
 3371 158c 25000200 		andl	$512, %eax
 3371      00
 3372              		.loc 2 1232 32
 3373 1591 85C0     		testl	%eax, %eax
 3374 1593 7442     		je	.L302
 3375              		.loc 2 1232 79 discriminator 1
 3376 1595 83BDECFC 		cmpl	$0, -788(%rbp)
 3376      FFFF00
 3377 159c 740E     		je	.L254
1233:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 (textLen == 0 || formatBuf.str[0] != '0')) {
 3378              		.loc 2 1233 59
 3379 159e 488B8538 		movq	-712(%rbp), %rax
 3379      FDFFFF
 3380              		.loc 2 1233 63
 3381 15a5 0FB600   		movzbl	(%rax), %eax
 3382              		.loc 2 1233 47
 3383 15a8 3C30     		cmpb	$48, %al
 3384 15aa 742B     		je	.L302
 3385              	.L254:
GAS LISTING /tmp/ccPPTXZA.s 			page 105


1234:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 *--formatBuf.str = '0';
 3386              		.loc 2 1234 45
 3387 15ac 488B8538 		movq	-712(%rbp), %rax
 3387      FDFFFF
 3388              		.loc 2 1234 34
 3389 15b3 4883E801 		subq	$1, %rax
 3390              		.loc 2 1234 50
 3391 15b7 48898538 		movq	%rax, -712(%rbp)
 3391      FDFFFF
 3392              		.loc 2 1234 45
 3393 15be 488B8538 		movq	-712(%rbp), %rax
 3393      FDFFFF
 3394              		.loc 2 1234 50
 3395 15c5 C60030   		movb	$48, (%rax)
1235:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ++textLen;  /* add a zero */
 3396              		.loc 2 1235 33
 3397 15c8 8385ECFC 		addl	$1, -788(%rbp)
 3397      FFFF01
 3398              	.LBE12:
1236:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1237:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
1238:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 3399              		.loc 2 1238 25
 3400 15cf EB06     		jmp	.L302
 3401              	.L292:
1239:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     default:
1240:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 3402              		.loc 2 1240 25
 3403 15d1 90       		nop
 3404 15d2 EB04     		jmp	.L150
 3405              	.L293:
 752:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('S'):    /* wide char string */
 3406              		.loc 2 752 25
 3407 15d4 90       		nop
 3408 15d5 EB01     		jmp	.L150
 3409              	.L302:
1238:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     default:
 3410              		.loc 2 1238 25
 3411 15d7 90       		nop
 3412              	.L150:
1241:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
1242:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1243:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 while (noOutput < 1) {
 3413              		.loc 2 1243 23
 3414 15d8 83BDF0FC 		cmpl	$0, -784(%rbp)
 3414      FFFF00
 3415 15df 0F8F9006 		jg	.L255
 3415      0000
1244:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 3416              		.loc 2 1244 35
 3417 15e5 8B85B0FD 		movl	-592(%rbp), %eax
 3417      FFFF
 3418              		.loc 2 1244 42
 3419 15eb 83E040   		andl	$64, %eax
 3420              		.loc 2 1244 24
 3421 15ee 85C0     		testl	%eax, %eax
 3422 15f0 7457     		je	.L256
GAS LISTING /tmp/ccPPTXZA.s 			page 106


1245:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (formatAttr.flags & SECUREC_FLAG_NEGATIVE) {
 3423              		.loc 2 1245 39
 3424 15f2 8B85B0FD 		movl	-592(%rbp), %eax
 3424      FFFF
 3425              		.loc 2 1245 46
 3426 15f8 25000100 		andl	$256, %eax
 3426      00
 3427              		.loc 2 1245 28
 3428 15fd 85C0     		testl	%eax, %eax
 3429 15ff 7410     		je	.L257
1246:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* prefix is a '-' */
1247:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR('-');
 3430              		.loc 2 1247 39
 3431 1601 C645DE2D 		movb	$45, -34(%rbp)
1248:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = 1;
 3432              		.loc 2 1248 39
 3433 1605 C785E8FC 		movl	$1, -792(%rbp)
 3433      FFFF0100 
 3433      0000
 3434 160f EB38     		jmp	.L256
 3435              	.L257:
1249:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else if (formatAttr.flags & SECUREC_FLAG_SIGN) {
 3436              		.loc 2 1249 46
 3437 1611 8B85B0FD 		movl	-592(%rbp), %eax
 3437      FFFF
 3438              		.loc 2 1249 53
 3439 1617 83E001   		andl	$1, %eax
 3440              		.loc 2 1249 35
 3441 161a 85C0     		testl	%eax, %eax
 3442 161c 7410     		je	.L258
1250:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* prefix is '+' */
1251:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR('+');
 3443              		.loc 2 1251 39
 3444 161e C645DE2B 		movb	$43, -34(%rbp)
1252:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = 1;
 3445              		.loc 2 1252 39
 3446 1622 C785E8FC 		movl	$1, -792(%rbp)
 3446      FFFF0100 
 3446      0000
 3447 162c EB1B     		jmp	.L256
 3448              	.L258:
1253:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else if (formatAttr.flags & SECUREC_FLAG_SIGN_SPACE) {
 3449              		.loc 2 1253 46
 3450 162e 8B85B0FD 		movl	-592(%rbp), %eax
 3450      FFFF
 3451              		.loc 2 1253 53
 3452 1634 83E002   		andl	$2, %eax
 3453              		.loc 2 1253 35
 3454 1637 85C0     		testl	%eax, %eax
 3455 1639 740E     		je	.L256
1254:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* prefix is ' ' */
1255:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR(' ');
 3456              		.loc 2 1255 39
 3457 163b C645DE20 		movb	$32, -34(%rbp)
1256:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = 1;
 3458              		.loc 2 1256 39
 3459 163f C785E8FC 		movl	$1, -792(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 107


 3459      FFFF0100 
 3459      0000
 3460              	.L256:
1257:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1258:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1259:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1260:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_LINUX_FORMAT) && (!defined(SECUREC_ON_UNIX))
1261:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if ((formatAttr.flags & SECUREC_FLAG_POINTER) && (textLen == 0)) {
 3461              		.loc 2 1261 36
 3462 1649 8B85B0FD 		movl	-592(%rbp), %eax
 3462      FFFF
 3463              		.loc 2 1261 43
 3464 164f 25004000 		andl	$16384, %eax
 3464      00
 3465              		.loc 2 1261 24
 3466 1654 85C0     		testl	%eax, %eax
 3467 1656 0F84AD00 		je	.L259
 3467      0000
 3468              		.loc 2 1261 67 discriminator 1
 3469 165c 83BDECFC 		cmpl	$0, -788(%rbp)
 3469      FFFF00
 3470 1663 0F85A000 		jne	.L259
 3470      0000
1262:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
 3471              		.loc 2 1262 42
 3472 1669 8B85B0FD 		movl	-592(%rbp), %eax
 3472      FFFF
 3473 166f 83E0F7   		andl	$-9, %eax
 3474 1672 8985B0FD 		movl	%eax, -592(%rbp)
 3474      FFFF
1263:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         formatBuf.str = &buffer.str[SECUREC_BUFFER_SIZE - 1];
 3475              		.loc 2 1263 39
 3476 1678 488D85D0 		leaq	-560(%rbp), %rax
 3476      FDFFFF
 3477 167f 4805FF01 		addq	$511, %rax
 3477      0000
 3478 1685 48898538 		movq	%rax, -712(%rbp)
 3478      FDFFFF
1264:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = '\0';
 3479              		.loc 2 1264 35
 3480 168c 488B8538 		movq	-712(%rbp), %rax
 3480      FDFFFF
 3481              		.loc 2 1264 39
 3482 1693 488D50FF 		leaq	-1(%rax), %rdx
 3483 1697 48899538 		movq	%rdx, -712(%rbp)
 3483      FDFFFF
 3484              		.loc 2 1264 42
 3485 169e C60000   		movb	$0, (%rax)
1265:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = ')';
 3486              		.loc 2 1265 35
 3487 16a1 488B8538 		movq	-712(%rbp), %rax
 3487      FDFFFF
 3488              		.loc 2 1265 39
 3489 16a8 488D50FF 		leaq	-1(%rax), %rdx
 3490 16ac 48899538 		movq	%rdx, -712(%rbp)
 3490      FDFFFF
 3491              		.loc 2 1265 42
GAS LISTING /tmp/ccPPTXZA.s 			page 108


 3492 16b3 C60029   		movb	$41, (%rax)
1266:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = 'l';
 3493              		.loc 2 1266 35
 3494 16b6 488B8538 		movq	-712(%rbp), %rax
 3494      FDFFFF
 3495              		.loc 2 1266 39
 3496 16bd 488D50FF 		leaq	-1(%rax), %rdx
 3497 16c1 48899538 		movq	%rdx, -712(%rbp)
 3497      FDFFFF
 3498              		.loc 2 1266 42
 3499 16c8 C6006C   		movb	$108, (%rax)
1267:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = 'i';
 3500              		.loc 2 1267 35
 3501 16cb 488B8538 		movq	-712(%rbp), %rax
 3501      FDFFFF
 3502              		.loc 2 1267 39
 3503 16d2 488D50FF 		leaq	-1(%rax), %rdx
 3504 16d6 48899538 		movq	%rdx, -712(%rbp)
 3504      FDFFFF
 3505              		.loc 2 1267 42
 3506 16dd C60069   		movb	$105, (%rax)
1268:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = 'n';
 3507              		.loc 2 1268 35
 3508 16e0 488B8538 		movq	-712(%rbp), %rax
 3508      FDFFFF
 3509              		.loc 2 1268 39
 3510 16e7 488D50FF 		leaq	-1(%rax), %rdx
 3511 16eb 48899538 		movq	%rdx, -712(%rbp)
 3511      FDFFFF
 3512              		.loc 2 1268 42
 3513 16f2 C6006E   		movb	$110, (%rax)
1269:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str = '(';
 3514              		.loc 2 1269 35
 3515 16f5 488B8538 		movq	-712(%rbp), %rax
 3515      FDFFFF
 3516              		.loc 2 1269 40
 3517 16fc C60028   		movb	$40, (%rax)
1270:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         textLen = 5; /* length of (nil) is 5 */
 3518              		.loc 2 1270 33
 3519 16ff C785ECFC 		movl	$5, -788(%rbp)
 3519      FFFF0500 
 3519      0000
 3520              	.L259:
1271:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1272:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1273:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1274:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* calculate amount of padding */
1275:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     padding = (formatAttr.fldWidth - textLen) - prefixLen;
 3521              		.loc 2 1275 42
 3522 1709 8B85B4FD 		movl	-588(%rbp), %eax
 3522      FFFF
 3523              		.loc 2 1275 52
 3524 170f 2B85ECFC 		subl	-788(%rbp), %eax
 3524      FFFF
 3525              		.loc 2 1275 29
 3526 1715 2B85E8FC 		subl	-792(%rbp), %eax
 3526      FFFF
GAS LISTING /tmp/ccPPTXZA.s 			page 109


 3527 171b 89851CFD 		movl	%eax, -740(%rbp)
 3527      FFFF
1276:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1277:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* put out the padding, prefix, and text, in the correct order */
1278:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1279:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (!(formatAttr.flags & (SECUREC_FLAG_LEFT | SECUREC_FLAG_LEADZERO)) && paddin
 3528              		.loc 2 1279 37
 3529 1721 8B85B0FD 		movl	-592(%rbp), %eax
 3529      FFFF
 3530              		.loc 2 1279 44
 3531 1727 83E00C   		andl	$12, %eax
 3532              		.loc 2 1279 24
 3533 172a 85C0     		testl	%eax, %eax
 3534 172c 0F85B900 		jne	.L260
 3534      0000
 3535              		.loc 2 1279 91 discriminator 1
 3536 1732 83BD1CFD 		cmpl	$0, -740(%rbp)
 3536      FFFF00
 3537 1739 0F8EAC00 		jle	.L260
 3537      0000
1280:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* pad on left with blanks */
1281:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, padding)) {
 3538              		.loc 2 1281 29
 3539 173f 488B85C8 		movq	-824(%rbp), %rax
 3539      FCFFFF
 3540 1746 8B00     		movl	(%rax), %eax
 3541 1748 2B851CFD 		subl	-740(%rbp), %eax
 3541      FFFF
 3542              		.loc 2 1281 28
 3543 174e 85C0     		testl	%eax, %eax
 3544 1750 7879     		js	.L261
 3545              	.LBB15:
1282:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1283:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_PADDING(SECUREC_CHAR(' '), padding, stream, &charsOut);
 3546              		.loc 2 1283 29
 3547 1752 C78504FD 		movl	$0, -764(%rbp)
 3547      FFFF0000 
 3547      0000
 3548 175c EB2F     		jmp	.L262
 3549              	.L263:
 3550              		.loc 2 1283 29 is_stmt 0 discriminator 3
 3551 175e 488B85C8 		movq	-824(%rbp), %rax
 3551      FCFFFF
 3552 1765 488B4008 		movq	8(%rax), %rax
 3553 1769 C60020   		movb	$32, (%rax)
 3554 176c 488B85C8 		movq	-824(%rbp), %rax
 3554      FCFFFF
 3555 1773 488B4008 		movq	8(%rax), %rax
 3556 1777 488D5001 		leaq	1(%rax), %rdx
 3557 177b 488B85C8 		movq	-824(%rbp), %rax
 3557      FCFFFF
 3558 1782 48895008 		movq	%rdx, 8(%rax)
 3559 1786 838504FD 		addl	$1, -764(%rbp)
 3559      FFFF01
 3560              	.L262:
 3561              		.loc 2 1283 29 discriminator 1
 3562 178d 8B8504FD 		movl	-764(%rbp), %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 110


 3562      FFFF
 3563 1793 3B851CFD 		cmpl	-740(%rbp), %eax
 3563      FFFF
 3564 1799 7CC3     		jl	.L263
 3565              		.loc 2 1283 29 discriminator 4
 3566 179b 488B85C8 		movq	-824(%rbp), %rax
 3566      FCFFFF
 3567 17a2 8B00     		movl	(%rax), %eax
 3568 17a4 2B851CFD 		subl	-740(%rbp), %eax
 3568      FFFF
 3569 17aa 89C2     		movl	%eax, %edx
 3570 17ac 488B85C8 		movq	-824(%rbp), %rax
 3570      FCFFFF
 3571 17b3 8910     		movl	%edx, (%rax)
 3572 17b5 8B95E0FC 		movl	-800(%rbp), %edx
 3572      FFFF
 3573 17bb 8B851CFD 		movl	-740(%rbp), %eax
 3573      FFFF
 3574 17c1 01D0     		addl	%edx, %eax
 3575 17c3 8985E0FC 		movl	%eax, -800(%rbp)
 3575      FFFF
 3576              	.LBE15:
 3577 17c9 EB20     		jmp	.L260
 3578              	.L261:
1284:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1285:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_MULTI_CHAR(SECUREC_CHAR(' '), padding, stream, &charsOut)
 3579              		.loc 2 1285 29 is_stmt 1
 3580 17cb 488D8DE0 		leaq	-800(%rbp), %rcx
 3580      FCFFFF
 3581 17d2 488B95C8 		movq	-824(%rbp), %rdx
 3581      FCFFFF
 3582 17d9 8B851CFD 		movl	-740(%rbp), %eax
 3582      FFFF
 3583 17df 89C6     		movl	%eax, %esi
 3584 17e1 BF200000 		movl	$32, %edi
 3584      00
 3585 17e6 E8000000 		call	SecWriteMultiChar
 3585      00
 3586              	.L260:
1286:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1287:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1288:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1289:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* write prefix */
1290:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (prefixLen > 0) {
 3587              		.loc 2 1290 24
 3588 17eb 83BDE8FC 		cmpl	$0, -792(%rbp)
 3588      FFFF00
 3589 17f2 0F8ECC00 		jle	.L264
 3589      0000
 3590              	.LBB16:
1291:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         SecChar *pPrefix = prefix;
 3591              		.loc 2 1291 34
 3592 17f8 488D45DE 		leaq	-34(%rbp), %rax
 3593 17fc 48898578 		movq	%rax, -648(%rbp)
 3593      FDFFFF
1292:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, prefixLen)) {
 3594              		.loc 2 1292 29
GAS LISTING /tmp/ccPPTXZA.s 			page 111


 3595 1803 488B85C8 		movq	-824(%rbp), %rax
 3595      FCFFFF
 3596 180a 8B00     		movl	(%rax), %eax
 3597 180c 2B85E8FC 		subl	-792(%rbp), %eax
 3597      FFFF
 3598              		.loc 2 1292 28
 3599 1812 85C0     		testl	%eax, %eax
 3600 1814 0F888A00 		js	.L265
 3600      0000
 3601              	.LBB17:
1293:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* max prefix len is 2, use loop copy */ /* char * cast to wchar * in W
1294:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_WRITE_STR_OPT(pPrefix, prefixLen, stream, &charsOut);
 3602              		.loc 2 1294 29
 3603 181a C78508FD 		movl	$0, -760(%rbp)
 3603      FFFF0000 
 3603      0000
 3604 1824 EB40     		jmp	.L266
 3605              	.L267:
 3606              		.loc 2 1294 29 is_stmt 0 discriminator 3
 3607 1826 488B85C8 		movq	-824(%rbp), %rax
 3607      FCFFFF
 3608 182d 488B4008 		movq	8(%rax), %rax
 3609 1831 488B9578 		movq	-648(%rbp), %rdx
 3609      FDFFFF
 3610 1838 0FB612   		movzbl	(%rdx), %edx
 3611 183b 8810     		movb	%dl, (%rax)
 3612 183d 488B85C8 		movq	-824(%rbp), %rax
 3612      FCFFFF
 3613 1844 488B4008 		movq	8(%rax), %rax
 3614 1848 488D5001 		leaq	1(%rax), %rdx
 3615 184c 488B85C8 		movq	-824(%rbp), %rax
 3615      FCFFFF
 3616 1853 48895008 		movq	%rdx, 8(%rax)
 3617 1857 48838578 		addq	$1, -648(%rbp)
 3617      FDFFFF01 
 3618 185f 838508FD 		addl	$1, -760(%rbp)
 3618      FFFF01
 3619              	.L266:
 3620              		.loc 2 1294 29 discriminator 1
 3621 1866 8B8508FD 		movl	-760(%rbp), %eax
 3621      FFFF
 3622 186c 3B85E8FC 		cmpl	-792(%rbp), %eax
 3622      FFFF
 3623 1872 7CB2     		jl	.L267
 3624              		.loc 2 1294 29 discriminator 4
 3625 1874 488B85C8 		movq	-824(%rbp), %rax
 3625      FCFFFF
 3626 187b 8B00     		movl	(%rax), %eax
 3627 187d 2B85E8FC 		subl	-792(%rbp), %eax
 3627      FFFF
 3628 1883 89C2     		movl	%eax, %edx
 3629 1885 488B85C8 		movq	-824(%rbp), %rax
 3629      FCFFFF
 3630 188c 8910     		movl	%edx, (%rax)
 3631 188e 8B95E0FC 		movl	-800(%rbp), %edx
 3631      FFFF
 3632 1894 8B85E8FC 		movl	-792(%rbp), %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 112


 3632      FFFF
 3633 189a 01D0     		addl	%edx, %eax
 3634 189c 8985E0FC 		movl	%eax, -800(%rbp)
 3634      FFFF
 3635              	.LBE17:
 3636 18a2 EB20     		jmp	.L264
 3637              	.L265:
1295:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1296:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(prefix, prefixLen, stream, &charsOut);
 3638              		.loc 2 1296 29 is_stmt 1
 3639 18a4 488D8DE0 		leaq	-800(%rbp), %rcx
 3639      FCFFFF
 3640 18ab 488B95C8 		movq	-824(%rbp), %rdx
 3640      FCFFFF
 3641 18b2 8BB5E8FC 		movl	-792(%rbp), %esi
 3641      FFFF
 3642 18b8 488D45DE 		leaq	-34(%rbp), %rax
 3643 18bc 4889C7   		movq	%rax, %rdi
 3644 18bf E8000000 		call	SecWriteString
 3644      00
 3645              	.L264:
 3646              	.LBE16:
1297:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1298:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1299:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1300:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if ((formatAttr.flags & SECUREC_FLAG_LEADZERO) && !(formatAttr.flags & SECUREC_
 3647              		.loc 2 1300 36
 3648 18c4 8B85B0FD 		movl	-592(%rbp), %eax
 3648      FFFF
 3649              		.loc 2 1300 43
 3650 18ca 83E008   		andl	$8, %eax
 3651              		.loc 2 1300 24
 3652 18cd 85C0     		testl	%eax, %eax
 3653 18cf 0F84CA00 		je	.L268
 3653      0000
 3654              		.loc 2 1300 83 discriminator 1
 3655 18d5 8B85B0FD 		movl	-592(%rbp), %eax
 3655      FFFF
 3656              		.loc 2 1300 90 discriminator 1
 3657 18db 83E004   		andl	$4, %eax
 3658              		.loc 2 1300 68 discriminator 1
 3659 18de 85C0     		testl	%eax, %eax
 3660 18e0 0F85B900 		jne	.L268
 3660      0000
1301:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         && padding > 0) {
 3661              		.loc 2 1301 25
 3662 18e6 83BD1CFD 		cmpl	$0, -740(%rbp)
 3662      FFFF00
 3663 18ed 0F8EAC00 		jle	.L268
 3663      0000
1302:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* write leading zeros */
1303:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, padding)) {
 3664              		.loc 2 1303 29
 3665 18f3 488B85C8 		movq	-824(%rbp), %rax
 3665      FCFFFF
 3666 18fa 8B00     		movl	(%rax), %eax
 3667 18fc 2B851CFD 		subl	-740(%rbp), %eax
GAS LISTING /tmp/ccPPTXZA.s 			page 113


 3667      FFFF
 3668              		.loc 2 1303 28
 3669 1902 85C0     		testl	%eax, %eax
 3670 1904 7879     		js	.L269
 3671              	.LBB18:
1304:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1305:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_PADDING(SECUREC_CHAR('0'), padding, stream, &charsOut);
 3672              		.loc 2 1305 29
 3673 1906 C7850CFD 		movl	$0, -756(%rbp)
 3673      FFFF0000 
 3673      0000
 3674 1910 EB2F     		jmp	.L270
 3675              	.L271:
 3676              		.loc 2 1305 29 is_stmt 0 discriminator 3
 3677 1912 488B85C8 		movq	-824(%rbp), %rax
 3677      FCFFFF
 3678 1919 488B4008 		movq	8(%rax), %rax
 3679 191d C60030   		movb	$48, (%rax)
 3680 1920 488B85C8 		movq	-824(%rbp), %rax
 3680      FCFFFF
 3681 1927 488B4008 		movq	8(%rax), %rax
 3682 192b 488D5001 		leaq	1(%rax), %rdx
 3683 192f 488B85C8 		movq	-824(%rbp), %rax
 3683      FCFFFF
 3684 1936 48895008 		movq	%rdx, 8(%rax)
 3685 193a 83850CFD 		addl	$1, -756(%rbp)
 3685      FFFF01
 3686              	.L270:
 3687              		.loc 2 1305 29 discriminator 1
 3688 1941 8B850CFD 		movl	-756(%rbp), %eax
 3688      FFFF
 3689 1947 3B851CFD 		cmpl	-740(%rbp), %eax
 3689      FFFF
 3690 194d 7CC3     		jl	.L271
 3691              		.loc 2 1305 29 discriminator 4
 3692 194f 488B85C8 		movq	-824(%rbp), %rax
 3692      FCFFFF
 3693 1956 8B00     		movl	(%rax), %eax
 3694 1958 2B851CFD 		subl	-740(%rbp), %eax
 3694      FFFF
 3695 195e 89C2     		movl	%eax, %edx
 3696 1960 488B85C8 		movq	-824(%rbp), %rax
 3696      FCFFFF
 3697 1967 8910     		movl	%edx, (%rax)
 3698 1969 8B95E0FC 		movl	-800(%rbp), %edx
 3698      FFFF
 3699 196f 8B851CFD 		movl	-740(%rbp), %eax
 3699      FFFF
 3700 1975 01D0     		addl	%edx, %eax
 3701 1977 8985E0FC 		movl	%eax, -800(%rbp)
 3701      FFFF
 3702              	.LBE18:
 3703 197d EB20     		jmp	.L268
 3704              	.L269:
1306:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1307:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_MULTI_CHAR(SECUREC_CHAR('0'), padding, stream, &charsOut)
 3705              		.loc 2 1307 29 is_stmt 1
GAS LISTING /tmp/ccPPTXZA.s 			page 114


 3706 197f 488D8DE0 		leaq	-800(%rbp), %rcx
 3706      FCFFFF
 3707 1986 488B95C8 		movq	-824(%rbp), %rdx
 3707      FCFFFF
 3708 198d 8B851CFD 		movl	-740(%rbp), %eax
 3708      FFFF
 3709 1993 89C6     		movl	%eax, %esi
 3710 1995 BF300000 		movl	$48, %edi
 3710      00
 3711 199a E8000000 		call	SecWriteMultiChar
 3711      00
 3712              	.L268:
1308:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1309:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1310:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1311:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* write text */
1312:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifndef SECUREC_FOR_WCHAR
1313:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (formatAttr.bufferIsWide != 0 && (textLen > 0)) {
 3713              		.loc 2 1313 35
 3714 199f 8B85BCFD 		movl	-580(%rbp), %eax
 3714      FFFF
 3715              		.loc 2 1313 24
 3716 19a5 85C0     		testl	%eax, %eax
 3717 19a7 0F849B00 		je	.L272
 3717      0000
 3718              		.loc 2 1313 54 discriminator 1
 3719 19ad 83BDECFC 		cmpl	$0, -788(%rbp)
 3719      FFFF00
 3720 19b4 0F8E8E00 		jle	.L272
 3720      0000
 3721              	.LBB19:
1314:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCTOMB
1315:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         wchar_t *p = formatBuf.wStr;
 3722              		.loc 2 1315 34
 3723 19ba 488B8538 		movq	-712(%rbp), %rax
 3723      FDFFFF
 3724 19c1 48898580 		movq	%rax, -640(%rbp)
 3724      FDFFFF
1316:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         int count = textLen;
 3725              		.loc 2 1316 29
 3726 19c8 8B85ECFC 		movl	-788(%rbp), %eax
 3726      FFFF
 3727 19ce 898510FD 		movl	%eax, -752(%rbp)
 3727      FFFF
1317:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         while (count > 0) {
 3728              		.loc 2 1317 31
 3729 19d4 EB64     		jmp	.L273
 3730              	.L276:
 3731              	.LBB20:
1318:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             char tmpBuf[SECUREC_MB_LEN + 1];
1319:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_MASK_MSVC_CRT_WARNING
1320:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             int retVal = wctomb(tmpBuf, *p);
 3732              		.loc 2 1320 42
 3733 19d6 488B8580 		movq	-640(%rbp), %rax
 3733      FDFFFF
 3734 19dd 8B10     		movl	(%rax), %edx
 3735 19df 488D45E0 		leaq	-32(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 115


 3736 19e3 89D6     		movl	%edx, %esi
 3737 19e5 4889C7   		movq	%rax, %rdi
 3738 19e8 E8000000 		call	wctomb@PLT
 3738      00
 3739 19ed 89852CFD 		movl	%eax, -724(%rbp)
 3739      FFFF
1321:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_END_MASK_MSVC_CRT_WARNING
1322:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (retVal <= 0) {
 3740              		.loc 2 1322 32
 3741 19f3 83BD2CFD 		cmpl	$0, -724(%rbp)
 3741      FFFF00
 3742 19fa 7F0F     		jg	.L274
1323:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 charsOut = -1;
 3743              		.loc 2 1323 42
 3744 19fc C785E0FC 		movl	$-1, -800(%rbp)
 3744      FFFFFFFF 
 3744      FFFF
 3745              	.LBE20:
 3746              	.LBE19:
1313:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCTOMB
 3747              		.loc 2 1313 72
 3748 1a06 E9910100 		jmp	.L277
 3748      00
 3749              	.L274:
 3750              	.LBB22:
 3751              	.LBB21:
1324:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
1325:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1326:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(tmpBuf, retVal, stream, &charsOut);
 3752              		.loc 2 1326 29
 3753 1a0b 488D8DE0 		leaq	-800(%rbp), %rcx
 3753      FCFFFF
 3754 1a12 488B95C8 		movq	-824(%rbp), %rdx
 3754      FCFFFF
 3755 1a19 8BB52CFD 		movl	-724(%rbp), %esi
 3755      FFFF
 3756 1a1f 488D45E0 		leaq	-32(%rbp), %rax
 3757 1a23 4889C7   		movq	%rax, %rdi
 3758 1a26 E8000000 		call	SecWriteString
 3758      00
1327:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             --count;
 3759              		.loc 2 1327 29
 3760 1a2b 83AD10FD 		subl	$1, -752(%rbp)
 3760      FFFF01
1328:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             ++p;
 3761              		.loc 2 1328 29
 3762 1a32 48838580 		addq	$4, -640(%rbp)
 3762      FDFFFF04 
 3763              	.L273:
 3764              	.LBE21:
1317:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             char tmpBuf[SECUREC_MB_LEN + 1];
 3765              		.loc 2 1317 31
 3766 1a3a 83BD10FD 		cmpl	$0, -752(%rbp)
 3766      FFFF00
 3767 1a41 7F93     		jg	.L276
 3768              	.LBE22:
1313:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCTOMB
GAS LISTING /tmp/ccPPTXZA.s 			page 116


 3769              		.loc 2 1313 72
 3770 1a43 E9540100 		jmp	.L277
 3770      00
 3771              	.L272:
1329:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1330:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1331:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         charsOut = -1;
1332:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
1333:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1334:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     } else {
1335:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, textLen)) {
 3772              		.loc 2 1335 29
 3773 1a48 488B85C8 		movq	-824(%rbp), %rax
 3773      FCFFFF
 3774 1a4f 8B00     		movl	(%rax), %eax
 3775 1a51 2B85ECFC 		subl	-788(%rbp), %eax
 3775      FFFF
 3776              		.loc 2 1335 28
 3777 1a57 85C0     		testl	%eax, %eax
 3778 1a59 0F881A01 		js	.L278
 3778      0000
1336:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_WRITE_STR(formatBuf.str, textLen, stream, &charsOut);
 3779              		.loc 2 1336 29
 3780 1a5f 83BDECFC 		cmpl	$11, -788(%rbp)
 3780      FFFF0B
 3781 1a66 0F8F9700 		jg	.L279
 3781      0000
 3782              	.LBB23:
 3783              		.loc 2 1336 29 is_stmt 0 discriminator 1
 3784 1a6c C78514FD 		movl	$0, -748(%rbp)
 3784      FFFF0000 
 3784      0000
 3785 1a76 EB4A     		jmp	.L280
 3786              	.L281:
 3787              		.loc 2 1336 29 discriminator 5
 3788 1a78 488B9538 		movq	-712(%rbp), %rdx
 3788      FDFFFF
 3789 1a7f 488B85C8 		movq	-824(%rbp), %rax
 3789      FCFFFF
 3790 1a86 488B4008 		movq	8(%rax), %rax
 3791 1a8a 0FB612   		movzbl	(%rdx), %edx
 3792 1a8d 8810     		movb	%dl, (%rax)
 3793 1a8f 488B85C8 		movq	-824(%rbp), %rax
 3793      FCFFFF
 3794 1a96 488B4008 		movq	8(%rax), %rax
 3795 1a9a 488D5001 		leaq	1(%rax), %rdx
 3796 1a9e 488B85C8 		movq	-824(%rbp), %rax
 3796      FCFFFF
 3797 1aa5 48895008 		movq	%rdx, 8(%rax)
 3798 1aa9 488B8538 		movq	-712(%rbp), %rax
 3798      FDFFFF
 3799 1ab0 4883C001 		addq	$1, %rax
 3800 1ab4 48898538 		movq	%rax, -712(%rbp)
 3800      FDFFFF
 3801 1abb 838514FD 		addl	$1, -748(%rbp)
 3801      FFFF01
 3802              	.L280:
GAS LISTING /tmp/ccPPTXZA.s 			page 117


 3803              		.loc 2 1336 29 discriminator 3
 3804 1ac2 8B8514FD 		movl	-748(%rbp), %eax
 3804      FFFF
 3805 1ac8 3B85ECFC 		cmpl	-788(%rbp), %eax
 3805      FFFF
 3806 1ace 7CA8     		jl	.L281
 3807              		.loc 2 1336 29 discriminator 6
 3808 1ad0 488B85C8 		movq	-824(%rbp), %rax
 3808      FCFFFF
 3809 1ad7 8B00     		movl	(%rax), %eax
 3810 1ad9 2B85ECFC 		subl	-788(%rbp), %eax
 3810      FFFF
 3811 1adf 89C2     		movl	%eax, %edx
 3812 1ae1 488B85C8 		movq	-824(%rbp), %rax
 3812      FCFFFF
 3813 1ae8 8910     		movl	%edx, (%rax)
 3814 1aea 8B95E0FC 		movl	-800(%rbp), %edx
 3814      FFFF
 3815 1af0 8B85ECFC 		movl	-788(%rbp), %eax
 3815      FFFF
 3816 1af6 01D0     		addl	%edx, %eax
 3817 1af8 8985E0FC 		movl	%eax, -800(%rbp)
 3817      FFFF
 3818              	.LBE23:
 3819 1afe E9990000 		jmp	.L277
 3819      00
 3820              	.L279:
 3821              		.loc 2 1336 29 discriminator 2
 3822 1b03 8B85ECFC 		movl	-788(%rbp), %eax
 3822      FFFF
 3823 1b09 89C2     		movl	%eax, %edx
 3824 1b0b 488B8D38 		movq	-712(%rbp), %rcx
 3824      FDFFFF
 3825 1b12 488B85C8 		movq	-824(%rbp), %rax
 3825      FCFFFF
 3826 1b19 488B4008 		movq	8(%rax), %rax
 3827 1b1d 4889CE   		movq	%rcx, %rsi
 3828 1b20 4889C7   		movq	%rax, %rdi
 3829 1b23 E8000000 		call	SecDoMemcpy
 3829      00
 3830 1b28 488B85C8 		movq	-824(%rbp), %rax
 3830      FCFFFF
 3831 1b2f 488B4008 		movq	8(%rax), %rax
 3832 1b33 8B95ECFC 		movl	-788(%rbp), %edx
 3832      FFFF
 3833 1b39 89D2     		movl	%edx, %edx
 3834 1b3b 4801C2   		addq	%rax, %rdx
 3835 1b3e 488B85C8 		movq	-824(%rbp), %rax
 3835      FCFFFF
 3836 1b45 48895008 		movq	%rdx, 8(%rax)
 3837 1b49 488B85C8 		movq	-824(%rbp), %rax
 3837      FCFFFF
 3838 1b50 8B00     		movl	(%rax), %eax
 3839 1b52 2B85ECFC 		subl	-788(%rbp), %eax
 3839      FFFF
 3840 1b58 89C2     		movl	%eax, %edx
 3841 1b5a 488B85C8 		movq	-824(%rbp), %rax
GAS LISTING /tmp/ccPPTXZA.s 			page 118


 3841      FCFFFF
 3842 1b61 8910     		movl	%edx, (%rax)
 3843 1b63 8B95E0FC 		movl	-800(%rbp), %edx
 3843      FFFF
 3844 1b69 8B85ECFC 		movl	-788(%rbp), %eax
 3844      FFFF
 3845 1b6f 01D0     		addl	%edx, %eax
 3846 1b71 8985E0FC 		movl	%eax, -800(%rbp)
 3846      FFFF
 3847 1b77 EB23     		jmp	.L277
 3848              	.L278:
1337:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1338:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(formatBuf.str, textLen, stream, &charsOut);
 3849              		.loc 2 1338 59 is_stmt 1
 3850 1b79 488B8538 		movq	-712(%rbp), %rax
 3850      FDFFFF
 3851              		.loc 2 1338 29
 3852 1b80 488D8DE0 		leaq	-800(%rbp), %rcx
 3852      FCFFFF
 3853 1b87 488B95C8 		movq	-824(%rbp), %rdx
 3853      FCFFFF
 3854 1b8e 8BB5ECFC 		movl	-788(%rbp), %esi
 3854      FFFF
 3855 1b94 4889C7   		movq	%rax, %rdi
 3856 1b97 E8000000 		call	SecWriteString
 3856      00
 3857              	.L277:
1339:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1340:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1341:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* SECUREC_FOR_WCHAR */
1342:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (formatAttr.bufferIsWide == 0 && textLen > 0) {
1343:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_MBTOWC
1344:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         int count = textLen;
1345:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         char *p = formatBuf.str;
1346:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1347:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         while (count > 0) {
1348:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             wchar_t wChar = L'\0';
1349:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             int retVal = mbtowc(&wChar, p, (size_t)MB_CUR_MAX);
1350:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (retVal <= 0) {
1351:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 charsOut = -1;
1352:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
1353:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1354:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SecWriteCharW(wChar, stream, &charsOut);
1355:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             p += retVal;
1356:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             count -= retVal;
1357:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1358:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1359:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         charsOut = -1;
1360:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
1361:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1362:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     } else {
1363:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, textLen)) {
1364:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1365:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_WRITE_STR(formatBuf.wStr, textLen, stream, &charsOut);
1366:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1367:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(formatBuf.wStr, textLen, stream, &charsOut);
1368:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
GAS LISTING /tmp/ccPPTXZA.s 			page 119


1369:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1370:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif /* SECUREC_FOR_WCHAR */
1371:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1372:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (charsOut >= 0 && (formatAttr.flags & SECUREC_FLAG_LEFT) && padding > 0) {
 3858              		.loc 2 1372 34
 3859 1b9c 8B85E0FC 		movl	-800(%rbp), %eax
 3859      FFFF
 3860              		.loc 2 1372 24
 3861 1ba2 85C0     		testl	%eax, %eax
 3862 1ba4 0F88CA00 		js	.L303
 3862      0000
 3863              		.loc 2 1372 53 discriminator 1
 3864 1baa 8B85B0FD 		movl	-592(%rbp), %eax
 3864      FFFF
 3865              		.loc 2 1372 60 discriminator 1
 3866 1bb0 83E004   		andl	$4, %eax
 3867              		.loc 2 1372 39 discriminator 1
 3868 1bb3 85C0     		testl	%eax, %eax
 3869 1bb5 0F84B900 		je	.L303
 3869      0000
 3870              		.loc 2 1372 81 discriminator 2
 3871 1bbb 83BD1CFD 		cmpl	$0, -740(%rbp)
 3871      FFFF00
 3872 1bc2 0F8EAC00 		jle	.L303
 3872      0000
1373:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* pad on right with blanks */
1374:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, padding)) {
 3873              		.loc 2 1374 29
 3874 1bc8 488B85C8 		movq	-824(%rbp), %rax
 3874      FCFFFF
 3875 1bcf 8B00     		movl	(%rax), %eax
 3876 1bd1 2B851CFD 		subl	-740(%rbp), %eax
 3876      FFFF
 3877              		.loc 2 1374 28
 3878 1bd7 85C0     		testl	%eax, %eax
 3879 1bd9 7879     		js	.L283
 3880              	.LBB24:
1375:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1376:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_PADDING(SECUREC_CHAR(' '), padding, stream, &charsOut);
 3881              		.loc 2 1376 29
 3882 1bdb C78518FD 		movl	$0, -744(%rbp)
 3882      FFFF0000 
 3882      0000
 3883 1be5 EB2F     		jmp	.L284
 3884              	.L285:
 3885              		.loc 2 1376 29 is_stmt 0 discriminator 3
 3886 1be7 488B85C8 		movq	-824(%rbp), %rax
 3886      FCFFFF
 3887 1bee 488B4008 		movq	8(%rax), %rax
 3888 1bf2 C60020   		movb	$32, (%rax)
 3889 1bf5 488B85C8 		movq	-824(%rbp), %rax
 3889      FCFFFF
 3890 1bfc 488B4008 		movq	8(%rax), %rax
 3891 1c00 488D5001 		leaq	1(%rax), %rdx
 3892 1c04 488B85C8 		movq	-824(%rbp), %rax
 3892      FCFFFF
 3893 1c0b 48895008 		movq	%rdx, 8(%rax)
GAS LISTING /tmp/ccPPTXZA.s 			page 120


 3894 1c0f 838518FD 		addl	$1, -744(%rbp)
 3894      FFFF01
 3895              	.L284:
 3896              		.loc 2 1376 29 discriminator 1
 3897 1c16 8B8518FD 		movl	-744(%rbp), %eax
 3897      FFFF
 3898 1c1c 3B851CFD 		cmpl	-740(%rbp), %eax
 3898      FFFF
 3899 1c22 7CC3     		jl	.L285
 3900              		.loc 2 1376 29 discriminator 4
 3901 1c24 488B85C8 		movq	-824(%rbp), %rax
 3901      FCFFFF
 3902 1c2b 8B00     		movl	(%rax), %eax
 3903 1c2d 2B851CFD 		subl	-740(%rbp), %eax
 3903      FFFF
 3904 1c33 89C2     		movl	%eax, %edx
 3905 1c35 488B85C8 		movq	-824(%rbp), %rax
 3905      FCFFFF
 3906 1c3c 8910     		movl	%edx, (%rax)
 3907 1c3e 8B95E0FC 		movl	-800(%rbp), %edx
 3907      FFFF
 3908 1c44 8B851CFD 		movl	-740(%rbp), %eax
 3908      FFFF
 3909 1c4a 01D0     		addl	%edx, %eax
 3910 1c4c 8985E0FC 		movl	%eax, -800(%rbp)
 3910      FFFF
 3911              	.LBE24:
1377:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1378:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_MULTI_CHAR(SECUREC_CHAR(' '), padding, stream, &charsOut)
1379:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1380:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1381:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     break;
 3912              		.loc 2 1381 21 is_stmt 1 discriminator 4
 3913 1c52 EB20     		jmp	.L303
 3914              	.L283:
1378:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 3915              		.loc 2 1378 29
 3916 1c54 488D8DE0 		leaq	-800(%rbp), %rcx
 3916      FCFFFF
 3917 1c5b 488B95C8 		movq	-824(%rbp), %rdx
 3917      FCFFFF
 3918 1c62 8B851CFD 		movl	-740(%rbp), %eax
 3918      FFFF
 3919 1c68 89C6     		movl	%eax, %esi
 3920 1c6a BF200000 		movl	$32, %edi
 3920      00
 3921 1c6f E8000000 		call	SecWriteMultiChar
 3921      00
 3922              	.L303:
 3923              		.loc 2 1381 21
 3924 1c74 90       		nop
 3925              	.L255:
1382:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
1383:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
1384:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (floatBuf != NULL) {
 3926              		.loc 2 1384 20
 3927 1c75 4883BD40 		cmpq	$0, -704(%rbp)
GAS LISTING /tmp/ccPPTXZA.s 			page 121


 3927      FDFFFF00 
 3928 1c7d 742A     		je	.L112
1385:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     SECUREC_FREE(floatBuf);
 3929              		.loc 2 1385 21
 3930 1c7f 488B8540 		movq	-704(%rbp), %rax
 3930      FDFFFF
 3931 1c86 4889C7   		movq	%rax, %rdi
 3932 1c89 E8000000 		call	free@PLT
 3932      00
1386:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     floatBuf = NULL;
 3933              		.loc 2 1386 30
 3934 1c8e 48C78540 		movq	$0, -704(%rbp)
 3934      FDFFFF00 
 3934      000000
1387:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
1388:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1389:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 3935              		.loc 2 1389 17
 3936 1c99 EB0E     		jmp	.L112
 3937              	.L114:
1390:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_INVALID:
1391:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;
 3938              		.loc 2 1391 24
 3939 1c9b B8FFFFFF 		movl	$-1, %eax
 3939      FF
 3940 1ca0 EB4D     		jmp	.L290
 3941              	.L113:
1392:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             default:
1393:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;          /* input format is wrong, directly return */
 3942              		.loc 2 1393 24
 3943 1ca2 B8FFFFFF 		movl	$-1, %eax
 3943      FF
 3944 1ca7 EB46     		jmp	.L290
 3945              	.L112:
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3946              		.loc 2 670 18
 3947 1ca9 488B8530 		movq	-720(%rbp), %rax
 3947      FDFFFF
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3948              		.loc 2 670 16
 3949 1cb0 0FB600   		movzbl	(%rax), %eax
 3950 1cb3 8885DEFC 		movb	%al, -802(%rbp)
 3950      FFFF
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3951              		.loc 2 670 11
 3952 1cb9 80BDDEFC 		cmpb	$0, -802(%rbp)
 3952      FFFF00
 3953 1cc0 740E     		je	.L287
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3954              		.loc 2 670 61 discriminator 1
 3955 1cc2 8B85E0FC 		movl	-800(%rbp), %eax
 3955      FFFF
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3956              		.loc 2 670 49 discriminator 1
 3957 1cc8 85C0     		testl	%eax, %eax
 3958 1cca 0F8922E4 		jns	.L288
 3958      FFFF
GAS LISTING /tmp/ccPPTXZA.s 			page 122


 3959              	.L287:
1394:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
1395:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
1396:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1397:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (state != STAT_NORMAL && state != STAT_TYPE) {
 3960              		.loc 2 1397 8
 3961 1cd0 83BDF4FC 		cmpl	$0, -780(%rbp)
 3961      FFFF00
 3962 1cd7 7410     		je	.L289
 3963              		.loc 2 1397 30 discriminator 1
 3964 1cd9 83BDF4FC 		cmpl	$7, -780(%rbp)
 3964      FFFF07
 3965 1ce0 7407     		je	.L289
1398:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 3966              		.loc 2 1398 16
 3967 1ce2 B8FFFFFF 		movl	$-1, %eax
 3967      FF
 3968 1ce7 EB06     		jmp	.L290
 3969              	.L289:
1399:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
1400:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1401:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return charsOut;            /* the number of characters written */
 3970              		.loc 2 1401 12
 3971 1ce9 8B85E0FC 		movl	-800(%rbp), %eax
 3971      FFFF
 3972              	.L290:
1402:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 3973              		.loc 2 1402 1 discriminator 6
 3974 1cef 488B7DF8 		movq	-8(%rbp), %rdi
 3975 1cf3 6448333C 		xorq	%fs:40, %rdi
 3975      25280000 
 3975      00
 3976 1cfc 7405     		je	.L291
 3977              		.loc 2 1402 1 is_stmt 0
 3978 1cfe E8000000 		call	__stack_chk_fail@PLT
 3978      00
 3979              	.L291:
 3980 1d03 C9       		leave
 3981              	.LCFI47:
 3982              		.cfi_def_cfa 7, 8
 3983 1d04 C3       		ret
 3984              		.cfi_endproc
 3985              	.LFE21:
 3987              		.section	.text.SecVsnprintfImpl,"ax",@progbits
 3988              		.globl	SecVsnprintfImpl
 3990              	SecVsnprintfImpl:
 3991              	.LFB22:
 3992              		.file 3 "/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c"
   1:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  *
GAS LISTING /tmp/ccPPTXZA.s 			page 123


  10:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_INLINE_DO_MEMCPY    1
  16:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_FORMAT_OUTPUT_INPUT 1
  17:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #ifdef SECUREC_FOR_WCHAR
  18:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #undef SECUREC_FOR_WCHAR
  19:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #endif
  20:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  21:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #include "secureprintoutput.h"
  22:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  23:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_CHAR(x) x
  24:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_WRITE_MULTI_CHAR  SecWriteMultiChar
  25:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_WRITE_STRING      SecWriteString
  26:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  27:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #ifndef EOF
  28:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define EOF (-1)
  29:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #endif
  30:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  31:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** /* put a char to output */
  32:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_PUTC(c, outStream)    ((--(outStream)->count >= 0) ? \
  33:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     (int)((unsigned int)(unsigned char)(*((outStream)->cur++) = (char)(c)) & 0xff) : EOF)
  34:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** /* to clear e835 */
  35:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #define SECUREC_PUTC_ZERO(outStream)    ((--(outStream)->count >= 0) ? \
  36:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     ((*((outStream)->cur++) = (char)('\0'))) : EOF)
  37:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  38:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** static void SecWriteMultiChar(char ch, int num, SecPrintfStream *f, int *pnumwritten);
  39:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** static void SecWriteString(const char *string, int len, SecPrintfStream *f, int *pnumwritten);
  40:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  41:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** #include "output.inl"
  42:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  43:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** /*
  44:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * Wide character formatted output implementation
  45:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  */
  46:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** int SecVsnprintfImpl(char *string, size_t count, const char *format, va_list argList)
  47:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** {
 3993              		.loc 3 47 1 is_stmt 1
 3994              		.cfi_startproc
 3995 0000 F30F1EFA 		endbr64
 3996 0004 55       		pushq	%rbp
 3997              	.LCFI48:
 3998              		.cfi_def_cfa_offset 16
 3999              		.cfi_offset 6, -16
 4000 0005 4889E5   		movq	%rsp, %rbp
 4001              	.LCFI49:
 4002              		.cfi_def_cfa_register 6
 4003 0008 4883EC50 		subq	$80, %rsp
 4004 000c 48897DC8 		movq	%rdi, -56(%rbp)
 4005 0010 488975C0 		movq	%rsi, -64(%rbp)
 4006 0014 488955B8 		movq	%rdx, -72(%rbp)
 4007 0018 48894DB0 		movq	%rcx, -80(%rbp)
 4008              		.loc 3 47 1
 4009 001c 64488B04 		movq	%fs:40, %rax
 4009      25280000 
 4009      00
GAS LISTING /tmp/ccPPTXZA.s 			page 124


 4010 0025 488945F8 		movq	%rax, -8(%rbp)
 4011 0029 31C0     		xorl	%eax, %eax
  48:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     SecPrintfStream str;
  49:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     int retVal;
  50:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  51:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     str.count = (int)count; /* this count include \0 character, Must be greater than zero */
 4012              		.loc 3 51 17
 4013 002b 488B45C0 		movq	-64(%rbp), %rax
 4014              		.loc 3 51 15
 4015 002f 8945E0   		movl	%eax, -32(%rbp)
  52:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     str.cur = string;
 4016              		.loc 3 52 13
 4017 0032 488B45C8 		movq	-56(%rbp), %rax
 4018 0036 488945E8 		movq	%rax, -24(%rbp)
  53:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  54:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     retVal = SecOutputS(&str, format, argList);
 4019              		.loc 3 54 14
 4020 003a 488B55B0 		movq	-80(%rbp), %rdx
 4021 003e 488B4DB8 		movq	-72(%rbp), %rcx
 4022 0042 488D45E0 		leaq	-32(%rbp), %rax
 4023 0046 4889CE   		movq	%rcx, %rsi
 4024 0049 4889C7   		movq	%rax, %rdi
 4025 004c E8000000 		call	SecOutputS
 4025      00
 4026 0051 8945DC   		movl	%eax, -36(%rbp)
  55:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     if ((retVal >= 0) && (SECUREC_PUTC_ZERO(&str) != EOF)) {
 4027              		.loc 3 55 8
 4028 0054 837DDC00 		cmpl	$0, -36(%rbp)
 4029 0058 7824     		js	.L305
 4030              		.loc 3 55 27 discriminator 1
 4031 005a 8B45E0   		movl	-32(%rbp), %eax
 4032 005d 83E801   		subl	$1, %eax
 4033              		.loc 3 55 8 discriminator 1
 4034 0060 8945E0   		movl	%eax, -32(%rbp)
 4035              		.loc 3 55 27 discriminator 1
 4036 0063 8B45E0   		movl	-32(%rbp), %eax
 4037              		.loc 3 55 8 discriminator 1
 4038 0066 85C0     		testl	%eax, %eax
 4039 0068 7814     		js	.L305
 4040              		.loc 3 55 27 discriminator 2
 4041 006a 488B45E8 		movq	-24(%rbp), %rax
 4042 006e 488D5001 		leaq	1(%rax), %rdx
 4043 0072 488955E8 		movq	%rdx, -24(%rbp)
 4044 0076 C60000   		movb	$0, (%rax)
  56:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         return retVal;
 4045              		.loc 3 56 16 discriminator 2
 4046 0079 8B45DC   		movl	-36(%rbp), %eax
 4047 007c EB2C     		jmp	.L308
 4048              	.L305:
  57:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     } else if (str.count < 0) {
 4049              		.loc 3 57 19
 4050 007e 8B45E0   		movl	-32(%rbp), %eax
 4051              		.loc 3 57 15
 4052 0081 85C0     		testl	%eax, %eax
 4053 0083 7919     		jns	.L307
  58:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         /* the buffer was too small; we return truncation */
  59:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         string[count - 1] = '\0';
GAS LISTING /tmp/ccPPTXZA.s 			page 125


 4054              		.loc 3 59 15
 4055 0085 488B45C0 		movq	-64(%rbp), %rax
 4056 0089 488D50FF 		leaq	-1(%rax), %rdx
 4057 008d 488B45C8 		movq	-56(%rbp), %rax
 4058 0091 4801D0   		addq	%rdx, %rax
 4059              		.loc 3 59 27
 4060 0094 C60000   		movb	$0, (%rax)
  60:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         return SECUREC_PRINTF_TRUNCATE;
 4061              		.loc 3 60 16
 4062 0097 B8FEFFFF 		movl	$-2, %eax
 4062      FF
 4063 009c EB0C     		jmp	.L308
 4064              	.L307:
  61:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     }
  62:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     string[0] = '\0'; /* empty the dest strDest */
 4065              		.loc 3 62 15
 4066 009e 488B45C8 		movq	-56(%rbp), %rax
 4067 00a2 C60000   		movb	$0, (%rax)
  63:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     return -1;
 4068              		.loc 3 63 12
 4069 00a5 B8FFFFFF 		movl	$-1, %eax
 4069      FF
 4070              	.L308:
  64:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** }
 4071              		.loc 3 64 1 discriminator 1
 4072 00aa 488B75F8 		movq	-8(%rbp), %rsi
 4073 00ae 64483334 		xorq	%fs:40, %rsi
 4073      25280000 
 4073      00
 4074 00b7 7405     		je	.L309
 4075              		.loc 3 64 1 is_stmt 0
 4076 00b9 E8000000 		call	__stack_chk_fail@PLT
 4076      00
 4077              	.L309:
 4078 00be C9       		leave
 4079              	.LCFI50:
 4080              		.cfi_def_cfa 7, 8
 4081 00bf C3       		ret
 4082              		.cfi_endproc
 4083              	.LFE22:
 4085              		.section	.text.SecWriteMultiChar,"ax",@progbits
 4087              	SecWriteMultiChar:
 4088              	.LFB23:
  65:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  66:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** /*
  67:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * Sec write Wide character
  68:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  */
  69:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** static void SecWriteMultiChar(char ch, int num, SecPrintfStream *f, int *pnumwritten)
  70:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** {
 4089              		.loc 3 70 1 is_stmt 1
 4090              		.cfi_startproc
 4091 0000 F30F1EFA 		endbr64
 4092 0004 55       		pushq	%rbp
 4093              	.LCFI51:
 4094              		.cfi_def_cfa_offset 16
 4095              		.cfi_offset 6, -16
 4096 0005 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/ccPPTXZA.s 			page 126


 4097              	.LCFI52:
 4098              		.cfi_def_cfa_register 6
 4099 0008 4883EC30 		subq	$48, %rsp
 4100 000c 89F8     		movl	%edi, %eax
 4101 000e 8975E8   		movl	%esi, -24(%rbp)
 4102 0011 488955E0 		movq	%rdx, -32(%rbp)
 4103 0015 48894DD8 		movq	%rcx, -40(%rbp)
 4104 0019 8845EC   		movb	%al, -20(%rbp)
 4105              		.loc 3 70 1
 4106 001c 64488B04 		movq	%fs:40, %rax
 4106      25280000 
 4106      00
 4107 0025 488945F8 		movq	%rax, -8(%rbp)
 4108 0029 31C0     		xorl	%eax, %eax
  71:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     int count = num;
 4109              		.loc 3 71 9
 4110 002b 8B45E8   		movl	-24(%rbp), %eax
 4111 002e 8945F4   		movl	%eax, -12(%rbp)
  72:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     while (count-- > 0) {
 4112              		.loc 3 72 11
 4113 0031 EB5E     		jmp	.L311
 4114              	.L316:
  73:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         if (SECUREC_PUTC(ch, f) == EOF) {
 4115              		.loc 3 73 13
 4116 0033 488B45E0 		movq	-32(%rbp), %rax
 4117 0037 8B00     		movl	(%rax), %eax
 4118 0039 8D50FF   		leal	-1(%rax), %edx
 4119              		.loc 3 73 33
 4120 003c 488B45E0 		movq	-32(%rbp), %rax
 4121 0040 8910     		movl	%edx, (%rax)
 4122              		.loc 3 73 13
 4123 0042 488B45E0 		movq	-32(%rbp), %rax
 4124 0046 8B00     		movl	(%rax), %eax
 4125              		.loc 3 73 33
 4126 0048 85C0     		testl	%eax, %eax
 4127 004a 7821     		js	.L312
 4128              		.loc 3 73 13 discriminator 1
 4129 004c 488B45E0 		movq	-32(%rbp), %rax
 4130 0050 488B4008 		movq	8(%rax), %rax
 4131 0054 488D4801 		leaq	1(%rax), %rcx
 4132 0058 488B55E0 		movq	-32(%rbp), %rdx
 4133 005c 48894A08 		movq	%rcx, 8(%rdx)
 4134 0060 0FB655EC 		movzbl	-20(%rbp), %edx
 4135 0064 8810     		movb	%dl, (%rax)
 4136              		.loc 3 73 33 discriminator 1
 4137 0066 B8000000 		movl	$0, %eax
 4137      00
 4138 006b EB05     		jmp	.L313
 4139              	.L312:
 4140              		.loc 3 73 33 is_stmt 0 discriminator 2
 4141 006d B8010000 		movl	$1, %eax
 4141      00
 4142              	.L313:
 4143              		.loc 3 73 12 is_stmt 1 discriminator 4
 4144 0072 84C0     		testb	%al, %al
 4145 0074 740C     		je	.L314
  74:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             *pnumwritten = -1;
GAS LISTING /tmp/ccPPTXZA.s 			page 127


 4146              		.loc 3 74 26
 4147 0076 488B45D8 		movq	-40(%rbp), %rax
 4148 007a C700FFFF 		movl	$-1, (%rax)
 4148      FFFF
  75:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             break;
 4149              		.loc 3 75 13
 4150 0080 EB1C     		jmp	.L315
 4151              	.L314:
  76:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         } else {
  77:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             *pnumwritten = *pnumwritten + 1;
 4152              		.loc 3 77 28
 4153 0082 488B45D8 		movq	-40(%rbp), %rax
 4154 0086 8B00     		movl	(%rax), %eax
 4155              		.loc 3 77 41
 4156 0088 8D5001   		leal	1(%rax), %edx
 4157              		.loc 3 77 26
 4158 008b 488B45D8 		movq	-40(%rbp), %rax
 4159 008f 8910     		movl	%edx, (%rax)
 4160              	.L311:
  72:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         if (SECUREC_PUTC(ch, f) == EOF) {
 4161              		.loc 3 72 17
 4162 0091 8B45F4   		movl	-12(%rbp), %eax
 4163 0094 8D50FF   		leal	-1(%rax), %edx
 4164 0097 8955F4   		movl	%edx, -12(%rbp)
  72:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         if (SECUREC_PUTC(ch, f) == EOF) {
 4165              		.loc 3 72 11
 4166 009a 85C0     		testl	%eax, %eax
 4167 009c 7F95     		jg	.L316
 4168              	.L315:
  78:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         }
  79:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     }
  80:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** }
 4169              		.loc 3 80 1
 4170 009e 90       		nop
 4171 009f 488B45F8 		movq	-8(%rbp), %rax
 4172 00a3 64483304 		xorq	%fs:40, %rax
 4172      25280000 
 4172      00
 4173 00ac 7405     		je	.L317
 4174 00ae E8000000 		call	__stack_chk_fail@PLT
 4174      00
 4175              	.L317:
 4176 00b3 C9       		leave
 4177              	.LCFI53:
 4178              		.cfi_def_cfa 7, 8
 4179 00b4 C3       		ret
 4180              		.cfi_endproc
 4181              	.LFE23:
 4183              		.section	.text.SecWriteString,"ax",@progbits
 4185              	SecWriteString:
 4186              	.LFB24:
  81:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** 
  82:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** /*
  83:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  * Sec write string function
  84:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****  */
  85:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** static void SecWriteString(const char *string, int len, SecPrintfStream *f, int *pnumwritten)
  86:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** {
GAS LISTING /tmp/ccPPTXZA.s 			page 128


 4187              		.loc 3 86 1
 4188              		.cfi_startproc
 4189 0000 F30F1EFA 		endbr64
 4190 0004 55       		pushq	%rbp
 4191              	.LCFI54:
 4192              		.cfi_def_cfa_offset 16
 4193              		.cfi_offset 6, -16
 4194 0005 4889E5   		movq	%rsp, %rbp
 4195              	.LCFI55:
 4196              		.cfi_def_cfa_register 6
 4197 0008 4883EC40 		subq	$64, %rsp
 4198 000c 48897DD8 		movq	%rdi, -40(%rbp)
 4199 0010 8975D4   		movl	%esi, -44(%rbp)
 4200 0013 488955C8 		movq	%rdx, -56(%rbp)
 4201 0017 48894DC0 		movq	%rcx, -64(%rbp)
 4202              		.loc 3 86 1
 4203 001b 64488B04 		movq	%fs:40, %rax
 4203      25280000 
 4203      00
 4204 0024 488945F8 		movq	%rax, -8(%rbp)
 4205 0028 31C0     		xorl	%eax, %eax
  87:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     const char *str = string;
 4206              		.loc 3 87 17
 4207 002a 488B45D8 		movq	-40(%rbp), %rax
 4208 002e 488945F0 		movq	%rax, -16(%rbp)
  88:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     int count = len;
 4209              		.loc 3 88 9
 4210 0032 8B45D4   		movl	-44(%rbp), %eax
 4211 0035 8945EC   		movl	%eax, -20(%rbp)
  89:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     while (count-- > 0) {
 4212              		.loc 3 89 11
 4213 0038 EB66     		jmp	.L319
 4214              	.L324:
  90:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         if (SECUREC_PUTC(*str, f) == EOF) {
 4215              		.loc 3 90 13
 4216 003a 488B45C8 		movq	-56(%rbp), %rax
 4217 003e 8B00     		movl	(%rax), %eax
 4218 0040 8D50FF   		leal	-1(%rax), %edx
 4219              		.loc 3 90 35
 4220 0043 488B45C8 		movq	-56(%rbp), %rax
 4221 0047 8910     		movl	%edx, (%rax)
 4222              		.loc 3 90 13
 4223 0049 488B45C8 		movq	-56(%rbp), %rax
 4224 004d 8B00     		movl	(%rax), %eax
 4225              		.loc 3 90 35
 4226 004f 85C0     		testl	%eax, %eax
 4227 0051 7824     		js	.L320
 4228              		.loc 3 90 13 discriminator 1
 4229 0053 488B45C8 		movq	-56(%rbp), %rax
 4230 0057 488B4008 		movq	8(%rax), %rax
 4231 005b 488D4801 		leaq	1(%rax), %rcx
 4232 005f 488B55C8 		movq	-56(%rbp), %rdx
 4233 0063 48894A08 		movq	%rcx, 8(%rdx)
 4234 0067 488B55F0 		movq	-16(%rbp), %rdx
 4235 006b 0FB612   		movzbl	(%rdx), %edx
 4236 006e 8810     		movb	%dl, (%rax)
 4237              		.loc 3 90 35 discriminator 1
GAS LISTING /tmp/ccPPTXZA.s 			page 129


 4238 0070 B8000000 		movl	$0, %eax
 4238      00
 4239 0075 EB05     		jmp	.L321
 4240              	.L320:
 4241              		.loc 3 90 35 is_stmt 0 discriminator 2
 4242 0077 B8010000 		movl	$1, %eax
 4242      00
 4243              	.L321:
 4244              		.loc 3 90 12 is_stmt 1 discriminator 4
 4245 007c 84C0     		testb	%al, %al
 4246 007e 740C     		je	.L322
  91:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             *pnumwritten = -1;
 4247              		.loc 3 91 26
 4248 0080 488B45C0 		movq	-64(%rbp), %rax
 4249 0084 C700FFFF 		movl	$-1, (%rax)
 4249      FFFF
  92:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             break;
 4250              		.loc 3 92 13
 4251 008a EB21     		jmp	.L323
 4252              	.L322:
  93:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         } else {
  94:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             *pnumwritten = *pnumwritten + 1;
 4253              		.loc 3 94 28
 4254 008c 488B45C0 		movq	-64(%rbp), %rax
 4255 0090 8B00     		movl	(%rax), %eax
 4256              		.loc 3 94 41
 4257 0092 8D5001   		leal	1(%rax), %edx
 4258              		.loc 3 94 26
 4259 0095 488B45C0 		movq	-64(%rbp), %rax
 4260 0099 8910     		movl	%edx, (%rax)
  95:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****             ++str;
 4261              		.loc 3 95 13
 4262 009b 488345F0 		addq	$1, -16(%rbp)
 4262      01
 4263              	.L319:
  89:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         if (SECUREC_PUTC(*str, f) == EOF) {
 4264              		.loc 3 89 17
 4265 00a0 8B45EC   		movl	-20(%rbp), %eax
 4266 00a3 8D50FF   		leal	-1(%rax), %edx
 4267 00a6 8955EC   		movl	%edx, -20(%rbp)
  89:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         if (SECUREC_PUTC(*str, f) == EOF) {
 4268              		.loc 3 89 11
 4269 00a9 85C0     		testl	%eax, %eax
 4270 00ab 7F8D     		jg	.L324
 4271              	.L323:
  96:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****         }
  97:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c ****     }
  98:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_a.c **** }
 4272              		.loc 3 98 1
 4273 00ad 90       		nop
 4274 00ae 488B45F8 		movq	-8(%rbp), %rax
 4275 00b2 64483304 		xorq	%fs:40, %rax
 4275      25280000 
 4275      00
 4276 00bb 7405     		je	.L325
 4277 00bd E8000000 		call	__stack_chk_fail@PLT
 4277      00
GAS LISTING /tmp/ccPPTXZA.s 			page 130


 4278              	.L325:
 4279 00c2 C9       		leave
 4280              	.LCFI56:
 4281              		.cfi_def_cfa 7, 8
 4282 00c3 C3       		ret
 4283              		.cfi_endproc
 4284              	.LFE24:
 4286              		.section	.rodata
 4287              	.LC1:
 4288 0000 30313233 		.string	"0123456789ABCDEFX"
 4288      34353637 
 4288      38394142 
 4288      43444546 
 4288      5800
 4289              		.section	.data.rel.local.itoaUpperDigits.3563,"aw"
 4290              		.align 8
 4293              	itoaUpperDigits.3563:
 4294 0000 00000000 		.quad	.LC1
 4294      00000000 
 4295              		.section	.rodata.stateTable.3576,"a"
 4296              		.align 32
 4299              	stateTable.3576:
 4300 0000 00       		.string	""
 4301 0001 00       		.string	""
 4302 0002 00       		.string	""
 4303 0003 00       		.string	""
 4304 0004 00       		.string	""
 4305 0005 00       		.string	""
 4306 0006 00       		.string	""
 4307 0007 00       		.string	""
 4308 0008 00       		.string	""
 4309 0009 00       		.string	""
 4310 000a 00       		.string	""
 4311 000b 00       		.string	""
 4312 000c 00       		.string	""
 4313 000d 00       		.string	""
 4314 000e 00       		.string	""
 4315 000f 00       		.string	""
 4316 0010 00       		.string	""
 4317 0011 00       		.string	""
 4318 0012 00       		.string	""
 4319 0013 00       		.string	""
 4320 0014 00       		.string	""
 4321 0015 00       		.string	""
 4322 0016 00       		.string	""
 4323 0017 00       		.string	""
 4324 0018 00       		.string	""
 4325 0019 00       		.string	""
 4326 001a 00       		.string	""
 4327 001b 00       		.string	""
 4328 001c 00       		.string	""
 4329 001d 00       		.string	""
 4330 001e 00       		.string	""
 4331 001f 00       		.string	""
 4332 0020 0600     		.string	"\006"
 4333 0022 00       		.string	""
 4334 0023 0600     		.string	"\006"
GAS LISTING /tmp/ccPPTXZA.s 			page 131


 4335 0025 0100     		.string	"\001"
 4336 0027 00       		.string	""
 4337 0028 00       		.string	""
 4338 0029 00       		.string	""
 4339 002a 030600   		.string	"\003\006"
 4340 002d 060200   		.string	"\006\002"
 4341 0030 04050505 		.string	"\004\005\005\005\005\005\005\005\005\005"
 4341      05050505 
 4341      050500
 4342 003b 00       		.string	""
 4343 003c 00       		.string	""
 4344 003d 00       		.string	""
 4345 003e 00       		.string	""
 4346 003f 00       		.string	""
 4347 0040 00       		.string	""
 4348 0041 00       		.string	""
 4349 0042 00       		.string	""
 4350 0043 0800     		.string	"\b"
 4351 0045 08080800 		.string	"\b\b\b"
 4352 0049 0700     		.string	"\007"
 4353 004b 00       		.string	""
 4354 004c 0700     		.string	"\007"
 4355 004e 0700     		.string	"\007"
 4356 0050 00       		.string	""
 4357 0051 00       		.string	""
 4358 0052 00       		.string	""
 4359 0053 0800     		.string	"\b"
 4360 0055 00       		.string	""
 4361 0056 00       		.string	""
 4362 0057 00       		.string	""
 4363 0058 0800     		.string	"\b"
 4364 005a 0700     		.string	"\007"
 4365 005c 00       		.string	""
 4366 005d 00       		.string	""
 4367 005e 00       		.string	""
 4368 005f 00       		.string	""
 4369 0060 00       		.string	""
 4370 0061 00       		.string	""
 4371 0062 00       		.string	""
 4372 0063 08080808 		.string	"\b\b\b\b\b\007\b\007"
 4372      08070807 
 4372      00
 4373 006c 0700     		.string	"\007"
 4374 006e 00       		.string	""
 4375 006f 08080700 		.string	"\b\b\007"
 4376 0073 08070800 		.string	"\b\007\b"
 4377 0077 070800   		.string	"\007\b"
 4378 007a 0700     		.string	"\007"
 4379 007c 00       		.string	""
 4380 007d 00       		.string	""
 4381 007e 00       		.string	""
 4382 007f 00       		.string	""
 4383 0080 00       		.string	""
 4384 0081 00       		.string	""
 4385 0082 00       		.string	""
 4386 0083 00       		.string	""
 4387 0084 00       		.string	""
GAS LISTING /tmp/ccPPTXZA.s 			page 132


 4388 0085 00       		.string	""
 4389 0086 00       		.string	""
 4390 0087 00       		.string	""
 4391 0088 00       		.string	""
 4392 0089 00       		.string	""
 4393 008a 00       		.string	""
 4394 008b 00       		.string	""
 4395 008c 00       		.string	""
 4396 008d 00       		.string	""
 4397 008e 00       		.string	""
 4398 008f 00       		.string	""
 4399 0090 00       		.string	""
 4400 0091 00       		.string	""
 4401 0092 00       		.string	""
 4402 0093 00       		.string	""
 4403 0094 00       		.string	""
 4404 0095 00       		.string	""
 4405 0096 00       		.string	""
 4406 0097 00       		.string	""
 4407 0098 00       		.string	""
 4408 0099 00       		.string	""
 4409 009a 00       		.string	""
 4410 009b 00       		.string	""
 4411 009c 00       		.string	""
 4412 009d 00       		.string	""
 4413 009e 00       		.string	""
 4414 009f 00       		.string	""
 4415 00a0 00       		.string	""
 4416 00a1 00       		.string	""
 4417 00a2 00       		.string	""
 4418 00a3 00       		.string	""
 4419 00a4 00       		.string	""
 4420 00a5 00       		.string	""
 4421 00a6 00       		.string	""
 4422 00a7 00       		.string	""
 4423 00a8 00       		.string	""
 4424 00a9 00       		.string	""
 4425 00aa 00       		.string	""
 4426 00ab 00       		.string	""
 4427 00ac 00       		.string	""
 4428 00ad 00       		.string	""
 4429 00ae 00       		.string	""
 4430 00af 00       		.string	""
 4431 00b0 00       		.string	""
 4432 00b1 00       		.string	""
 4433 00b2 00       		.string	""
 4434 00b3 00       		.string	""
 4435 00b4 00       		.string	""
 4436 00b5 00       		.string	""
 4437 00b6 00       		.string	""
 4438 00b7 00       		.string	""
 4439 00b8 00       		.string	""
 4440 00b9 00       		.string	""
 4441 00ba 00       		.string	""
 4442 00bb 00       		.string	""
 4443 00bc 00       		.string	""
 4444 00bd 00       		.string	""
GAS LISTING /tmp/ccPPTXZA.s 			page 133


 4445 00be 00       		.string	""
 4446 00bf 00       		.string	""
 4447 00c0 00       		.string	""
 4448 00c1 00       		.string	""
 4449 00c2 00       		.string	""
 4450 00c3 00       		.string	""
 4451 00c4 00       		.string	""
 4452 00c5 00       		.string	""
 4453 00c6 00       		.string	""
 4454 00c7 00       		.string	""
 4455 00c8 00       		.string	""
 4456 00c9 00       		.string	""
 4457 00ca 00       		.string	""
 4458 00cb 00       		.string	""
 4459 00cc 00       		.string	""
 4460 00cd 00       		.string	""
 4461 00ce 00       		.string	""
 4462 00cf 00       		.string	""
 4463 00d0 00       		.string	""
 4464 00d1 00       		.string	""
 4465 00d2 00       		.string	""
 4466 00d3 00       		.string	""
 4467 00d4 00       		.string	""
 4468 00d5 00       		.string	""
 4469 00d6 00       		.string	""
 4470 00d7 00       		.string	""
 4471 00d8 00       		.string	""
 4472 00d9 00       		.string	""
 4473 00da 00       		.string	""
 4474 00db 00       		.string	""
 4475 00dc 00       		.string	""
 4476 00dd 00       		.string	""
 4477 00de 00       		.string	""
 4478 00df 00       		.string	""
 4479 00e0 00       		.string	""
 4480 00e1 00       		.string	""
 4481 00e2 00       		.string	""
 4482 00e3 00       		.string	""
 4483 00e4 00       		.string	""
 4484 00e5 00       		.string	""
 4485 00e6 00       		.string	""
 4486 00e7 00       		.string	""
 4487 00e8 00       		.string	""
 4488 00e9 00       		.string	""
 4489 00ea 00       		.string	""
 4490 00eb 00       		.string	""
 4491 00ec 00       		.string	""
 4492 00ed 00       		.string	""
 4493 00ee 00       		.string	""
 4494 00ef 00       		.string	""
 4495 00f0 00       		.string	""
 4496 00f1 00       		.string	""
 4497 00f2 00       		.string	""
 4498 00f3 00       		.string	""
 4499 00f4 00       		.string	""
 4500 00f5 00       		.string	""
 4501 00f6 00       		.string	""
GAS LISTING /tmp/ccPPTXZA.s 			page 134


 4502 00f7 00       		.string	""
 4503 00f8 00       		.string	""
 4504 00f9 00       		.string	""
 4505 00fa 00       		.string	""
 4506 00fb 00       		.string	""
 4507 00fc 00       		.string	""
 4508 00fd 00       		.string	""
 4509 00fe 00       		.string	""
 4510 00ff 00       		.string	""
 4511 0100 00       		.string	""
 4512 0101 08080808 		.string	"\b\b\b\b\b\b"
 4512      080800
 4513 0108 00       		.string	""
 4514 0109 0100     		.string	"\001"
 4515 010b 08080808 		.string	"\b\b\b\b\b\001"
 4515      080100
 4516 0112 00       		.string	""
 4517 0113 04040408 		.string	"\004\004\004\b\b\b"
 4517      080800
 4518 011a 00       		.string	""
 4519 011b 00       		.string	""
 4520 011c 03030805 		.string	"\003\003\b\005\b\b"
 4520      080800
 4521 0123 00       		.string	""
 4522 0124 00       		.string	""
 4523 0125 02020305 		.string	"\002\002\003\005\005\b"
 4523      050800
 4524 012c 00       		.string	""
 4525 012d 00       		.string	""
 4526 012e 03030305 		.string	"\003\003\003\005\005\b"
 4526      050800
 4527 0135 00       		.string	""
 4528 0136 00       		.string	""
 4529 0137 02020208 		.string	"\002\002\002\b\b\b"
 4529      080800
 4530 013e 00       		.string	""
 4531 013f 00       		.string	""
 4532 0140 06060606 		.string	"\006\006\006\006\006\006"
 4532      060600
 4533 0147 00       		.string	""
 4534 0148 00       		.string	""
 4535 0149 07070707 		.string	"\007\007\007\007\007\007"
 4535      070700
 4536 0150 00       		.string	""
 4537              		.section	.rodata
 4538              	.LC2:
 4539 0012 30313233 		.string	"0123456789abcdefx"
 4539      34353637 
 4539      38396162 
 4539      63646566 
 4539      7800
 4540              		.section	.data.rel.local.itoaLowerDigits.3564,"aw"
 4541              		.align 8
 4544              	itoaLowerDigits.3564:
 4545 0000 00000000 		.quad	.LC2
 4545      00000000 
 4546              		.text
GAS LISTING /tmp/ccPPTXZA.s 			page 135


 4547              	.Letext0:
 4548              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 4549              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h"
 4550              		.file 6 "<built-in>"
 4551              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types.h"
 4552              		.file 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 4553              		.file 9 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 4554              		.file 10 "/usr/include/stdio.h"
 4555              		.file 11 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 4556              		.file 12 "/home/xingli/share/1205tiny/secure_c/src/secureprintoutput.h"
 8409              		.section	.note.gnu.property,"a"
 8410              		.align 8
 8411 0000 04000000 		.long	 1f - 0f
 8412 0004 10000000 		.long	 4f - 1f
 8413 0008 05000000 		.long	 5
 8414              	0:
 8415 000c 474E5500 		.string	 "GNU"
 8416              	1:
 8417              		.align 8
 8418 0010 020000C0 		.long	 0xc0000002
 8419 0014 04000000 		.long	 3f - 2f
 8420              	2:
 8421 0018 03000000 		.long	 0x3
 8422              	3:
 8423 001c 00000000 		.align 8
 8424              	4:
GAS LISTING /tmp/ccPPTXZA.s 			page 136


DEFINED SYMBOLS
                            *ABS*:0000000000000000 secureprintoutput_a.c
     /tmp/ccPPTXZA.s:6      .text.SecDoMemcpy:0000000000000000 SecDoMemcpy
     /tmp/ccPPTXZA.s:50     .text.SecIndirectSprintf:0000000000000000 SecIndirectSprintf
     /tmp/ccPPTXZA.s:117    .text.SecFormatLongDboule:0000000000000000 SecFormatLongDboule
     /tmp/ccPPTXZA.s:253    .text.SecFormatDboule:0000000000000000 SecFormatDboule
     /tmp/ccPPTXZA.s:382    .text.SecIsSameSize:0000000000000000 SecIsSameSize
     /tmp/ccPPTXZA.s:421    .text.SecDecodeFlags:0000000000000000 SecDecodeFlags
     /tmp/ccPPTXZA.s:547    .text.SecDecodeSizeI:0000000000000000 SecDecodeSizeI
     /tmp/ccPPTXZA.s:709    .text.SecDecodeSize:0000000000000000 SecDecodeSize
     /tmp/ccPPTXZA.s:951    .text.SecDecodeTypeC:0000000000000000 SecDecodeTypeC
     /tmp/ccPPTXZA.s:1055   .data.g_wStrNullString:0000000000000000 g_wStrNullString
     /tmp/ccPPTXZA.s:1068   .data.g_strNullString:0000000000000000 g_strNullString
     /tmp/ccPPTXZA.s:1073   .text.SecDecodeTypeSchar:0000000000000000 SecDecodeTypeSchar
     /tmp/ccPPTXZA.s:1165   .text.SecDecodeTypeSwchar:0000000000000000 SecDecodeTypeSwchar
     /tmp/ccPPTXZA.s:1256   .text.SecDecodeTypeS:0000000000000000 SecDecodeTypeS
     /tmp/ccPPTXZA.s:1329   .text.SecOutputOneChar:0000000000000000 SecOutputOneChar
     /tmp/ccPPTXZA.s:1402   .text.SecDecodePrecision:0000000000000000 SecDecodePrecision
     /tmp/ccPPTXZA.s:1497   .text.SecDecodeWidth:0000000000000000 SecDecodeWidth
     /tmp/ccPPTXZA.s:1612   .text.SecOutputS:0000000000000000 SecOutputS
     /tmp/ccPPTXZA.s:4293   .data.rel.local.itoaUpperDigits.3563:0000000000000000 itoaUpperDigits.3563
     /tmp/ccPPTXZA.s:4299   .rodata.stateTable.3576:0000000000000000 stateTable.3576
     /tmp/ccPPTXZA.s:4544   .data.rel.local.itoaLowerDigits.3564:0000000000000000 itoaLowerDigits.3564
     /tmp/ccPPTXZA.s:4087   .text.SecWriteMultiChar:0000000000000000 SecWriteMultiChar
     /tmp/ccPPTXZA.s:4185   .text.SecWriteString:0000000000000000 SecWriteString
     /tmp/ccPPTXZA.s:3990   .text.SecVsnprintfImpl:0000000000000000 SecVsnprintfImpl

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memcpy
__stack_chk_fail
vsprintf
wctomb
strlen
strnlen
malloc
free
