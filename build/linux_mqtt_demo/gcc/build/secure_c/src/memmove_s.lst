GAS LISTING /tmp/cc5AunJE.s 			page 1


   1              		.file	"memmove_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.memmove_s,"ax",@progbits
   5              		.globl	memmove_s
   7              	memmove_s:
   8              	.LFB6:
   9              		.file 1 "/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c"
   1:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** /*
   2:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *
   4:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *
   8:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *
  10:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  */
  15:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** /* [Standardize-exceptions] Use unsafe function: Portability
  16:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * [reason] Use unsafe function to implement security function to maintain platform compatibility.
  17:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *          And sufficient input validation is performed before calling
  18:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  */
  19:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
  20:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** #include "securecutil.h"
  21:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
  22:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** #ifdef SECUREC_NOT_CALL_LIBC_CORE_API
  23:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** /*
  24:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * Implementing memory data movement
  25:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  */
  26:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** static void SecUtilMemmove(void *dst, const void *src, size_t count)
  27:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** {
  28:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     unsigned char *pDest = (unsigned char *)dst;
  29:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     const unsigned char *pSrc = (const unsigned char *)src;
  30:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     size_t maxCount = count;
  31:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
  32:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     if (dst <= src || pDest >= (pSrc + maxCount)) {
  33:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         /*
  34:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****          * Non-Overlapping Buffers
  35:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****          * copy from lower addresses to higher addresses
  36:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****          */
  37:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         while (maxCount--) {
  38:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             *pDest = *pSrc;
  39:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             ++pDest;
  40:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             ++pSrc;
  41:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         }
  42:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     } else {
  43:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         /*
  44:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****          * Overlapping Buffers
  45:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****          * copy from higher addresses to lower addresses
  46:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****          */
  47:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         pDest = pDest + maxCount - 1;
  48:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         pSrc = pSrc + maxCount - 1;
  49:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
GAS LISTING /tmp/cc5AunJE.s 			page 2


  50:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         while (maxCount--) {
  51:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             *pDest = *pSrc;
  52:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
  53:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             --pDest;
  54:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             --pSrc;
  55:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         }
  56:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     }
  57:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** }
  58:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** #endif
  59:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
  60:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** /*
  61:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * <FUNCTION DESCRIPTION>
  62:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    The memmove_s function copies count bytes of characters from src to dest.
  63:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    This function can be assigned correctly when memory overlaps.
  64:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * <INPUT PARAMETERS>
  65:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    dest                                 Destination object.
  66:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    destMax                           Size of the destination buffer.
  67:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    src                                   Source object.
  68:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    count                                Number of characters to copy.
  69:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *
  70:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * <OUTPUT PARAMETERS>
  71:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    dest buffer                       is uptdated.
  72:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *
  73:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  * <RETURN VALUE>
  74:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    EOK                                 Success
  75:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    EINVAL                            dest is  NULL and destMax != 0 and destMax <= SECUREC_MEM_M
  76:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    EINVAL_AND_RESET         dest != NULL and src is NULLL and destMax != 0 and destMax <= SECURE
  77:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    ERANGE                           destMax > SECUREC_MEM_MAX_LEN or destMax is 0
  78:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    ERANGE_AND_RESET        count > destMax and dest  !=  NULL and src != NULL and destMax != 0
  79:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *                            and destMax <= SECUREC_MEM_MAX_LEN
  80:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *
  81:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    If an error occured, dest will  be filled with 0 when dest and destMax valid.
  82:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    If some regions of the source area and the destination overlap, memmove_s
  83:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    ensures that the original source bytes in the overlapping region are copied
  84:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  *    before being overwritten.
  85:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****  */
  86:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** errno_t memmove_s(void *dest, size_t destMax, const void *src, size_t count)
  87:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** {
  10              		.loc 1 87 1
  11              		.cfi_startproc
  12 0000 F30F1EFA 		endbr64
  13 0004 55       		pushq	%rbp
  14              	.LCFI0:
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0005 4889E5   		movq	%rsp, %rbp
  18              	.LCFI1:
  19              		.cfi_def_cfa_register 6
  20 0008 4883EC30 		subq	$48, %rsp
  21 000c 48897DE8 		movq	%rdi, -24(%rbp)
  22 0010 488975E0 		movq	%rsi, -32(%rbp)
  23 0014 488955D8 		movq	%rdx, -40(%rbp)
  24 0018 48894DD0 		movq	%rcx, -48(%rbp)
  25              		.loc 1 87 1
  26 001c 64488B04 		movq	%fs:40, %rax
  26      25280000 
  26      00
GAS LISTING /tmp/cc5AunJE.s 			page 3


  27 0025 488945F8 		movq	%rax, -8(%rbp)
  28 0029 31C0     		xorl	%eax, %eax
  88:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     if (destMax == 0 || destMax > SECUREC_MEM_MAX_LEN) {
  29              		.loc 1 88 8
  30 002b 48837DE0 		cmpq	$0, -32(%rbp)
  30      00
  31 0030 740B     		je	.L2
  32              		.loc 1 88 22 discriminator 1
  33 0032 B8000000 		movl	$2147483648, %eax
  33      80
  34 0037 483945E0 		cmpq	%rax, -32(%rbp)
  35 003b 720A     		jb	.L3
  36              	.L2:
  89:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         SECUREC_ERROR_INVALID_RANGE("memmove_s");
  90:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         return ERANGE;
  37              		.loc 1 90 16
  38 003d B8220000 		movl	$34, %eax
  38      00
  39 0042 E9920000 		jmp	.L4
  39      00
  40              	.L3:
  91:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     }
  92:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     if (dest == NULL || src == NULL) {
  41              		.loc 1 92 8
  42 0047 48837DE8 		cmpq	$0, -24(%rbp)
  42      00
  43 004c 7407     		je	.L5
  44              		.loc 1 92 22 discriminator 1
  45 004e 48837DD8 		cmpq	$0, -40(%rbp)
  45      00
  46 0053 752A     		jne	.L6
  47              	.L5:
  93:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         SECUREC_ERROR_INVALID_PARAMTER("memmove_s");
  94:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         if (dest != NULL) {
  48              		.loc 1 94 12
  49 0055 48837DE8 		cmpq	$0, -24(%rbp)
  49      00
  50 005a 741C     		je	.L7
  95:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             (void)memset(dest, 0, destMax);
  51              		.loc 1 95 19
  52 005c 488B55E0 		movq	-32(%rbp), %rdx
  53 0060 488B45E8 		movq	-24(%rbp), %rax
  54 0064 BE000000 		movl	$0, %esi
  54      00
  55 0069 4889C7   		movq	%rax, %rdi
  56 006c E8000000 		call	memset@PLT
  56      00
  96:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****             return EINVAL_AND_RESET;
  57              		.loc 1 96 20
  58 0071 B8960000 		movl	$150, %eax
  58      00
  59 0076 EB61     		jmp	.L4
  60              	.L7:
  97:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         }
  98:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         return EINVAL;
  61              		.loc 1 98 16
  62 0078 B8160000 		movl	$22, %eax
GAS LISTING /tmp/cc5AunJE.s 			page 4


  62      00
  63 007d EB5A     		jmp	.L4
  64              	.L6:
  99:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     }
 100:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     if (count > destMax) {
  65              		.loc 1 100 8
  66 007f 488B45D0 		movq	-48(%rbp), %rax
  67 0083 483B45E0 		cmpq	-32(%rbp), %rax
  68 0087 761C     		jbe	.L8
 101:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         (void)memset(dest, 0, destMax);
  69              		.loc 1 101 15
  70 0089 488B55E0 		movq	-32(%rbp), %rdx
  71 008d 488B45E8 		movq	-24(%rbp), %rax
  72 0091 BE000000 		movl	$0, %esi
  72      00
  73 0096 4889C7   		movq	%rax, %rdi
  74 0099 E8000000 		call	memset@PLT
  74      00
 102:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         SECUREC_ERROR_INVALID_RANGE("memmove_s");
 103:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         return ERANGE_AND_RESET;
  75              		.loc 1 103 16
  76 009e B8A20000 		movl	$162, %eax
  76      00
  77 00a3 EB34     		jmp	.L4
  78              	.L8:
 104:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     }
 105:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     if (dest == src) {
  79              		.loc 1 105 8
  80 00a5 488B45E8 		movq	-24(%rbp), %rax
  81 00a9 483B45D8 		cmpq	-40(%rbp), %rax
  82 00ad 7507     		jne	.L9
 106:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         return EOK;
  83              		.loc 1 106 16
  84 00af B8000000 		movl	$0, %eax
  84      00
  85 00b4 EB23     		jmp	.L4
  86              	.L9:
 107:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     }
 108:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** 
 109:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     if (count > 0) {
  87              		.loc 1 109 8
  88 00b6 48837DD0 		cmpq	$0, -48(%rbp)
  88      00
  89 00bb 7417     		je	.L10
 110:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** #ifdef SECUREC_NOT_CALL_LIBC_CORE_API
 111:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         SecUtilMemmove(dest, src, count);
 112:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** #else
 113:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         /* use underlying memmove for performance consideration */
 114:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****         (void)memmove(dest, src, count);
  90              		.loc 1 114 15
  91 00bd 488B55D0 		movq	-48(%rbp), %rdx
  92 00c1 488B4DD8 		movq	-40(%rbp), %rcx
  93 00c5 488B45E8 		movq	-24(%rbp), %rax
  94 00c9 4889CE   		movq	%rcx, %rsi
  95 00cc 4889C7   		movq	%rax, %rdi
  96 00cf E8000000 		call	memmove@PLT
  96      00
GAS LISTING /tmp/cc5AunJE.s 			page 5


  97              	.L10:
 115:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** #endif
 116:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     }
 117:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c ****     return EOK;
  98              		.loc 1 117 12
  99 00d4 B8000000 		movl	$0, %eax
  99      00
 100              	.L4:
 118:/home/xingli/share/LiteOS_Lab/secure_c/src/memmove_s.c **** }
 101              		.loc 1 118 1
 102 00d9 488B4DF8 		movq	-8(%rbp), %rcx
 103 00dd 6448330C 		xorq	%fs:40, %rcx
 103      25280000 
 103      00
 104 00e6 7405     		je	.L11
 105 00e8 E8000000 		call	__stack_chk_fail@PLT
 105      00
 106              	.L11:
 107 00ed C9       		leave
 108              	.LCFI2:
 109              		.cfi_def_cfa 7, 8
 110 00ee C3       		ret
 111              		.cfi_endproc
 112              	.LFE6:
 114              		.text
 115              	.Letext0:
 116              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 117              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 118              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 119              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 120              		.file 6 "/usr/include/stdio.h"
 121              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 122              		.file 8 "/home/xingli/share/LiteOS_Lab/secure_c/include/securec.h"
 1064              		.section	.note.gnu.property,"a"
 1065              		.align 8
 1066 0000 04000000 		.long	 1f - 0f
 1067 0004 10000000 		.long	 4f - 1f
 1068 0008 05000000 		.long	 5
 1069              	0:
 1070 000c 474E5500 		.string	 "GNU"
 1071              	1:
 1072              		.align 8
 1073 0010 020000C0 		.long	 0xc0000002
 1074 0014 04000000 		.long	 3f - 2f
 1075              	2:
 1076 0018 03000000 		.long	 0x3
 1077              	3:
 1078 001c 00000000 		.align 8
 1079              	4:
GAS LISTING /tmp/cc5AunJE.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memmove_s.c
     /tmp/cc5AunJE.s:7      .text.memmove_s:0000000000000000 memmove_s

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memset
memmove
__stack_chk_fail
