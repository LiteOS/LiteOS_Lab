GAS LISTING /tmp/ccj5RWX2.s 			page 1


   1              		.file	"snprintf_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.snprintf_s,"ax",@progbits
   5              		.globl	snprintf_s
   7              	snprintf_s:
   8              	.LFB6:
   9              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c"
   1:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
  16:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** #include "securec.h"
  17:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
  18:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** #if SECUREC_ENABLE_SNPRINTF
  19:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** /*
  20:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <FUNCTION DESCRIPTION>
  21:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    The snprintf_s function is equivalent to the snprintf function
  22:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    except for the parameter destMax/count and the explicit runtime-constraints violation
  23:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    The snprintf_s function formats and stores count or fewer characters in
  24:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    strDest and appends a terminating null. Each argument (if any) is converted
  25:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    and output according to the corresponding format specification in format.
  26:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    The formatting is consistent with the printf family of functions; If copying
  27:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    occurs between strings that overlap, the behavior is undefined.
  28:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  29:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <INPUT PARAMETERS>
  30:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    strDest                 Storage location for the output.
  31:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    destMax                 The size of the storage location for output. Size
  32:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *                                 in bytes for snprintf_s or size in words for snwprintf_s.
  33:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    count                    Maximum number of character to store.
  34:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    format                  Format-control string.
  35:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    ...                        Optional arguments.
  36:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  37:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <OUTPUT PARAMETERS>
  38:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    strDest                 is updated
  39:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  40:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <RETURN VALUE>
  41:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    return  the number of characters written, not including the terminating null
  42:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    return -1 if an  error occurs.
  43:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    return -1 if count < destMax and the output string  has been truncated
  44:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  45:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * If there is a runtime-constraint violation, strDest[0] will be set to the '\0' when strDest and 
  46:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  47:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  */
  48:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** int snprintf_s(char *strDest, size_t destMax, size_t count, const char *format, ...)
  49:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** {
GAS LISTING /tmp/ccj5RWX2.s 			page 2


  10              		.loc 1 49 1
  11              		.cfi_startproc
  12 0000 F30F1EFA 		endbr64
  13 0004 55       		pushq	%rbp
  14              	.LCFI0:
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0005 4889E5   		movq	%rsp, %rbp
  18              	.LCFI1:
  19              		.cfi_def_cfa_register 6
  20 0008 4881EC00 		subq	$256, %rsp
  20      010000
  21 000f 4889BD18 		movq	%rdi, -232(%rbp)
  21      FFFFFF
  22 0016 4889B510 		movq	%rsi, -240(%rbp)
  22      FFFFFF
  23 001d 48899508 		movq	%rdx, -248(%rbp)
  23      FFFFFF
  24 0024 48898D00 		movq	%rcx, -256(%rbp)
  24      FFFFFF
  25 002b 4C898570 		movq	%r8, -144(%rbp)
  25      FFFFFF
  26 0032 4C898D78 		movq	%r9, -136(%rbp)
  26      FFFFFF
  27 0039 84C0     		testb	%al, %al
  28 003b 7420     		je	.L2
  29 003d 0F294580 		movaps	%xmm0, -128(%rbp)
  30 0041 0F294D90 		movaps	%xmm1, -112(%rbp)
  31 0045 0F2955A0 		movaps	%xmm2, -96(%rbp)
  32 0049 0F295DB0 		movaps	%xmm3, -80(%rbp)
  33 004d 0F2965C0 		movaps	%xmm4, -64(%rbp)
  34 0051 0F296DD0 		movaps	%xmm5, -48(%rbp)
  35 0055 0F2975E0 		movaps	%xmm6, -32(%rbp)
  36 0059 0F297DF0 		movaps	%xmm7, -16(%rbp)
  37              	.L2:
  38              		.loc 1 49 1
  39 005d 64488B04 		movq	%fs:40, %rax
  39      25280000 
  39      00
  40 0066 48898548 		movq	%rax, -184(%rbp)
  40      FFFFFF
  41 006d 31C0     		xorl	%eax, %eax
  50:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     int ret;                    /* If initialization causes  e838 */
  51:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     va_list argList;
  52:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
  53:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     va_start(argList, format);
  42              		.loc 1 53 5
  43 006f C78530FF 		movl	$32, -208(%rbp)
  43      FFFF2000 
  43      0000
  44 0079 C78534FF 		movl	$48, -204(%rbp)
  44      FFFF3000 
  44      0000
  45 0083 488D4510 		leaq	16(%rbp), %rax
  46 0087 48898538 		movq	%rax, -200(%rbp)
  46      FFFFFF
  47 008e 488D8550 		leaq	-176(%rbp), %rax
GAS LISTING /tmp/ccj5RWX2.s 			page 3


  47      FFFFFF
  48 0095 48898540 		movq	%rax, -192(%rbp)
  48      FFFFFF
  54:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     ret = vsnprintf_s(strDest, destMax, count, format, argList);
  49              		.loc 1 54 11
  50 009c 488DBD30 		leaq	-208(%rbp), %rdi
  50      FFFFFF
  51 00a3 488B8D00 		movq	-256(%rbp), %rcx
  51      FFFFFF
  52 00aa 488B9508 		movq	-248(%rbp), %rdx
  52      FFFFFF
  53 00b1 488BB510 		movq	-240(%rbp), %rsi
  53      FFFFFF
  54 00b8 488B8518 		movq	-232(%rbp), %rax
  54      FFFFFF
  55 00bf 4989F8   		movq	%rdi, %r8
  56 00c2 4889C7   		movq	%rax, %rdi
  57 00c5 E8000000 		call	vsnprintf_s@PLT
  57      00
  58 00ca 89852CFF 		movl	%eax, -212(%rbp)
  58      FFFF
  55:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     va_end(argList);
  56:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     (void)argList;              /* to clear e438 last value assigned not used , the compiler will o
  57:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
  58:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     return ret;
  59              		.loc 1 58 12
  60 00d0 8B852CFF 		movl	-212(%rbp), %eax
  60      FFFF
  59:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** }
  61              		.loc 1 59 1
  62 00d6 488B9548 		movq	-184(%rbp), %rdx
  62      FFFFFF
  63 00dd 64483314 		xorq	%fs:40, %rdx
  63      25280000 
  63      00
  64 00e6 7405     		je	.L4
  65 00e8 E8000000 		call	__stack_chk_fail@PLT
  65      00
  66              	.L4:
  67 00ed C9       		leave
  68              	.LCFI2:
  69              		.cfi_def_cfa 7, 8
  70 00ee C3       		ret
  71              		.cfi_endproc
  72              	.LFE6:
  74              		.section	.text.snprintf_truncated_s,"ax",@progbits
  75              		.globl	snprintf_truncated_s
  77              	snprintf_truncated_s:
  78              	.LFB7:
  60:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** #if SECUREC_IN_KERNEL
  61:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** EXPORT_SYMBOL(snprintf_s);
  62:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** #endif
  63:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** #endif
  64:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
  65:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** #if SECUREC_SNPRINTF_TRUNCATED
  66:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** /*
  67:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <FUNCTION DESCRIPTION>
GAS LISTING /tmp/ccj5RWX2.s 			page 4


  68:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    The snprintf_truncated_s function is equivalent to the snprintf function
  69:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    except for the parameter destMax/count and the explicit runtime-constraints violation
  70:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    The snprintf_truncated_s function formats and stores count or fewer characters in
  71:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    strDest and appends a terminating null. Each argument (if any) is converted
  72:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    and output according to the corresponding format specification in format.
  73:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    The formatting is consistent with the printf family of functions; If copying
  74:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    occurs between strings that overlap, the behavior is undefined.
  75:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  76:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <INPUT PARAMETERS>
  77:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    strDest                 Storage location for the output.
  78:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    destMax                 The size of the storage location for output. Size
  79:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *                                 in bytes for snprintf_truncated_s or size in words for snwprintf
  80:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    format                  Format-control string.
  81:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    ...                        Optional arguments.
  82:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  83:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <OUTPUT PARAMETERS>
  84:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    strDest                 is updated
  85:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  86:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * <RETURN VALUE>
  87:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    return  the number of characters written, not including the terminating null
  88:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    return -1 if an  error occurs.
  89:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *    return destMax-1 if output string  has been truncated
  90:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  91:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  * If there is a runtime-constraint violation, strDest[0] will be set to the '\0' when strDest and 
  92:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  *
  93:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****  */
  94:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** int snprintf_truncated_s(char *strDest, size_t destMax, const char *format, ...)
  95:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** {
  79              		.loc 1 95 1
  80              		.cfi_startproc
  81 0000 F30F1EFA 		endbr64
  82 0004 55       		pushq	%rbp
  83              	.LCFI3:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 6, -16
  86 0005 4889E5   		movq	%rsp, %rbp
  87              	.LCFI4:
  88              		.cfi_def_cfa_register 6
  89 0008 4881EC00 		subq	$256, %rsp
  89      010000
  90 000f 4889BD18 		movq	%rdi, -232(%rbp)
  90      FFFFFF
  91 0016 4889B510 		movq	%rsi, -240(%rbp)
  91      FFFFFF
  92 001d 48899508 		movq	%rdx, -248(%rbp)
  92      FFFFFF
  93 0024 48898D68 		movq	%rcx, -152(%rbp)
  93      FFFFFF
  94 002b 4C898570 		movq	%r8, -144(%rbp)
  94      FFFFFF
  95 0032 4C898D78 		movq	%r9, -136(%rbp)
  95      FFFFFF
  96 0039 84C0     		testb	%al, %al
  97 003b 7420     		je	.L6
  98 003d 0F294580 		movaps	%xmm0, -128(%rbp)
  99 0041 0F294D90 		movaps	%xmm1, -112(%rbp)
 100 0045 0F2955A0 		movaps	%xmm2, -96(%rbp)
GAS LISTING /tmp/ccj5RWX2.s 			page 5


 101 0049 0F295DB0 		movaps	%xmm3, -80(%rbp)
 102 004d 0F2965C0 		movaps	%xmm4, -64(%rbp)
 103 0051 0F296DD0 		movaps	%xmm5, -48(%rbp)
 104 0055 0F2975E0 		movaps	%xmm6, -32(%rbp)
 105 0059 0F297DF0 		movaps	%xmm7, -16(%rbp)
 106              	.L6:
 107              		.loc 1 95 1
 108 005d 64488B04 		movq	%fs:40, %rax
 108      25280000 
 108      00
 109 0066 48898548 		movq	%rax, -184(%rbp)
 109      FFFFFF
 110 006d 31C0     		xorl	%eax, %eax
  96:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     int ret;                    /* If initialization causes  e838 */
  97:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     va_list argList;
  98:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
  99:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     va_start(argList, format);
 111              		.loc 1 99 5
 112 006f C78530FF 		movl	$24, -208(%rbp)
 112      FFFF1800 
 112      0000
 113 0079 C78534FF 		movl	$48, -204(%rbp)
 113      FFFF3000 
 113      0000
 114 0083 488D4510 		leaq	16(%rbp), %rax
 115 0087 48898538 		movq	%rax, -200(%rbp)
 115      FFFFFF
 116 008e 488D8550 		leaq	-176(%rbp), %rax
 116      FFFFFF
 117 0095 48898540 		movq	%rax, -192(%rbp)
 117      FFFFFF
 100:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     ret = vsnprintf_truncated_s(strDest, destMax, format, argList);
 118              		.loc 1 100 11
 119 009c 488D8D30 		leaq	-208(%rbp), %rcx
 119      FFFFFF
 120 00a3 488B9508 		movq	-248(%rbp), %rdx
 120      FFFFFF
 121 00aa 488BB510 		movq	-240(%rbp), %rsi
 121      FFFFFF
 122 00b1 488B8518 		movq	-232(%rbp), %rax
 122      FFFFFF
 123 00b8 4889C7   		movq	%rax, %rdi
 124 00bb E8000000 		call	vsnprintf_truncated_s@PLT
 124      00
 125 00c0 89852CFF 		movl	%eax, -212(%rbp)
 125      FFFF
 101:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     va_end(argList);
 102:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     (void)argList;              /* to clear e438 last value assigned not used , the compiler will o
 103:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** 
 104:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c ****     return ret;
 126              		.loc 1 104 12
 127 00c6 8B852CFF 		movl	-212(%rbp), %eax
 127      FFFF
 105:/home/xingli/share/1205tiny/secure_c/src/snprintf_s.c **** }
 128              		.loc 1 105 1
 129 00cc 488BBD48 		movq	-184(%rbp), %rdi
 129      FFFFFF
GAS LISTING /tmp/ccj5RWX2.s 			page 6


 130 00d3 6448333C 		xorq	%fs:40, %rdi
 130      25280000 
 130      00
 131 00dc 7405     		je	.L8
 132 00de E8000000 		call	__stack_chk_fail@PLT
 132      00
 133              	.L8:
 134 00e3 C9       		leave
 135              	.LCFI5:
 136              		.cfi_def_cfa 7, 8
 137 00e4 C3       		ret
 138              		.cfi_endproc
 139              	.LFE7:
 141              		.text
 142              	.Letext0:
 143              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 144              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h"
 145              		.file 4 "<built-in>"
 146              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 147              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 148              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 149              		.file 8 "/usr/include/stdio.h"
 150              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1354              		.section	.note.gnu.property,"a"
 1355              		.align 8
 1356 0000 04000000 		.long	 1f - 0f
 1357 0004 10000000 		.long	 4f - 1f
 1358 0008 05000000 		.long	 5
 1359              	0:
 1360 000c 474E5500 		.string	 "GNU"
 1361              	1:
 1362              		.align 8
 1363 0010 020000C0 		.long	 0xc0000002
 1364 0014 04000000 		.long	 3f - 2f
 1365              	2:
 1366 0018 03000000 		.long	 0x3
 1367              	3:
 1368 001c 00000000 		.align 8
 1369              	4:
GAS LISTING /tmp/ccj5RWX2.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 snprintf_s.c
     /tmp/ccj5RWX2.s:7      .text.snprintf_s:0000000000000000 snprintf_s
     /tmp/ccj5RWX2.s:77     .text.snprintf_truncated_s:0000000000000000 snprintf_truncated_s

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
vsnprintf_s
__stack_chk_fail
vsnprintf_truncated_s
