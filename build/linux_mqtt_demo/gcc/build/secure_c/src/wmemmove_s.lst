GAS LISTING /tmp/ccLWAmdf.s 			page 1


   1              		.file	"wmemmove_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.wmemmove_s,"ax",@progbits
   5              		.globl	wmemmove_s
   7              	wmemmove_s:
   8              	.LFB6:
   9              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c"
   1:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** /* [Standardize-exceptions] Use unsafe function: Portability
  16:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * [reason] Use unsafe function to implement security function to maintain platform compatibility.
  17:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *          And sufficient input validation is performed before calling
  18:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  */
  19:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** 
  20:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** #include "securecutil.h"
  21:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** 
  22:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** /*
  23:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * <FUNCTION DESCRIPTION>
  24:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *   The wmemmove_s function copies n successive wide characters from the object pointed
  25:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *   to by src into the object pointed to by dest.
  26:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
  27:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * <INPUT PARAMETERS>
  28:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    dest                     Destination buffer.
  29:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    destMax                  Size of the destination buffer.
  30:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    src                      Source object.
  31:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    count                    Number of bytes or character to copy.
  32:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
  33:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * <OUTPUT PARAMETERS>
  34:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    dest                     is updated.
  35:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
  36:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  * <RETURN VALUE>
  37:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    EOK                      Success
  38:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    EINVAL                   dest is  NULL and destMax != 0 and count <= destMax
  39:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *                             and destMax <= SECUREC_WCHAR_MEM_MAX_LEN
  40:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    EINVAL_AND_RESET         dest != NULL and src is NULLL and destMax != 0
  41:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *                             and destMax <= SECUREC_WCHAR_MEM_MAX_LEN and count <= destMax
  42:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    ERANGE                   destMax > SECUREC_WCHAR_MEM_MAX_LEN or destMax is 0 or
  43:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *                             (count > destMax and dest is  NULL and destMax != 0
  44:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *                             and destMax <= SECUREC_WCHAR_MEM_MAX_LEN)
  45:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *    ERANGE_AND_RESET        count > destMax and dest  !=  NULL and destMax != 0
  46:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *                             and destMax <= SECUREC_WCHAR_MEM_MAX_LEN
  47:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
  48:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *
  49:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *     If an error occured, dest will  be filled with 0 when dest and destMax valid.
GAS LISTING /tmp/ccLWAmdf.s 			page 2


  50:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *     If some regions of the source area and the destination overlap, wmemmove_s
  51:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *     ensures that the original source bytes in the overlapping region are copied
  52:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  *     before being overwritten
  53:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****  */
  54:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** errno_t wmemmove_s(wchar_t *dest, size_t destMax, const wchar_t *src, size_t count)
  55:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** {
  10              		.loc 1 55 1
  11              		.cfi_startproc
  12 0000 F30F1EFA 		endbr64
  13 0004 55       		pushq	%rbp
  14              	.LCFI0:
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0005 4889E5   		movq	%rsp, %rbp
  18              	.LCFI1:
  19              		.cfi_def_cfa_register 6
  20 0008 4883EC30 		subq	$48, %rsp
  21 000c 48897DE8 		movq	%rdi, -24(%rbp)
  22 0010 488975E0 		movq	%rsi, -32(%rbp)
  23 0014 488955D8 		movq	%rdx, -40(%rbp)
  24 0018 48894DD0 		movq	%rcx, -48(%rbp)
  25              		.loc 1 55 1
  26 001c 64488B04 		movq	%fs:40, %rax
  26      25280000 
  26      00
  27 0025 488945F8 		movq	%rax, -8(%rbp)
  28 0029 31C0     		xorl	%eax, %eax
  56:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****     if (destMax == 0 || destMax > SECUREC_WCHAR_MEM_MAX_LEN) {
  29              		.loc 1 56 8
  30 002b 48837DE0 		cmpq	$0, -32(%rbp)
  30      00
  31 0030 740A     		je	.L2
  32              		.loc 1 56 22 discriminator 1
  33 0032 48817DE0 		cmpq	$536870911, -32(%rbp)
  33      FFFFFF1F 
  34 003a 7607     		jbe	.L3
  35              	.L2:
  57:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****         SECUREC_ERROR_INVALID_PARAMTER("wmemmove_s");
  58:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****         return ERANGE;
  36              		.loc 1 58 16
  37 003c B8220000 		movl	$34, %eax
  37      00
  38 0041 EB64     		jmp	.L4
  39              	.L3:
  59:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****     }
  60:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****     if (count > destMax) {
  40              		.loc 1 60 8
  41 0043 488B45D0 		movq	-48(%rbp), %rax
  42 0047 483B45E0 		cmpq	-32(%rbp), %rax
  43 004b 7632     		jbe	.L5
  61:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****         SECUREC_ERROR_INVALID_PARAMTER("wmemmove_s");
  62:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****         if (dest != NULL) {
  44              		.loc 1 62 12
  45 004d 48837DE8 		cmpq	$0, -24(%rbp)
  45      00
  46 0052 7424     		je	.L6
  63:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****             (void)memset(dest, 0, destMax * sizeof(wchar_t));
GAS LISTING /tmp/ccLWAmdf.s 			page 3


  47              		.loc 1 63 19
  48 0054 488B45E0 		movq	-32(%rbp), %rax
  49 0058 488D1485 		leaq	0(,%rax,4), %rdx
  49      00000000 
  50 0060 488B45E8 		movq	-24(%rbp), %rax
  51 0064 BE000000 		movl	$0, %esi
  51      00
  52 0069 4889C7   		movq	%rax, %rdi
  53 006c E8000000 		call	memset@PLT
  53      00
  64:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****             return ERANGE_AND_RESET;
  54              		.loc 1 64 20
  55 0071 B8A20000 		movl	$162, %eax
  55      00
  56 0076 EB2F     		jmp	.L4
  57              	.L6:
  65:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****         }
  66:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****         return ERANGE;
  58              		.loc 1 66 16
  59 0078 B8220000 		movl	$34, %eax
  59      00
  60 007d EB28     		jmp	.L4
  61              	.L5:
  67:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****     }
  68:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c ****     return memmove_s(dest, destMax * sizeof(wchar_t), src, count * sizeof(wchar_t));
  62              		.loc 1 68 12
  63 007f 488B45D0 		movq	-48(%rbp), %rax
  64 0083 488D0C85 		leaq	0(,%rax,4), %rcx
  64      00000000 
  65 008b 488B45E0 		movq	-32(%rbp), %rax
  66 008f 488D3485 		leaq	0(,%rax,4), %rsi
  66      00000000 
  67 0097 488B55D8 		movq	-40(%rbp), %rdx
  68 009b 488B45E8 		movq	-24(%rbp), %rax
  69 009f 4889C7   		movq	%rax, %rdi
  70 00a2 E8000000 		call	memmove_s@PLT
  70      00
  71              	.L4:
  69:/home/xingli/share/1205tiny/secure_c/src/wmemmove_s.c **** }
  72              		.loc 1 69 1
  73 00a7 488B7DF8 		movq	-8(%rbp), %rdi
  74 00ab 6448333C 		xorq	%fs:40, %rdi
  74      25280000 
  74      00
  75 00b4 7405     		je	.L7
  76 00b6 E8000000 		call	__stack_chk_fail@PLT
  76      00
  77              	.L7:
  78 00bb C9       		leave
  79              	.LCFI2:
  80              		.cfi_def_cfa 7, 8
  81 00bc C3       		ret
  82              		.cfi_endproc
  83              	.LFE6:
  85              		.text
  86              	.Letext0:
  87              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
GAS LISTING /tmp/ccLWAmdf.s 			page 4


  88              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
  89              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
  90              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
  91              		.file 6 "/usr/include/stdio.h"
  92              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
  93              		.file 8 "/home/xingli/share/1205tiny/secure_c/include/securec.h"
 1060              		.section	.note.gnu.property,"a"
 1061              		.align 8
 1062 0000 04000000 		.long	 1f - 0f
 1063 0004 10000000 		.long	 4f - 1f
 1064 0008 05000000 		.long	 5
 1065              	0:
 1066 000c 474E5500 		.string	 "GNU"
 1067              	1:
 1068              		.align 8
 1069 0010 020000C0 		.long	 0xc0000002
 1070 0014 04000000 		.long	 3f - 2f
 1071              	2:
 1072 0018 03000000 		.long	 0x3
 1073              	3:
 1074 001c 00000000 		.align 8
 1075              	4:
GAS LISTING /tmp/ccLWAmdf.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 wmemmove_s.c
     /tmp/ccLWAmdf.s:7      .text.wmemmove_s:0000000000000000 wmemmove_s

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memset
memmove_s
__stack_chk_fail
