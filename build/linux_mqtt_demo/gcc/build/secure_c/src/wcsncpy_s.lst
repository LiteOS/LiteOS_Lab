GAS LISTING /tmp/ccH5Hbed.s 			page 1


   1              		.file	"wcsncpy_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.SecDoMemcpy,"ax",@progbits
   6              	SecDoMemcpy:
   7              	.LFB6:
   8              		.file 1 "/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h"
   1:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /*
   2:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  *
   4:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  *
   8:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  *
  10:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
  15:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
  16:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  17:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  18:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #include "securec.h"
  19:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
  20:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if (defined(_MSC_VER)) && (_MSC_VER >= 1400)
  21:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING __pragma(warning(push)) \
  22:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     __pragma(warning(disable:4996 4127))
  23:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING  __pragma(warning(pop))
  24:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
  25:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING
  26:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING
  27:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  28:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_WHILE_ZERO SECUREC_MASK_MSVC_CRT_WARNING while (0) SECUREC_END_MASK_MSVC_CRT_WARNIN
  29:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
  30:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_STRNLEN
  31:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 700) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURC
  32:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  33:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  34:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
  35:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(__GLIBC__) && __GLIBC__ >= 2 && defined(__GLIBC_MINOR__) && __GLIBC_MINOR__ >= 10
  36:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 1
  37:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
  38:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  39:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  40:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  41:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
  42:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  43:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  44:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  45:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
  46:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  47:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* in kernel disbale functions */
  48:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  49:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 0
  50:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
GAS LISTING /tmp/ccH5Hbed.s 			page 2


  51:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  52:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 0
  53:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  54:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  55:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 0
  56:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  57:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  58:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 0
  59:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  60:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  61:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 0
  62:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  63:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  64:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 0
  65:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  66:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else /* no in kernel */
  67:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* Systems that do not support file, can define this macro to 0. */
  68:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  69:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 1
  70:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  71:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  72:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 1
  73:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  74:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* Systems that do not support float, can define this macro to 0. */
  75:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  76:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 1
  77:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  78:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  79:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 1
  80:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  81:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  82:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 1
  83:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  84:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  85:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 1
  86:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  87:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
  88:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
  89:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
  90:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_INT_MAX                     2147483647
  91:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MUL_SIXTEEN(x)              ((x) << 4)
  92:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MUL_EIGHT(x)                ((x) << 3)
  93:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN(x)                  ((((x) << 2) + (x)) << 1)
  94:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* Limited format input and output width */
  95:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN_DIV_TEN       21474836
  96:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN               SECUREC_MUL_TEN(SECUREC_MAX_WIDTH_LEN_DIV_TEN)
  97:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* Is the x multiplied by 10 greater than */
  98:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN_ADD_BEYOND_MAX(x)   (((x) > SECUREC_MAX_WIDTH_LEN_DIV_TEN))
  99:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 100:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE               (309 + 40)  /* Max length of double value */
 101:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE_LB            (4932 + 40) /* Max length of long double value */
 102:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_DEFAULT_PRECISION     6
 103:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 104:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* This macro does not handle pointer equality or integer overflow */
 105:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_NO_OVERLAP(dest, src, count) \
 106:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) <= (char *)(dest)) || \
 107:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) <= (const char *)(src)))
GAS LISTING /tmp/ccH5Hbed.s 			page 3


 108:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 109:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_IS_OVERLAP(dest, src, count) \
 110:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) > (char *)(dest)) || \
 111:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) > (const char *)(src)))
 112:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 113:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /*
 114:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Check whether the strings overlap, len is the length of the string not include terminator
 115:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 116:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
 117:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_STRING_NO_OVERLAP(dest, src, len) \
 118:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) < (dest)) || \
 119:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) < (src)))
 120:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 121:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /*
 122:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcpy wcscpy function, dest len and src Len are not inclu
 123:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 124:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
 125:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_STRING_IS_OVERLAP(dest, src, len) \
 126:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) >= (dest)) || \
 127:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) >= (src)))
 128:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 129:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /*
 130:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcat wcscat function, dest len and src Len are not inclu
 131:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 132:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
 133:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_CAT_STRING_IS_OVERLAP(dest, destLen, src, srcLen) \
 134:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (((dest) < (src) && ((dest) + (destLen) + (srcLen)) >= (src)) || \
 135:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     ((src) < (dest) && ((src) + (srcLen)) >= (dest)))
 136:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 137:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 138:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if SECUREC_HAVE_STRNLEN
 139:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 140:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     *(outLen) = strnlen((str), (maxLen)); \
 141:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 142:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT(str, maxLen, outLen) do { \
 143:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     if ((maxLen) > 8) { \
 144:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         /* Optimization or len less then 8 */ \
 145:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         if (*((str) + 0) == '\0') { \
 146:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 0; \
 147:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 1) == '\0') { \
 148:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 1; \
 149:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 2) == '\0') { \
 150:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 2; \
 151:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 3) == '\0') { \
 152:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 3; \
 153:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 4) == '\0') { \
 154:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 4; \
 155:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 5) == '\0') { \
 156:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 5; \
 157:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 6) == '\0') { \
 158:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 6; \
 159:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 7) == '\0') { \
 160:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 7; \
 161:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else if (*((str) + 8) == '\0') { \
 162:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             /* Optimization with a length of 8 */ \
 163:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 8; \
 164:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } else { \
GAS LISTING /tmp/ccH5Hbed.s 			page 4


 165:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             /* The offset is 8 because the performance of 8 byte alignment is high */ \
 166:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****             *(outLen) = 8 + strnlen((str) + 8, (maxLen) - 8); \
 167:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         } \
 168:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     } else { \
 169:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         SECUREC_CALC_STR_LEN((str), (maxLen), (outLen)); \
 170:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     } \
 171:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 172:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
 173:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 174:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     const char *strEnd = (const char *)(str); \
 175:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     size_t availableSize = (size_t)(maxLen); \
 176:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     while (availableSize > 0 && *strEnd != '\0') { \
 177:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         --availableSize; \
 178:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         ++strEnd; \
 179:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     } \
 180:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     *(outLen) = (size_t)(strEnd - (str)); \
 181:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 182:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT SECUREC_CALC_STR_LEN
 183:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 184:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 185:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_CALC_WSTR_LEN(str, maxLen, outLen) do { \
 186:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     const wchar_t *strEnd = (const wchar_t *)(str); \
 187:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     *(outLen) = 0; \
 188:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     while (*(outLen) < (maxLen) && *strEnd != L'\0') { \
 189:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         *(outLen) = *(outLen) + 1; \
 190:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****         ++strEnd; \
 191:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     } \
 192:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 193:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 194:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 195:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifdef SECUREC_FORMAT_OUTPUT_INPUT
 196:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT) || defined(__ARMCC_VERSION)
 197:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef __int64 SecInt64;
 198:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned __int64 SecUnsignedInt64;
 199:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(__ARMCC_VERSION)
 200:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 201:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
 202:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned __int32 SecUnsignedInt32;
 203:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 204:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
 205:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 206:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef long long SecInt64;
 207:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned long long SecUnsignedInt64;
 208:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 209:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 210:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifdef SECUREC_FOR_WCHAR
 211:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(SECUREC_VXWORKS_PLATFORM) && !defined(__WINT_TYPE__)
 212:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef wchar_t wint_t;
 213:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 214:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef wchar_t SecChar;
 215:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef wchar_t SecUnsignedChar;
 216:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef wint_t SecInt;
 217:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef wint_t SecUnsignedInt;
 218:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else /*  no SECUREC_FOR_WCHAR */
 219:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef char SecChar;
 220:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned char SecUnsignedChar;
 221:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef int SecInt;
GAS LISTING /tmp/ccH5Hbed.s 			page 5


 222:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt;
 223:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 224:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 225:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 226:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* Determine whether the address is 8-byte aligned
 227:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * Some systems do not have uintptr_t type, so  use NULL to clear tool alarm 507
 228:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
 229:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ADDR_ALIGNED_8(addr) (SecIsAddrAligned8((addr), NULL) == 0)
 230:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 231:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* If you define the memory allocation function,
 232:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * you need to define the function prototype. You can define this macro as a header file.
 233:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
 234:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(SECUREC_MALLOC_PROTOTYPE)
 235:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** SECUREC_MALLOC_PROTOTYPE
 236:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 237:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 238:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_MALLOC
 239:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_MALLOC(x) malloc((size_t)(x))
 240:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 241:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 242:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifndef SECUREC_FREE
 243:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_FREE(x)   free((void *)(x))
 244:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 245:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 246:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* struct for performance */
 247:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 248:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[1]; /* Performance optimization code structure assignment length 1 bytes */
 249:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf1;
 250:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 251:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[2]; /* Performance optimization code structure assignment length 2 bytes */
 252:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf2;
 253:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 254:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[3]; /* Performance optimization code structure assignment length 3 bytes */
 255:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf3;
 256:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 257:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[4]; /* Performance optimization code structure assignment length 4 bytes */
 258:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf4;
 259:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 260:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[5]; /* Performance optimization code structure assignment length 5 bytes */
 261:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf5;
 262:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 263:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[6]; /* Performance optimization code structure assignment length 6 bytes */
 264:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf6;
 265:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 266:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[7]; /* Performance optimization code structure assignment length 7 bytes */
 267:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf7;
 268:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 269:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[8]; /* Performance optimization code structure assignment length 8 bytes */
 270:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf8;
 271:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 272:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[9]; /* Performance optimization code structure assignment length 9 bytes */
 273:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf9;
 274:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 275:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[10]; /* Performance optimization code structure assignment length 10 bytes */
 276:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf10;
 277:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 278:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[11]; /* Performance optimization code structure assignment length 11 bytes */
GAS LISTING /tmp/ccH5Hbed.s 			page 6


 279:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf11;
 280:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 281:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[12]; /* Performance optimization code structure assignment length 12 bytes */
 282:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf12;
 283:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 284:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[13]; /* Performance optimization code structure assignment length 13 bytes */
 285:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf13;
 286:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 287:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[14]; /* Performance optimization code structure assignment length 14 bytes */
 288:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf14;
 289:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 290:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[15]; /* Performance optimization code structure assignment length 15 bytes */
 291:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf15;
 292:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 293:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[16]; /* Performance optimization code structure assignment length 16 bytes */
 294:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf16;
 295:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 296:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[17]; /* Performance optimization code structure assignment length 17 bytes */
 297:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf17;
 298:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 299:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[18]; /* Performance optimization code structure assignment length 18 bytes */
 300:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf18;
 301:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 302:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[19]; /* Performance optimization code structure assignment length 19 bytes */
 303:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf19;
 304:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 305:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[20]; /* Performance optimization code structure assignment length 20 bytes */
 306:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf20;
 307:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 308:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[21]; /* Performance optimization code structure assignment length 21 bytes */
 309:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf21;
 310:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 311:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[22]; /* Performance optimization code structure assignment length 22 bytes */
 312:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf22;
 313:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 314:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[23]; /* Performance optimization code structure assignment length 23 bytes */
 315:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf23;
 316:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 317:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[24]; /* Performance optimization code structure assignment length 24 bytes */
 318:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf24;
 319:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 320:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[25]; /* Performance optimization code structure assignment length 25 bytes */
 321:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf25;
 322:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 323:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[26]; /* Performance optimization code structure assignment length 26 bytes */
 324:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf26;
 325:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 326:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[27]; /* Performance optimization code structure assignment length 27 bytes */
 327:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf27;
 328:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 329:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[28]; /* Performance optimization code structure assignment length 28 bytes */
 330:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf28;
 331:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 332:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[29]; /* Performance optimization code structure assignment length 29 bytes */
 333:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf29;
 334:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 335:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[30]; /* Performance optimization code structure assignment length 30 bytes */
GAS LISTING /tmp/ccH5Hbed.s 			page 7


 336:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf30;
 337:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 338:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[31]; /* Performance optimization code structure assignment length 31 bytes */
 339:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf31;
 340:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 341:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[32]; /* Performance optimization code structure assignment length 32 bytes */
 342:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf32;
 343:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 344:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[33]; /* Performance optimization code structure assignment length 33 bytes */
 345:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf33;
 346:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 347:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[34]; /* Performance optimization code structure assignment length 34 bytes */
 348:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf34;
 349:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 350:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[35]; /* Performance optimization code structure assignment length 35 bytes */
 351:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf35;
 352:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 353:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[36]; /* Performance optimization code structure assignment length 36 bytes */
 354:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf36;
 355:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 356:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[37]; /* Performance optimization code structure assignment length 37 bytes */
 357:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf37;
 358:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 359:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[38]; /* Performance optimization code structure assignment length 38 bytes */
 360:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf38;
 361:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 362:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[39]; /* Performance optimization code structure assignment length 39 bytes */
 363:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf39;
 364:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 365:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[40]; /* Performance optimization code structure assignment length 40 bytes */
 366:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf40;
 367:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 368:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[41]; /* Performance optimization code structure assignment length 41 bytes */
 369:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf41;
 370:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 371:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[42]; /* Performance optimization code structure assignment length 42 bytes */
 372:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf42;
 373:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 374:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[43]; /* Performance optimization code structure assignment length 43 bytes */
 375:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf43;
 376:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 377:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[44]; /* Performance optimization code structure assignment length 44 bytes */
 378:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf44;
 379:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 380:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[45]; /* Performance optimization code structure assignment length 45 bytes */
 381:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf45;
 382:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 383:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[46]; /* Performance optimization code structure assignment length 46 bytes */
 384:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf46;
 385:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 386:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[47]; /* Performance optimization code structure assignment length 47 bytes */
 387:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf47;
 388:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 389:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[48]; /* Performance optimization code structure assignment length 48 bytes */
 390:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf48;
 391:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 392:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[49]; /* Performance optimization code structure assignment length 49 bytes */
GAS LISTING /tmp/ccH5Hbed.s 			page 8


 393:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf49;
 394:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 395:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[50]; /* Performance optimization code structure assignment length 50 bytes */
 396:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf50;
 397:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 398:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[51]; /* Performance optimization code structure assignment length 51 bytes */
 399:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf51;
 400:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 401:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[52]; /* Performance optimization code structure assignment length 52 bytes */
 402:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf52;
 403:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 404:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[53]; /* Performance optimization code structure assignment length 53 bytes */
 405:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf53;
 406:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 407:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[54]; /* Performance optimization code structure assignment length 54 bytes */
 408:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf54;
 409:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 410:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[55]; /* Performance optimization code structure assignment length 55 bytes */
 411:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf55;
 412:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 413:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[56]; /* Performance optimization code structure assignment length 56 bytes */
 414:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf56;
 415:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 416:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[57]; /* Performance optimization code structure assignment length 57 bytes */
 417:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf57;
 418:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 419:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[58]; /* Performance optimization code structure assignment length 58 bytes */
 420:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf58;
 421:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 422:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[59]; /* Performance optimization code structure assignment length 59 bytes */
 423:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf59;
 424:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 425:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[60]; /* Performance optimization code structure assignment length 60 bytes */
 426:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf60;
 427:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 428:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[61]; /* Performance optimization code structure assignment length 61 bytes */
 429:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf61;
 430:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 431:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[62]; /* Performance optimization code structure assignment length 62 bytes */
 432:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf62;
 433:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 434:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[63]; /* Performance optimization code structure assignment length 63 bytes */
 435:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf63;
 436:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** typedef struct {
 437:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     unsigned char buf[64]; /* Performance optimization code structure assignment length 64 bytes */
 438:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** } SecStrBuf64;
 439:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 440:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 441:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 442:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 443:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* User can change the error handler by modify the following definition,
 444:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  * such as logging the detail error in file.
 445:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****  */
 446:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(_DEBUG) || defined(DEBUG)
 447:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_ASSERT)
 448:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) assert(msg "invalid argument" == NULL)
 449:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    assert(msg "invalid dest buffer size" == NULL)
GAS LISTING /tmp/ccH5Hbed.s 			page 9


 450:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   assert(msg "buffer overlap" == NULL)
 451:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_PRINTF)
 452:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
 453:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printk("%s invalid argument\n", msg)
 454:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printk("%s invalid dest buffer size\n", msg)
 455:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printk("%s buffer overlap\n", msg)
 456:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
 457:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printf("%s invalid argument\n", msg)
 458:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printf("%s invalid dest buffer size\n", msg)
 459:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printf("%s buffer overlap\n", msg)
 460:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 461:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 462:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) LogSecureCRuntimeError(msg " EINVAL\n")
 463:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    LogSecureCRuntimeError(msg " ERANGE\n")
 464:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   LogSecureCRuntimeError(msg " EOVERLAP\n")
 465:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else /* no HANDLER is defined */
 466:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 467:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 468:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 469:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 470:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else /* no DEBUG */
 471:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 472:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 473:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 474:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 475:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 476:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifdef __cplusplus
 477:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** extern "C" {
 478:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 479:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 480:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** /* assembly language memory copy and memory set for X86 or MIPS ... */
 481:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 482:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     extern void *memcpy_opt(void *, const void *, size_t);
 483:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     extern void *memset_opt(void *, int, size_t);
 484:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 485:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 486:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 487:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     extern void LogSecureCRuntimeError(const char *errDetail);
 488:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 489:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** 
 490:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifdef SECUREC_INLINE_DO_MEMCPY
 491:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** static void SecDoMemcpy(void *dest, const void *src, size_t count)
 492:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** {
   9              		.loc 1 492 1
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              	.LCFI0:
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              	.LCFI1:
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DE8 		movq	%rdi, -24(%rbp)
  21 0010 488975E0 		movq	%rsi, -32(%rbp)
  22 0014 488955D8 		movq	%rdx, -40(%rbp)
GAS LISTING /tmp/ccH5Hbed.s 			page 10


  23              		.loc 1 492 1
  24 0018 64488B04 		movq	%fs:40, %rax
  24      25280000 
  24      00
  25 0021 488945F8 		movq	%rax, -8(%rbp)
  26 0025 31C0     		xorl	%eax, %eax
 493:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     /*
 494:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****      * if SECUREC_USE_ASM macro is enabled, it will call assembly language function to improve perf
 495:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****      */
 496:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 497:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (void)memcpy_opt(dest, src, count);
 498:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #else
 499:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     /* large enough, let system API do it */
 500:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h ****     (void)memcpy(dest, src, count);
  27              		.loc 1 500 11
  28 0027 488B55D8 		movq	-40(%rbp), %rdx
  29 002b 488B4DE0 		movq	-32(%rbp), %rcx
  30 002f 488B45E8 		movq	-24(%rbp), %rax
  31 0033 4889CE   		movq	%rcx, %rsi
  32 0036 4889C7   		movq	%rax, %rdi
  33 0039 E8000000 		call	memcpy@PLT
  33      00
 501:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** #endif
 502:/home/xingli/share/LiteOS_Lab/secure_c/src/securecutil.h **** }
  34              		.loc 1 502 1
  35 003e 90       		nop
  36 003f 488B45F8 		movq	-8(%rbp), %rax
  37 0043 64483304 		xorq	%fs:40, %rax
  37      25280000 
  37      00
  38 004c 7405     		je	.L2
  39 004e E8000000 		call	__stack_chk_fail@PLT
  39      00
  40              	.L2:
  41 0053 C9       		leave
  42              	.LCFI2:
  43              		.cfi_def_cfa 7, 8
  44 0054 C3       		ret
  45              		.cfi_endproc
  46              	.LFE6:
  48              		.section	.text.SecDoWcsncpy,"ax",@progbits
  50              	SecDoWcsncpy:
  51              	.LFB7:
  52              		.file 2 "/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c"
   1:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** /*
   2:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
   4:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
   8:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
  10:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * See the Mulan PSL v1 for more details.  
GAS LISTING /tmp/ccH5Hbed.s 			page 11


  14:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  */
  15:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** #define SECUREC_INLINE_DO_MEMCPY 1
  16:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** 
  17:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** #include "securecutil.h"
  18:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** 
  19:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** static errno_t SecDoWcsncpy(wchar_t *strDest, size_t destMax, const wchar_t *strSrc, size_t count)
  20:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** {
  53              		.loc 2 20 1
  54              		.cfi_startproc
  55 0000 F30F1EFA 		endbr64
  56 0004 55       		pushq	%rbp
  57              	.LCFI3:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 6, -16
  60 0005 4889E5   		movq	%rsp, %rbp
  61              	.LCFI4:
  62              		.cfi_def_cfa_register 6
  63 0008 4883EC40 		subq	$64, %rsp
  64 000c 48897DD8 		movq	%rdi, -40(%rbp)
  65 0010 488975D0 		movq	%rsi, -48(%rbp)
  66 0014 488955C8 		movq	%rdx, -56(%rbp)
  67 0018 48894DC0 		movq	%rcx, -64(%rbp)
  68              		.loc 2 20 1
  69 001c 64488B04 		movq	%fs:40, %rax
  69      25280000 
  69      00
  70 0025 488945F8 		movq	%rax, -8(%rbp)
  71 0029 31C0     		xorl	%eax, %eax
  21:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     size_t srcStrLen;
  22:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (count < destMax) {
  72              		.loc 2 22 8
  73 002b 488B45C0 		movq	-64(%rbp), %rax
  74 002f 483B45D0 		cmpq	-48(%rbp), %rax
  75 0033 7339     		jnb	.L4
  76              	.LBB2:
  23:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_CALC_WSTR_LEN(strSrc, count, &srcStrLen);
  77              		.loc 2 23 9
  78 0035 488B45C8 		movq	-56(%rbp), %rax
  79 0039 488945E8 		movq	%rax, -24(%rbp)
  80 003d 48C745E0 		movq	$0, -32(%rbp)
  80      00000000 
  81 0045 EB11     		jmp	.L5
  82              	.L7:
  83              		.loc 2 23 9 is_stmt 0 discriminator 4
  84 0047 488B45E0 		movq	-32(%rbp), %rax
  85 004b 4883C001 		addq	$1, %rax
  86 004f 488945E0 		movq	%rax, -32(%rbp)
  87 0053 488345E8 		addq	$4, -24(%rbp)
  87      04
  88              	.L5:
  89              		.loc 2 23 9 discriminator 1
  90 0058 488B45E0 		movq	-32(%rbp), %rax
  91 005c 483945C0 		cmpq	%rax, -64(%rbp)
  92 0060 7643     		jbe	.L6
  93              		.loc 2 23 9 discriminator 3
  94 0062 488B45E8 		movq	-24(%rbp), %rax
  95 0066 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/ccH5Hbed.s 			page 12


  96 0068 85C0     		testl	%eax, %eax
  97 006a 75DB     		jne	.L7
  98 006c EB37     		jmp	.L6
  99              	.L4:
 100              	.LBE2:
 101              	.LBB3:
  24:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     } else {
  25:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_CALC_WSTR_LEN(strSrc, destMax, &srcStrLen);
 102              		.loc 2 25 9 is_stmt 1
 103 006e 488B45C8 		movq	-56(%rbp), %rax
 104 0072 488945F0 		movq	%rax, -16(%rbp)
 105 0076 48C745E0 		movq	$0, -32(%rbp)
 105      00000000 
 106 007e EB11     		jmp	.L8
 107              	.L9:
 108              		.loc 2 25 9 is_stmt 0 discriminator 4
 109 0080 488B45E0 		movq	-32(%rbp), %rax
 110 0084 4883C001 		addq	$1, %rax
 111 0088 488945E0 		movq	%rax, -32(%rbp)
 112 008c 488345F0 		addq	$4, -16(%rbp)
 112      04
 113              	.L8:
 114              		.loc 2 25 9 discriminator 1
 115 0091 488B45E0 		movq	-32(%rbp), %rax
 116 0095 483945D0 		cmpq	%rax, -48(%rbp)
 117 0099 760A     		jbe	.L6
 118              		.loc 2 25 9 discriminator 3
 119 009b 488B45F0 		movq	-16(%rbp), %rax
 120 009f 8B00     		movl	(%rax), %eax
 121 00a1 85C0     		testl	%eax, %eax
 122 00a3 75DB     		jne	.L9
 123              	.L6:
 124              	.LBE3:
  26:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
  27:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (srcStrLen == destMax) {
 125              		.loc 2 27 19 is_stmt 1
 126 00a5 488B45E0 		movq	-32(%rbp), %rax
 127              		.loc 2 27 8
 128 00a9 483945D0 		cmpq	%rax, -48(%rbp)
 129 00ad 7514     		jne	.L10
  28:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         strDest[0] = '\0';
 130              		.loc 2 28 20
 131 00af 488B45D8 		movq	-40(%rbp), %rax
 132 00b3 C7000000 		movl	$0, (%rax)
 132      0000
  29:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_ERROR_INVALID_RANGE("wcsncpy_s");
  30:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return ERANGE_AND_RESET;
 133              		.loc 2 30 16
 134 00b9 B8A20000 		movl	$162, %eax
 134      00
 135 00be E9A80000 		jmp	.L16
 135      00
 136              	.L10:
  31:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
  32:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (strDest == strSrc) {
 137              		.loc 2 32 8
 138 00c3 488B45D8 		movq	-40(%rbp), %rax
GAS LISTING /tmp/ccH5Hbed.s 			page 13


 139 00c7 483B45C8 		cmpq	-56(%rbp), %rax
 140 00cb 750A     		jne	.L12
  33:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return EOK;
 141              		.loc 2 33 16
 142 00cd B8000000 		movl	$0, %eax
 142      00
 143 00d2 E9940000 		jmp	.L16
 143      00
 144              	.L12:
  34:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
  35:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (SECUREC_STRING_NO_OVERLAP(strDest, strSrc, srcStrLen)) {
 145              		.loc 2 35 8
 146 00d7 488B45C8 		movq	-56(%rbp), %rax
 147 00db 483B45D8 		cmpq	-40(%rbp), %rax
 148 00df 7319     		jnb	.L13
 149              		.loc 2 35 9 discriminator 1
 150 00e1 488B45E0 		movq	-32(%rbp), %rax
 151 00e5 488D1485 		leaq	0(,%rax,4), %rdx
 151      00000000 
 152 00ed 488B45C8 		movq	-56(%rbp), %rax
 153 00f1 4801D0   		addq	%rdx, %rax
 154 00f4 483945D8 		cmpq	%rax, -40(%rbp)
 155 00f8 7723     		ja	.L14
 156              	.L13:
 157              		.loc 2 35 9 is_stmt 0 discriminator 3
 158 00fa 488B45D8 		movq	-40(%rbp), %rax
 159 00fe 483B45C8 		cmpq	-56(%rbp), %rax
 160 0102 7358     		jnb	.L15
 161              		.loc 2 35 9 discriminator 4
 162 0104 488B45E0 		movq	-32(%rbp), %rax
 163 0108 488D1485 		leaq	0(,%rax,4), %rdx
 163      00000000 
 164 0110 488B45D8 		movq	-40(%rbp), %rax
 165 0114 4801D0   		addq	%rdx, %rax
 166 0117 483945C8 		cmpq	%rax, -56(%rbp)
 167 011b 763F     		jbe	.L15
 168              	.L14:
  36:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         /* performance optimization srcStrLen not include '\0' */
  37:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SecDoMemcpy(strDest, strSrc, srcStrLen * sizeof(wchar_t));
 169              		.loc 2 37 9 is_stmt 1
 170 011d 488B45E0 		movq	-32(%rbp), %rax
 171 0121 488D1485 		leaq	0(,%rax,4), %rdx
 171      00000000 
 172 0129 488B4DC8 		movq	-56(%rbp), %rcx
 173 012d 488B45D8 		movq	-40(%rbp), %rax
 174 0131 4889CE   		movq	%rcx, %rsi
 175 0134 4889C7   		movq	%rax, %rdi
 176 0137 E8000000 		call	SecDoMemcpy
 176      00
  38:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         *(strDest + srcStrLen) = L'\0';
 177              		.loc 2 38 19
 178 013c 488B45E0 		movq	-32(%rbp), %rax
 179 0140 488D1485 		leaq	0(,%rax,4), %rdx
 179      00000000 
 180 0148 488B45D8 		movq	-40(%rbp), %rax
 181 014c 4801D0   		addq	%rdx, %rax
 182              		.loc 2 38 32
GAS LISTING /tmp/ccH5Hbed.s 			page 14


 183 014f C7000000 		movl	$0, (%rax)
 183      0000
  39:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return EOK;
 184              		.loc 2 39 16
 185 0155 B8000000 		movl	$0, %eax
 185      00
 186 015a EB0F     		jmp	.L16
 187              	.L15:
  40:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     } else {
  41:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         strDest[0] = L'\0';
 188              		.loc 2 41 20
 189 015c 488B45D8 		movq	-40(%rbp), %rax
 190 0160 C7000000 		movl	$0, (%rax)
 190      0000
  42:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_ERROR_BUFFER_OVERLAP("wcsncpy_s");
  43:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return EOVERLAP_AND_RESET;
 191              		.loc 2 43 16
 192 0166 B8B60000 		movl	$182, %eax
 192      00
 193              	.L16:
  44:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
  45:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** }
 194              		.loc 2 45 1 discriminator 1
 195 016b 488B75F8 		movq	-8(%rbp), %rsi
 196 016f 64483334 		xorq	%fs:40, %rsi
 196      25280000 
 196      00
 197 0178 7405     		je	.L17
 198              		.loc 2 45 1 is_stmt 0
 199 017a E8000000 		call	__stack_chk_fail@PLT
 199      00
 200              	.L17:
 201 017f C9       		leave
 202              	.LCFI5:
 203              		.cfi_def_cfa 7, 8
 204 0180 C3       		ret
 205              		.cfi_endproc
 206              	.LFE7:
 208              		.section	.text.wcsncpy_s,"ax",@progbits
 209              		.globl	wcsncpy_s
 211              	wcsncpy_s:
 212              	.LFB8:
  46:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** 
  47:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** /*
  48:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * <FUNCTION DESCRIPTION>
  49:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    The wcsncpy_s function copies not more than n successive wide characters
  50:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *     (not including the terminating null wide character)
  51:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *     from the array pointed to by strSrc to the array pointed to by strDest
  52:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
  53:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * <INPUT PARAMETERS>
  54:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    strDest             Destination string.
  55:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    destMax             The size of the destination string, in characters.
  56:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    strSrc              Source string.
  57:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    count                Number of characters to be copied.
  58:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
  59:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * <OUTPUT PARAMETERS>
  60:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    strDest              is updated
GAS LISTING /tmp/ccH5Hbed.s 			page 15


  61:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
  62:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  * <RETURN VALUE>
  63:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    EOK                  Success
  64:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    EINVAL               strDest is  NULL and destMax != 0 and destMax <= SECUREC_WCHAR_STRING_MA
  65:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    EINVAL_AND_RESET     strDest != NULL and strSrc is NULLL and destMax != 0
  66:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *                         and destMax <= SECUREC_WCHAR_STRING_MAX_LEN
  67:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    ERANGE               destMax > SECUREC_WCHAR_STRING_MAX_LEN or destMax is 0
  68:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    ERANGE_AND_RESET     count > SECUREC_WCHAR_STRING_MAX_LEN or
  69:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *                         (destMax <= length of strSrc and destMax <= count and strDest != strSrc
  70:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *                          and strDest != NULL and strSrc != NULL and destMax != 0 and
  71:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *                          destMax <= SECUREC_WCHAR_STRING_MAX_LEN and not overlap)
  72:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    EOVERLAP_AND_RESET     dest buffer and source buffer are overlapped and  all  parameters are 
  73:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
  74:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *
  75:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  *    If there is a runtime-constraint violation, strDest[0] will be set to the '\0' when strDest a
  76:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****  */
  77:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** errno_t wcsncpy_s(wchar_t *strDest, size_t destMax, const wchar_t *strSrc, size_t count)
  78:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** {
 213              		.loc 2 78 1 is_stmt 1
 214              		.cfi_startproc
 215 0000 F30F1EFA 		endbr64
 216 0004 55       		pushq	%rbp
 217              	.LCFI6:
 218              		.cfi_def_cfa_offset 16
 219              		.cfi_offset 6, -16
 220 0005 4889E5   		movq	%rsp, %rbp
 221              	.LCFI7:
 222              		.cfi_def_cfa_register 6
 223 0008 4883EC30 		subq	$48, %rsp
 224 000c 48897DE8 		movq	%rdi, -24(%rbp)
 225 0010 488975E0 		movq	%rsi, -32(%rbp)
 226 0014 488955D8 		movq	%rdx, -40(%rbp)
 227 0018 48894DD0 		movq	%rcx, -48(%rbp)
 228              		.loc 2 78 1
 229 001c 64488B04 		movq	%fs:40, %rax
 229      25280000 
 229      00
 230 0025 488945F8 		movq	%rax, -8(%rbp)
 231 0029 31C0     		xorl	%eax, %eax
  79:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (destMax == 0 || destMax > SECUREC_WCHAR_STRING_MAX_LEN) {
 232              		.loc 2 79 8
 233 002b 48837DE0 		cmpq	$0, -32(%rbp)
 233      00
 234 0030 740A     		je	.L19
 235              		.loc 2 79 22 discriminator 1
 236 0032 48817DE0 		cmpq	$536870911, -32(%rbp)
 236      FFFFFF1F 
 237 003a 7607     		jbe	.L20
 238              	.L19:
  80:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_ERROR_INVALID_RANGE("wcsncpy_s");
  81:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return ERANGE;
 239              		.loc 2 81 16
 240 003c B8220000 		movl	$34, %eax
 240      00
 241 0041 EB78     		jmp	.L21
 242              	.L20:
  82:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
GAS LISTING /tmp/ccH5Hbed.s 			page 16


  83:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (strDest == NULL || strSrc == NULL) {
 243              		.loc 2 83 8
 244 0043 48837DE8 		cmpq	$0, -24(%rbp)
 244      00
 245 0048 7407     		je	.L22
 246              		.loc 2 83 25 discriminator 1
 247 004a 48837DD8 		cmpq	$0, -40(%rbp)
 247      00
 248 004f 751F     		jne	.L23
 249              	.L22:
  84:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_ERROR_INVALID_PARAMTER("wcsncpy_s");
  85:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         if (strDest != NULL) {
 250              		.loc 2 85 12
 251 0051 48837DE8 		cmpq	$0, -24(%rbp)
 251      00
 252 0056 7411     		je	.L24
  86:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****             strDest[0] = '\0';
 253              		.loc 2 86 24
 254 0058 488B45E8 		movq	-24(%rbp), %rax
 255 005c C7000000 		movl	$0, (%rax)
 255      0000
  87:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****             return EINVAL_AND_RESET;
 256              		.loc 2 87 20
 257 0062 B8960000 		movl	$150, %eax
 257      00
 258 0067 EB52     		jmp	.L21
 259              	.L24:
  88:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         }
  89:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return EINVAL;
 260              		.loc 2 89 16
 261 0069 B8160000 		movl	$22, %eax
 261      00
 262 006e EB4B     		jmp	.L21
 263              	.L23:
  90:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
  91:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (count > SECUREC_WCHAR_STRING_MAX_LEN) {
 264              		.loc 2 91 8
 265 0070 48817DD0 		cmpq	$536870911, -48(%rbp)
 265      FFFFFF1F 
 266 0078 7611     		jbe	.L25
  92:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** #ifdef SECUREC_COMPATIBLE_WIN_FORMAT
  93:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         if (count == (size_t)(-1)) {
  94:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****             return SecDoWcsncpy(strDest, destMax, strSrc, destMax - 1);
  95:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         }
  96:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** #endif
  97:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         strDest[0] = '\0';      /* clear dest string */
 267              		.loc 2 97 20
 268 007a 488B45E8 		movq	-24(%rbp), %rax
 269 007e C7000000 		movl	$0, (%rax)
 269      0000
  98:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         SECUREC_ERROR_INVALID_RANGE("wcsncpy_s");
  99:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return ERANGE_AND_RESET;
 270              		.loc 2 99 16
 271 0084 B8A20000 		movl	$162, %eax
 271      00
 272 0089 EB30     		jmp	.L21
 273              	.L25:
GAS LISTING /tmp/ccH5Hbed.s 			page 17


 100:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
 101:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** 
 102:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     if (count == 0) {
 274              		.loc 2 102 8
 275 008b 48837DD0 		cmpq	$0, -48(%rbp)
 275      00
 276 0090 7511     		jne	.L26
 103:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         strDest[0] = '\0';
 277              		.loc 2 103 20
 278 0092 488B45E8 		movq	-24(%rbp), %rax
 279 0096 C7000000 		movl	$0, (%rax)
 279      0000
 104:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****         return EOK;
 280              		.loc 2 104 16
 281 009c B8000000 		movl	$0, %eax
 281      00
 282 00a1 EB18     		jmp	.L21
 283              	.L26:
 105:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     }
 106:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** 
 107:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c ****     return SecDoWcsncpy(strDest, destMax, strSrc, count);
 284              		.loc 2 107 12
 285 00a3 488B4DD0 		movq	-48(%rbp), %rcx
 286 00a7 488B55D8 		movq	-40(%rbp), %rdx
 287 00ab 488B75E0 		movq	-32(%rbp), %rsi
 288 00af 488B45E8 		movq	-24(%rbp), %rax
 289 00b3 4889C7   		movq	%rax, %rdi
 290 00b6 E8000000 		call	SecDoWcsncpy
 290      00
 291              	.L21:
 108:/home/xingli/share/LiteOS_Lab/secure_c/src/wcsncpy_s.c **** }
 292              		.loc 2 108 1
 293 00bb 488B7DF8 		movq	-8(%rbp), %rdi
 294 00bf 6448333C 		xorq	%fs:40, %rdi
 294      25280000 
 294      00
 295 00c8 7405     		je	.L27
 296 00ca E8000000 		call	__stack_chk_fail@PLT
 296      00
 297              	.L27:
 298 00cf C9       		leave
 299              	.LCFI8:
 300              		.cfi_def_cfa 7, 8
 301 00d0 C3       		ret
 302              		.cfi_endproc
 303              	.LFE8:
 305              		.text
 306              	.Letext0:
 307              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 308              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 309              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 310              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 311              		.file 7 "/usr/include/stdio.h"
 312              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 313              		.file 9 "/home/xingli/share/LiteOS_Lab/secure_c/include/securec.h"
 1582              		.section	.note.gnu.property,"a"
 1583              		.align 8
GAS LISTING /tmp/ccH5Hbed.s 			page 18


 1584 0000 04000000 		.long	 1f - 0f
 1585 0004 10000000 		.long	 4f - 1f
 1586 0008 05000000 		.long	 5
 1587              	0:
 1588 000c 474E5500 		.string	 "GNU"
 1589              	1:
 1590              		.align 8
 1591 0010 020000C0 		.long	 0xc0000002
 1592 0014 04000000 		.long	 3f - 2f
 1593              	2:
 1594 0018 03000000 		.long	 0x3
 1595              	3:
 1596 001c 00000000 		.align 8
 1597              	4:
GAS LISTING /tmp/ccH5Hbed.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 wcsncpy_s.c
     /tmp/ccH5Hbed.s:6      .text.SecDoMemcpy:0000000000000000 SecDoMemcpy
     /tmp/ccH5Hbed.s:50     .text.SecDoWcsncpy:0000000000000000 SecDoWcsncpy
     /tmp/ccH5Hbed.s:211    .text.wcsncpy_s:0000000000000000 wcsncpy_s

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memcpy
__stack_chk_fail
