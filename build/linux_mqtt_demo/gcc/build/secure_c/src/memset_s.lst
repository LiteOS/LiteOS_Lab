GAS LISTING /tmp/ccLuEY1O.s 			page 1


   1              		.file	"memset_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.SecDoMemset,"ax",@progbits
   6              	SecDoMemset:
   7              	.LFB6:
   8              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/securecutil.h"
   1:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  16:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  17:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  18:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #include "securec.h"
  19:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  20:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_MSC_VER)) && (_MSC_VER >= 1400)
  21:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING __pragma(warning(push)) \
  22:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     __pragma(warning(disable:4996 4127))
  23:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING  __pragma(warning(pop))
  24:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  25:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING
  26:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING
  27:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  28:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_WHILE_ZERO SECUREC_MASK_MSVC_CRT_WARNING while (0) SECUREC_END_MASK_MSVC_CRT_WARNIN
  29:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  30:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_STRNLEN
  31:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 700) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURC
  32:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  33:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  34:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  35:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__GLIBC__) && __GLIBC__ >= 2 && defined(__GLIBC_MINOR__) && __GLIBC_MINOR__ >= 10
  36:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 1
  37:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  38:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  39:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  40:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  41:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  42:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  43:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  44:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  45:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  46:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  47:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* in kernel disbale functions */
  48:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  49:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 0
  50:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
GAS LISTING /tmp/ccLuEY1O.s 			page 2


  51:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  52:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 0
  53:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  54:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  55:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 0
  56:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  57:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  58:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 0
  59:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  60:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  61:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 0
  62:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  63:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  64:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 0
  65:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  66:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no in kernel */
  67:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support file, can define this macro to 0. */
  68:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  69:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 1
  70:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  71:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  72:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 1
  73:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  74:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support float, can define this macro to 0. */
  75:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  76:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 1
  77:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  78:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  79:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 1
  80:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  81:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  82:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 1
  83:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  84:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  85:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 1
  86:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  87:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  88:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  89:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  90:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_INT_MAX                     2147483647
  91:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_SIXTEEN(x)              ((x) << 4)
  92:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_EIGHT(x)                ((x) << 3)
  93:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN(x)                  ((((x) << 2) + (x)) << 1)
  94:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Limited format input and output width */
  95:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN_DIV_TEN       21474836
  96:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN               SECUREC_MUL_TEN(SECUREC_MAX_WIDTH_LEN_DIV_TEN)
  97:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Is the x multiplied by 10 greater than */
  98:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN_ADD_BEYOND_MAX(x)   (((x) > SECUREC_MAX_WIDTH_LEN_DIV_TEN))
  99:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 100:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE               (309 + 40)  /* Max length of double value */
 101:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE_LB            (4932 + 40) /* Max length of long double value */
 102:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_DEFAULT_PRECISION     6
 103:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 104:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* This macro does not handle pointer equality or integer overflow */
 105:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_NO_OVERLAP(dest, src, count) \
 106:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) <= (char *)(dest)) || \
 107:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) <= (const char *)(src)))
GAS LISTING /tmp/ccLuEY1O.s 			page 3


 108:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 109:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_IS_OVERLAP(dest, src, count) \
 110:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) > (char *)(dest)) || \
 111:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) > (const char *)(src)))
 112:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 113:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 114:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap, len is the length of the string not include terminator
 115:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 116:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 117:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_NO_OVERLAP(dest, src, len) \
 118:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) < (dest)) || \
 119:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) < (src)))
 120:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 121:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 122:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcpy wcscpy function, dest len and src Len are not inclu
 123:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 124:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 125:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_IS_OVERLAP(dest, src, len) \
 126:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) >= (dest)) || \
 127:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) >= (src)))
 128:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 129:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 130:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcat wcscat function, dest len and src Len are not inclu
 131:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 132:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 133:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CAT_STRING_IS_OVERLAP(dest, destLen, src, srcLen) \
 134:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((dest) < (src) && ((dest) + (destLen) + (srcLen)) >= (src)) || \
 135:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((src) < (dest) && ((src) + (srcLen)) >= (dest)))
 136:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 137:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 138:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_HAVE_STRNLEN
 139:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 140:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = strnlen((str), (maxLen)); \
 141:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 142:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT(str, maxLen, outLen) do { \
 143:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     if ((maxLen) > 8) { \
 144:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         /* Optimization or len less then 8 */ \
 145:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         if (*((str) + 0) == '\0') { \
 146:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 0; \
 147:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 1) == '\0') { \
 148:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 1; \
 149:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 2) == '\0') { \
 150:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 2; \
 151:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 3) == '\0') { \
 152:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 3; \
 153:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 4) == '\0') { \
 154:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 4; \
 155:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 5) == '\0') { \
 156:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 5; \
 157:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 6) == '\0') { \
 158:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 6; \
 159:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 7) == '\0') { \
 160:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 7; \
 161:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 8) == '\0') { \
 162:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* Optimization with a length of 8 */ \
 163:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8; \
 164:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else { \
GAS LISTING /tmp/ccLuEY1O.s 			page 4


 165:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* The offset is 8 because the performance of 8 byte alignment is high */ \
 166:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8 + strnlen((str) + 8, (maxLen) - 8); \
 167:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } \
 168:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } else { \
 169:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         SECUREC_CALC_STR_LEN((str), (maxLen), (outLen)); \
 170:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 171:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 172:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 173:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 174:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const char *strEnd = (const char *)(str); \
 175:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     size_t availableSize = (size_t)(maxLen); \
 176:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (availableSize > 0 && *strEnd != '\0') { \
 177:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         --availableSize; \
 178:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 179:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 180:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = (size_t)(strEnd - (str)); \
 181:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 182:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT SECUREC_CALC_STR_LEN
 183:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 184:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 185:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_WSTR_LEN(str, maxLen, outLen) do { \
 186:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const wchar_t *strEnd = (const wchar_t *)(str); \
 187:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = 0; \
 188:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (*(outLen) < (maxLen) && *strEnd != L'\0') { \
 189:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         *(outLen) = *(outLen) + 1; \
 190:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 191:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 192:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 193:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 194:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 195:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FORMAT_OUTPUT_INPUT
 196:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT) || defined(__ARMCC_VERSION)
 197:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef __int64 SecInt64;
 198:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int64 SecUnsignedInt64;
 199:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__ARMCC_VERSION)
 200:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 201:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 202:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int32 SecUnsignedInt32;
 203:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 204:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 205:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 206:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef long long SecInt64;
 207:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned long long SecUnsignedInt64;
 208:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 209:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 210:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FOR_WCHAR
 211:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_VXWORKS_PLATFORM) && !defined(__WINT_TYPE__)
 212:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t wint_t;
 213:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 214:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecChar;
 215:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecUnsignedChar;
 216:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecInt;
 217:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecUnsignedInt;
 218:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /*  no SECUREC_FOR_WCHAR */
 219:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef char SecChar;
 220:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned char SecUnsignedChar;
 221:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef int SecInt;
GAS LISTING /tmp/ccLuEY1O.s 			page 5


 222:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt;
 223:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 224:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 225:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 226:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Determine whether the address is 8-byte aligned
 227:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Some systems do not have uintptr_t type, so  use NULL to clear tool alarm 507
 228:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 229:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ADDR_ALIGNED_8(addr) (SecIsAddrAligned8((addr), NULL) == 0)
 230:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 231:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* If you define the memory allocation function,
 232:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * you need to define the function prototype. You can define this macro as a header file.
 233:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 234:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_MALLOC_PROTOTYPE)
 235:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** SECUREC_MALLOC_PROTOTYPE
 236:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 237:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 238:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_MALLOC
 239:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MALLOC(x) malloc((size_t)(x))
 240:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 241:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 242:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_FREE
 243:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FREE(x)   free((void *)(x))
 244:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 245:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 246:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* struct for performance */
 247:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 248:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[1]; /* Performance optimization code structure assignment length 1 bytes */
 249:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf1;
 250:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 251:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[2]; /* Performance optimization code structure assignment length 2 bytes */
 252:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf2;
 253:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 254:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[3]; /* Performance optimization code structure assignment length 3 bytes */
 255:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf3;
 256:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 257:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[4]; /* Performance optimization code structure assignment length 4 bytes */
 258:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf4;
 259:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 260:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[5]; /* Performance optimization code structure assignment length 5 bytes */
 261:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf5;
 262:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 263:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[6]; /* Performance optimization code structure assignment length 6 bytes */
 264:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf6;
 265:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 266:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[7]; /* Performance optimization code structure assignment length 7 bytes */
 267:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf7;
 268:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 269:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[8]; /* Performance optimization code structure assignment length 8 bytes */
 270:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf8;
 271:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 272:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[9]; /* Performance optimization code structure assignment length 9 bytes */
 273:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf9;
 274:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 275:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[10]; /* Performance optimization code structure assignment length 10 bytes */
 276:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf10;
 277:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 278:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[11]; /* Performance optimization code structure assignment length 11 bytes */
GAS LISTING /tmp/ccLuEY1O.s 			page 6


 279:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf11;
 280:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 281:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[12]; /* Performance optimization code structure assignment length 12 bytes */
 282:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf12;
 283:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 284:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[13]; /* Performance optimization code structure assignment length 13 bytes */
 285:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf13;
 286:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 287:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[14]; /* Performance optimization code structure assignment length 14 bytes */
 288:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf14;
 289:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 290:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[15]; /* Performance optimization code structure assignment length 15 bytes */
 291:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf15;
 292:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 293:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[16]; /* Performance optimization code structure assignment length 16 bytes */
 294:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf16;
 295:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 296:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[17]; /* Performance optimization code structure assignment length 17 bytes */
 297:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf17;
 298:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 299:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[18]; /* Performance optimization code structure assignment length 18 bytes */
 300:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf18;
 301:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 302:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[19]; /* Performance optimization code structure assignment length 19 bytes */
 303:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf19;
 304:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 305:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[20]; /* Performance optimization code structure assignment length 20 bytes */
 306:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf20;
 307:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 308:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[21]; /* Performance optimization code structure assignment length 21 bytes */
 309:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf21;
 310:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 311:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[22]; /* Performance optimization code structure assignment length 22 bytes */
 312:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf22;
 313:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 314:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[23]; /* Performance optimization code structure assignment length 23 bytes */
 315:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf23;
 316:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 317:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[24]; /* Performance optimization code structure assignment length 24 bytes */
 318:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf24;
 319:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 320:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[25]; /* Performance optimization code structure assignment length 25 bytes */
 321:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf25;
 322:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 323:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[26]; /* Performance optimization code structure assignment length 26 bytes */
 324:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf26;
 325:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 326:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[27]; /* Performance optimization code structure assignment length 27 bytes */
 327:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf27;
 328:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 329:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[28]; /* Performance optimization code structure assignment length 28 bytes */
 330:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf28;
 331:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 332:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[29]; /* Performance optimization code structure assignment length 29 bytes */
 333:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf29;
 334:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 335:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[30]; /* Performance optimization code structure assignment length 30 bytes */
GAS LISTING /tmp/ccLuEY1O.s 			page 7


 336:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf30;
 337:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 338:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[31]; /* Performance optimization code structure assignment length 31 bytes */
 339:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf31;
 340:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 341:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[32]; /* Performance optimization code structure assignment length 32 bytes */
 342:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf32;
 343:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 344:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[33]; /* Performance optimization code structure assignment length 33 bytes */
 345:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf33;
 346:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 347:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[34]; /* Performance optimization code structure assignment length 34 bytes */
 348:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf34;
 349:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 350:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[35]; /* Performance optimization code structure assignment length 35 bytes */
 351:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf35;
 352:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 353:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[36]; /* Performance optimization code structure assignment length 36 bytes */
 354:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf36;
 355:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 356:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[37]; /* Performance optimization code structure assignment length 37 bytes */
 357:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf37;
 358:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 359:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[38]; /* Performance optimization code structure assignment length 38 bytes */
 360:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf38;
 361:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 362:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[39]; /* Performance optimization code structure assignment length 39 bytes */
 363:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf39;
 364:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 365:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[40]; /* Performance optimization code structure assignment length 40 bytes */
 366:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf40;
 367:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 368:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[41]; /* Performance optimization code structure assignment length 41 bytes */
 369:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf41;
 370:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 371:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[42]; /* Performance optimization code structure assignment length 42 bytes */
 372:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf42;
 373:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 374:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[43]; /* Performance optimization code structure assignment length 43 bytes */
 375:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf43;
 376:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 377:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[44]; /* Performance optimization code structure assignment length 44 bytes */
 378:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf44;
 379:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 380:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[45]; /* Performance optimization code structure assignment length 45 bytes */
 381:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf45;
 382:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 383:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[46]; /* Performance optimization code structure assignment length 46 bytes */
 384:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf46;
 385:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 386:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[47]; /* Performance optimization code structure assignment length 47 bytes */
 387:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf47;
 388:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 389:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[48]; /* Performance optimization code structure assignment length 48 bytes */
 390:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf48;
 391:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 392:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[49]; /* Performance optimization code structure assignment length 49 bytes */
GAS LISTING /tmp/ccLuEY1O.s 			page 8


 393:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf49;
 394:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 395:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[50]; /* Performance optimization code structure assignment length 50 bytes */
 396:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf50;
 397:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 398:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[51]; /* Performance optimization code structure assignment length 51 bytes */
 399:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf51;
 400:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 401:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[52]; /* Performance optimization code structure assignment length 52 bytes */
 402:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf52;
 403:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 404:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[53]; /* Performance optimization code structure assignment length 53 bytes */
 405:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf53;
 406:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 407:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[54]; /* Performance optimization code structure assignment length 54 bytes */
 408:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf54;
 409:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 410:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[55]; /* Performance optimization code structure assignment length 55 bytes */
 411:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf55;
 412:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 413:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[56]; /* Performance optimization code structure assignment length 56 bytes */
 414:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf56;
 415:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 416:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[57]; /* Performance optimization code structure assignment length 57 bytes */
 417:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf57;
 418:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 419:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[58]; /* Performance optimization code structure assignment length 58 bytes */
 420:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf58;
 421:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 422:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[59]; /* Performance optimization code structure assignment length 59 bytes */
 423:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf59;
 424:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 425:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[60]; /* Performance optimization code structure assignment length 60 bytes */
 426:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf60;
 427:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 428:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[61]; /* Performance optimization code structure assignment length 61 bytes */
 429:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf61;
 430:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 431:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[62]; /* Performance optimization code structure assignment length 62 bytes */
 432:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf62;
 433:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 434:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[63]; /* Performance optimization code structure assignment length 63 bytes */
 435:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf63;
 436:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 437:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[64]; /* Performance optimization code structure assignment length 64 bytes */
 438:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf64;
 439:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 440:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 441:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 442:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 443:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* User can change the error handler by modify the following definition,
 444:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * such as logging the detail error in file.
 445:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 446:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(_DEBUG) || defined(DEBUG)
 447:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_ASSERT)
 448:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) assert(msg "invalid argument" == NULL)
 449:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    assert(msg "invalid dest buffer size" == NULL)
GAS LISTING /tmp/ccLuEY1O.s 			page 9


 450:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   assert(msg "buffer overlap" == NULL)
 451:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_PRINTF)
 452:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
 453:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printk("%s invalid argument\n", msg)
 454:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printk("%s invalid dest buffer size\n", msg)
 455:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printk("%s buffer overlap\n", msg)
 456:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 457:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printf("%s invalid argument\n", msg)
 458:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printf("%s invalid dest buffer size\n", msg)
 459:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printf("%s buffer overlap\n", msg)
 460:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 461:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 462:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) LogSecureCRuntimeError(msg " EINVAL\n")
 463:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    LogSecureCRuntimeError(msg " ERANGE\n")
 464:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   LogSecureCRuntimeError(msg " EOVERLAP\n")
 465:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no HANDLER is defined */
 466:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 467:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 468:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 469:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 470:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no DEBUG */
 471:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 472:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 473:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 474:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 475:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 476:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef __cplusplus
 477:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** extern "C" {
 478:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 479:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 480:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* assembly language memory copy and memory set for X86 or MIPS ... */
 481:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 482:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memcpy_opt(void *, const void *, size_t);
 483:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memset_opt(void *, int, size_t);
 484:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 485:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 486:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 487:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void LogSecureCRuntimeError(const char *errDetail);
 488:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 489:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 490:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_INLINE_DO_MEMCPY
 491:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** static void SecDoMemcpy(void *dest, const void *src, size_t count)
 492:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** {
 493:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /*
 494:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      * if SECUREC_USE_ASM macro is enabled, it will call assembly language function to improve perf
 495:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      */
 496:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 497:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy_opt(dest, src, count);
 498:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 499:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /* large enough, let system API do it */
 500:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy(dest, src, count);
 501:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 502:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** }
 503:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 504:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 505:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_INLINE_DO_MEMSET
 506:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** static void SecDoMemset(void *dest, int c, size_t count)
GAS LISTING /tmp/ccLuEY1O.s 			page 10


 507:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** {
   9              		.loc 1 507 1
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              	.LCFI0:
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              	.LCFI1:
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DE8 		movq	%rdi, -24(%rbp)
  21 0010 8975E4   		movl	%esi, -28(%rbp)
  22 0013 488955D8 		movq	%rdx, -40(%rbp)
  23              		.loc 1 507 1
  24 0017 64488B04 		movq	%fs:40, %rax
  24      25280000 
  24      00
  25 0020 488945F8 		movq	%rax, -8(%rbp)
  26 0024 31C0     		xorl	%eax, %eax
 508:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 509:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memset_opt(dest, c, count);
 510:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 511:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memset(dest, c, count);
  27              		.loc 1 511 11
  28 0026 488B55D8 		movq	-40(%rbp), %rdx
  29 002a 8B4DE4   		movl	-28(%rbp), %ecx
  30 002d 488B45E8 		movq	-24(%rbp), %rax
  31 0031 89CE     		movl	%ecx, %esi
  32 0033 4889C7   		movq	%rax, %rdi
  33 0036 E8000000 		call	memset@PLT
  33      00
 512:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 513:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** }
  34              		.loc 1 513 1
  35 003b 90       		nop
  36 003c 488B45F8 		movq	-8(%rbp), %rax
  37 0040 64483304 		xorq	%fs:40, %rax
  37      25280000 
  37      00
  38 0049 7405     		je	.L2
  39 004b E8000000 		call	__stack_chk_fail@PLT
  39      00
  40              	.L2:
  41 0050 C9       		leave
  42              	.LCFI2:
  43              		.cfi_def_cfa 7, 8
  44 0051 C3       		ret
  45              		.cfi_endproc
  46              	.LFE6:
  48              		.section	.text.SecIsAddrAligned8,"ax",@progbits
  50              	SecIsAddrAligned8:
  51              	.LFB7:
  52              		.file 2 "/home/xingli/share/1205tiny/secure_c/src/memset_s.c"
   1:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
GAS LISTING /tmp/ccLuEY1O.s 			page 11


   3:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /* [Standardize-exceptions] Use unsafe function: Portability
  16:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * [reason] Use unsafe function to implement security function to maintain platform compatibility.
  17:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *          And sufficient input validation is performed before calling
  18:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
  19:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #define SECUREC_INLINE_DO_MEMSET   1
  20:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  21:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #include "securecutil.h"
  22:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  23:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #ifndef SECUREC_MEMSET_WITH_PERFORMANCE
  24:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #define SECUREC_MEMSET_WITH_PERFORMANCE 0
  25:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #endif
  26:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  27:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #define SECUREC_MEMSET_PARAM_OK(dest, destMax, count) (SECUREC_LIKELY((count) <= (destMax) && \
  28:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     (dest) != NULL && (destMax) <= SECUREC_MEM_MAX_LEN))
  29:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  30:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  31:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #if SECUREC_WITH_PERFORMANCE_ADDONS || SECUREC_MEMSET_WITH_PERFORMANCE
  32:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
  33:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * Determine whether the address is 8-byte aligned, use static to increase performance
  34:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * return 0 is aligned
  35:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
  36:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** static int SecIsAddrAligned8(const void *addr, const void *zeroAddr)
  37:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
  53              		.loc 2 37 1
  54              		.cfi_startproc
  55 0000 F30F1EFA 		endbr64
  56 0004 55       		pushq	%rbp
  57              	.LCFI3:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 6, -16
  60 0005 4889E5   		movq	%rsp, %rbp
  61              	.LCFI4:
  62              		.cfi_def_cfa_register 6
  63 0008 4883EC20 		subq	$32, %rsp
  64 000c 48897DE8 		movq	%rdi, -24(%rbp)
  65 0010 488975E0 		movq	%rsi, -32(%rbp)
  66              		.loc 2 37 1
  67 0014 64488B04 		movq	%fs:40, %rax
  67      25280000 
  67      00
  68 001d 488945F8 		movq	%rax, -8(%rbp)
  69 0021 31C0     		xorl	%eax, %eax
  38:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     return (int)(((size_t)((const char*)addr - (const char*)zeroAddr)) & 7); /* use 7 to check alig
  70              		.loc 2 38 46
  71 0023 488B45E8 		movq	-24(%rbp), %rax
GAS LISTING /tmp/ccLuEY1O.s 			page 12


  72 0027 482B45E0 		subq	-32(%rbp), %rax
  73              		.loc 2 38 12
  74 002b 83E007   		andl	$7, %eax
  39:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
  75              		.loc 2 39 1
  76 002e 488B55F8 		movq	-8(%rbp), %rdx
  77 0032 64483314 		xorq	%fs:40, %rdx
  77      25280000 
  77      00
  78 003b 7405     		je	.L5
  79 003d E8000000 		call	__stack_chk_fail@PLT
  79      00
  80              	.L5:
  81 0042 C9       		leave
  82              	.LCFI5:
  83              		.cfi_def_cfa 7, 8
  84 0043 C3       		ret
  85              		.cfi_endproc
  86              	.LFE7:
  88              		.section	.rodata.g_allZero,"a"
  89              		.align 32
  92              	g_allZero:
  93 0000 00000000 		.zero	32
  93      00000000 
  93      00000000 
  93      00000000 
  93      00000000 
  94              		.section	.rodata.g_allFF,"a"
  95              		.align 32
  98              	g_allFF:
  99 0000 FFFFFFFF 		.ascii	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
  99      FFFFFFFF 
  99      FFFFFFFF 
  99      FFFFFF
 100 000f FFFFFFFF 		.ascii	"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
 100      FFFFFFFF 
 100      FFFFFFFF 
 100      FFFFFF
 101 001e FFFF     		.ascii	"\377\377"
 102              		.section	.text.SecStrictAliasingCast,"ax",@progbits
 104              	SecStrictAliasingCast:
 105              	.LFB8:
  40:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  41:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /* use union to clear strict-aliasing warning */
  42:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** typedef union {
  43:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf32 buf32;
  44:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf31 buf31;
  45:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf30 buf30;
  46:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf29 buf29;
  47:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf28 buf28;
  48:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf27 buf27;
  49:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf26 buf26;
  50:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf25 buf25;
  51:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf24 buf24;
  52:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf23 buf23;
  53:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf22 buf22;
  54:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf21 buf21;
GAS LISTING /tmp/ccLuEY1O.s 			page 13


  55:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf20 buf20;
  56:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf19 buf19;
  57:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf18 buf18;
  58:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf17 buf17;
  59:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf16 buf16;
  60:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf15 buf15;
  61:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf14 buf14;
  62:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf13 buf13;
  63:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf12 buf12;
  64:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf11 buf11;
  65:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf10 buf10;
  66:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf9 buf9;
  67:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf8 buf8;
  68:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf7 buf7;
  69:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf6 buf6;
  70:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf5 buf5;
  71:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf4 buf4;
  72:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf3 buf3;
  73:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf2 buf2;
  74:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     SecStrBuf1 buf1;
  75:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** } SecStrBuf32Union;
  76:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /* C standard initializes the first member of the consortium. */
  77:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** static const SecStrBuf32 g_allZero = {{
  78:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
  79:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
  80:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
  81:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'
  82:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }};
  83:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** static const SecStrBuf32 g_allFF = {{
  84:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  85:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  86:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  87:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  88:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }};
  89:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  90:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** static const SecStrBuf32Union *SecStrictAliasingCast(const SecStrBuf32 *buf)
  91:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
 106              		.loc 2 91 1
 107              		.cfi_startproc
 108 0000 F30F1EFA 		endbr64
 109 0004 55       		pushq	%rbp
 110              	.LCFI6:
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 6, -16
 113 0005 4889E5   		movq	%rsp, %rbp
 114              	.LCFI7:
 115              		.cfi_def_cfa_register 6
 116 0008 4883EC20 		subq	$32, %rsp
 117 000c 48897DE8 		movq	%rdi, -24(%rbp)
 118              		.loc 2 91 1
 119 0010 64488B04 		movq	%fs:40, %rax
 119      25280000 
 119      00
 120 0019 488945F8 		movq	%rax, -8(%rbp)
 121 001d 31C0     		xorl	%eax, %eax
  92:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     return (const SecStrBuf32Union *)buf;
 122              		.loc 2 92 12
GAS LISTING /tmp/ccLuEY1O.s 			page 14


 123 001f 488B45E8 		movq	-24(%rbp), %rax
  93:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
 124              		.loc 2 93 1
 125 0023 488B55F8 		movq	-8(%rbp), %rdx
 126 0027 64483314 		xorq	%fs:40, %rdx
 126      25280000 
 126      00
 127 0030 7405     		je	.L8
 128 0032 E8000000 		call	__stack_chk_fail@PLT
 128      00
 129              	.L8:
 130 0037 C9       		leave
 131              	.LCFI8:
 132              		.cfi_def_cfa 7, 8
 133 0038 C3       		ret
 134              		.cfi_endproc
 135              	.LFE8:
 137              		.section	.text.SecMemsetError,"ax",@progbits
 139              	SecMemsetError:
 140              	.LFB9:
  94:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  95:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #ifndef SECUREC_MEMSET_THRESHOLD_SIZE
  96:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #define SECUREC_MEMSET_THRESHOLD_SIZE 32UL
  97:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #endif
  98:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
  99:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #define SECUREC_UNALIGNED_SET do { \
 100:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     char *pcDest = (char *)dest; \
 101:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     switch (count) { \
 102:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 32: \
 103:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 104:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 105:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 31: \
 106:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 107:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 108:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 30: \
 109:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 110:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 111:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 29: \
 112:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 113:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 114:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 28: \
 115:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 116:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 117:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 27: \
 118:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 119:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 120:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 26: \
 121:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 122:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 123:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 25: \
 124:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 125:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 126:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 24: \
 127:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 128:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 129:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 23: \
 130:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
GAS LISTING /tmp/ccLuEY1O.s 			page 15


 131:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 132:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 22: \
 133:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 134:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 135:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 21: \
 136:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 137:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 138:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 20: \
 139:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 140:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 141:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 19: \
 142:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 143:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 144:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 18: \
 145:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 146:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 147:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 17: \
 148:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 149:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 150:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 16: \
 151:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 152:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 153:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 15: \
 154:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 155:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 156:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 14: \
 157:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 158:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 159:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 13: \
 160:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 161:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 162:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 12: \
 163:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 164:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 165:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 11: \
 166:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 167:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 168:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 10: \
 169:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 170:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 171:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 9: \
 172:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 173:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 174:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 8: \
 175:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 176:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 177:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 7: \
 178:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 179:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 180:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 6: \
 181:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 182:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 183:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 5: \
 184:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 185:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 186:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 4: \
 187:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
GAS LISTING /tmp/ccLuEY1O.s 			page 16


 188:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 189:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 3: \
 190:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 191:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 192:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 2: \
 193:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 194:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 195:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 1: \
 196:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             *(pcDest++) = (char)c; \
 197:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* fall-through */ /* FALLTHRU */ \
 198:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         default: \
 199:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             break; \
 200:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     } \
 201:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** } SECUREC_WHILE_ZERO
 202:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 203:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #define SECUREC_ALIGNED_SET_OPT_ZERO_FF do { \
 204:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     switch (c) { \
 205:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 0: \
 206:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             switch (count) { \
 207:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 1: \
 208:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf1 *)dest = *(const SecStrBuf1 *)(&((SecStrictAliasingCast(&g_allZero
 209:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 210:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 2: \
 211:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf2 *)dest = *(const SecStrBuf2 *)(&((SecStrictAliasingCast(&g_allZero
 212:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 213:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 3: \
 214:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf3 *)dest = *(const SecStrBuf3 *)(&((SecStrictAliasingCast(&g_allZero
 215:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 216:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 4: \
 217:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf4 *)dest = *(const SecStrBuf4 *)(&((SecStrictAliasingCast(&g_allZero
 218:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 219:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 5: \
 220:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf5 *)dest = *(const SecStrBuf5 *)(&((SecStrictAliasingCast(&g_allZero
 221:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 222:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 6: \
 223:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf6 *)dest = *(const SecStrBuf6 *)(&((SecStrictAliasingCast(&g_allZero
 224:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 225:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 7: \
 226:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf7 *)dest = *(const SecStrBuf7 *)(&((SecStrictAliasingCast(&g_allZero
 227:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 228:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 8: \
 229:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf8 *)dest = *(const SecStrBuf8 *)(&((SecStrictAliasingCast(&g_allZero
 230:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 231:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 9: \
 232:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf9 *)dest = *(const SecStrBuf9 *)(&((SecStrictAliasingCast(&g_allZero
 233:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 234:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 10: \
 235:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf10 *)dest = *(const SecStrBuf10 *)(&((SecStrictAliasingCast(&g_allZe
 236:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 237:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 11: \
 238:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf11 *)dest = *(const SecStrBuf11 *)(&((SecStrictAliasingCast(&g_allZe
 239:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 240:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 12: \
 241:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf12 *)dest = *(const SecStrBuf12 *)(&((SecStrictAliasingCast(&g_allZe
 242:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 243:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 13: \
 244:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf13 *)dest = *(const SecStrBuf13 *)(&((SecStrictAliasingCast(&g_allZe
GAS LISTING /tmp/ccLuEY1O.s 			page 17


 245:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 246:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 14: \
 247:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf14 *)dest = *(const SecStrBuf14 *)(&((SecStrictAliasingCast(&g_allZe
 248:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 249:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 15: \
 250:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf15 *)dest = *(const SecStrBuf15 *)(&((SecStrictAliasingCast(&g_allZe
 251:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 252:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 16: \
 253:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf16 *)dest = *(const SecStrBuf16 *)(&((SecStrictAliasingCast(&g_allZe
 254:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 255:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 17: \
 256:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf17 *)dest = *(const SecStrBuf17 *)(&((SecStrictAliasingCast(&g_allZe
 257:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 258:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 18: \
 259:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf18 *)dest = *(const SecStrBuf18 *)(&((SecStrictAliasingCast(&g_allZe
 260:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 261:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 19: \
 262:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf19 *)dest = *(const SecStrBuf19 *)(&((SecStrictAliasingCast(&g_allZe
 263:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 264:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 20: \
 265:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf20 *)dest = *(const SecStrBuf20 *)(&((SecStrictAliasingCast(&g_allZe
 266:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 267:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 21: \
 268:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf21 *)dest = *(const SecStrBuf21 *)(&((SecStrictAliasingCast(&g_allZe
 269:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 270:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 22: \
 271:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf22 *)dest = *(const SecStrBuf22 *)(&((SecStrictAliasingCast(&g_allZe
 272:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 273:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 23: \
 274:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf23 *)dest = *(const SecStrBuf23 *)(&((SecStrictAliasingCast(&g_allZe
 275:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 276:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 24: \
 277:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf24 *)dest = *(const SecStrBuf24 *)(&((SecStrictAliasingCast(&g_allZe
 278:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 279:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 25: \
 280:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf25 *)dest = *(const SecStrBuf25 *)(&((SecStrictAliasingCast(&g_allZe
 281:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 282:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 26: \
 283:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf26 *)dest = *(const SecStrBuf26 *)(&((SecStrictAliasingCast(&g_allZe
 284:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 285:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 27: \
 286:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf27 *)dest = *(const SecStrBuf27 *)(&((SecStrictAliasingCast(&g_allZe
 287:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 288:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 28: \
 289:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf28 *)dest = *(const SecStrBuf28 *)(&((SecStrictAliasingCast(&g_allZe
 290:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 291:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 29: \
 292:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf29 *)dest = *(const SecStrBuf29 *)(&((SecStrictAliasingCast(&g_allZe
 293:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 294:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 30: \
 295:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf30 *)dest = *(const SecStrBuf30 *)(&((SecStrictAliasingCast(&g_allZe
 296:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 297:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 31: \
 298:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf31 *)dest = *(const SecStrBuf31 *)(&((SecStrictAliasingCast(&g_allZe
 299:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 300:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 32: \
 301:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf32 *)dest = *(const SecStrBuf32 *)(&((SecStrictAliasingCast(&g_allZe
GAS LISTING /tmp/ccLuEY1O.s 			page 18


 302:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 303:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 default: \
 304:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 305:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             } \
 306:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             break; \
 307:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         case 0xFF: \
 308:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             switch (count) { \
 309:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 1: \
 310:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf1 *)dest = *(const SecStrBuf1 *)(&((SecStrictAliasingCast(&g_allFF))
 311:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 312:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 2: \
 313:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf2 *)dest = *(const SecStrBuf2 *)(&((SecStrictAliasingCast(&g_allFF))
 314:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 315:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 3: \
 316:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf3 *)dest = *(const SecStrBuf3 *)(&((SecStrictAliasingCast(&g_allFF))
 317:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 318:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 4: \
 319:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf4 *)dest = *(const SecStrBuf4 *)(&((SecStrictAliasingCast(&g_allFF))
 320:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 321:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 5: \
 322:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf5 *)dest = *(const SecStrBuf5 *)(&((SecStrictAliasingCast(&g_allFF))
 323:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 324:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 6: \
 325:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf6 *)dest = *(const SecStrBuf6 *)(&((SecStrictAliasingCast(&g_allFF))
 326:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 327:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 7: \
 328:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf7 *)dest = *(const SecStrBuf7 *)(&((SecStrictAliasingCast(&g_allFF))
 329:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 330:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 8: \
 331:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf8 *)dest = *(const SecStrBuf8 *)(&((SecStrictAliasingCast(&g_allFF))
 332:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 333:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 9: \
 334:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf9 *)dest = *(const SecStrBuf9 *)(&((SecStrictAliasingCast(&g_allFF))
 335:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 336:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 10: \
 337:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf10 *)dest = *(const SecStrBuf10 *)(&((SecStrictAliasingCast(&g_allFF
 338:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 339:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 11: \
 340:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf11 *)dest = *(const SecStrBuf11 *)(&((SecStrictAliasingCast(&g_allFF
 341:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 342:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 12: \
 343:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf12 *)dest = *(const SecStrBuf12 *)(&((SecStrictAliasingCast(&g_allFF
 344:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 345:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 13: \
 346:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf13 *)dest = *(const SecStrBuf13 *)(&((SecStrictAliasingCast(&g_allFF
 347:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 348:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 14: \
 349:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf14 *)dest = *(const SecStrBuf14 *)(&((SecStrictAliasingCast(&g_allFF
 350:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 351:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 15: \
 352:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf15 *)dest = *(const SecStrBuf15 *)(&((SecStrictAliasingCast(&g_allFF
 353:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 354:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 16: \
 355:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf16 *)dest = *(const SecStrBuf16 *)(&((SecStrictAliasingCast(&g_allFF
 356:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 357:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 17: \
 358:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf17 *)dest = *(const SecStrBuf17 *)(&((SecStrictAliasingCast(&g_allFF
GAS LISTING /tmp/ccLuEY1O.s 			page 19


 359:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 360:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 18: \
 361:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf18 *)dest = *(const SecStrBuf18 *)(&((SecStrictAliasingCast(&g_allFF
 362:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 363:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 19: \
 364:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf19 *)dest = *(const SecStrBuf19 *)(&((SecStrictAliasingCast(&g_allFF
 365:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 366:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 20: \
 367:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf20 *)dest = *(const SecStrBuf20 *)(&((SecStrictAliasingCast(&g_allFF
 368:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 369:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 21: \
 370:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf21 *)dest = *(const SecStrBuf21 *)(&((SecStrictAliasingCast(&g_allFF
 371:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 372:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 22: \
 373:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf22 *)dest = *(const SecStrBuf22 *)(&((SecStrictAliasingCast(&g_allFF
 374:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 375:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 23: \
 376:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf23 *)dest = *(const SecStrBuf23 *)(&((SecStrictAliasingCast(&g_allFF
 377:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 378:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 24: \
 379:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf24 *)dest = *(const SecStrBuf24 *)(&((SecStrictAliasingCast(&g_allFF
 380:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 381:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 25: \
 382:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf25 *)dest = *(const SecStrBuf25 *)(&((SecStrictAliasingCast(&g_allFF
 383:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 384:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 26: \
 385:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf26 *)dest = *(const SecStrBuf26 *)(&((SecStrictAliasingCast(&g_allFF
 386:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 387:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 27: \
 388:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf27 *)dest = *(const SecStrBuf27 *)(&((SecStrictAliasingCast(&g_allFF
 389:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 390:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 28: \
 391:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf28 *)dest = *(const SecStrBuf28 *)(&((SecStrictAliasingCast(&g_allFF
 392:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 393:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 29: \
 394:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf29 *)dest = *(const SecStrBuf29 *)(&((SecStrictAliasingCast(&g_allFF
 395:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 396:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 30: \
 397:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf30 *)dest = *(const SecStrBuf30 *)(&((SecStrictAliasingCast(&g_allFF
 398:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 399:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 31: \
 400:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf31 *)dest = *(const SecStrBuf31 *)(&((SecStrictAliasingCast(&g_allFF
 401:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 402:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 case 32: \
 403:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     *(SecStrBuf32 *)dest = *(const SecStrBuf32 *)(&((SecStrictAliasingCast(&g_allFF
 404:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 405:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                 default: \
 406:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****                     break; \
 407:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             } \
 408:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             break; \
 409:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         default: \
 410:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             SECUREC_UNALIGNED_SET; \
 411:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     } /* END switch */ \
 412:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** } SECUREC_WHILE_ZERO
 413:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #endif
 414:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 415:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
GAS LISTING /tmp/ccLuEY1O.s 			page 20


 416:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * Handling errors
 417:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
 418:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** static errno_t SecMemsetError(void *dest, size_t destMax, int c, size_t count)
 419:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
 141              		.loc 2 419 1
 142              		.cfi_startproc
 143 0000 F30F1EFA 		endbr64
 144 0004 55       		pushq	%rbp
 145              	.LCFI9:
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 6, -16
 148 0005 4889E5   		movq	%rsp, %rbp
 149              	.LCFI10:
 150              		.cfi_def_cfa_register 6
 151 0008 4883EC30 		subq	$48, %rsp
 152 000c 48897DE8 		movq	%rdi, -24(%rbp)
 153 0010 488975E0 		movq	%rsi, -32(%rbp)
 154 0014 8955DC   		movl	%edx, -36(%rbp)
 155 0017 48894DD0 		movq	%rcx, -48(%rbp)
 156              		.loc 2 419 1
 157 001b 64488B04 		movq	%fs:40, %rax
 157      25280000 
 157      00
 158 0024 488945F8 		movq	%rax, -8(%rbp)
 159 0028 31C0     		xorl	%eax, %eax
 420:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (destMax == 0 || destMax > SECUREC_MEM_MAX_LEN) {
 160              		.loc 2 420 8
 161 002a 48837DE0 		cmpq	$0, -32(%rbp)
 161      00
 162 002f 740B     		je	.L10
 163              		.loc 2 420 22 discriminator 1
 164 0031 B8000000 		movl	$2147483648, %eax
 164      80
 165 0036 483945E0 		cmpq	%rax, -32(%rbp)
 166 003a 7207     		jb	.L11
 167              	.L10:
 421:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SECUREC_ERROR_INVALID_RANGE("memset_s");
 422:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return ERANGE;
 168              		.loc 2 422 16
 169 003c B8220000 		movl	$34, %eax
 169      00
 170 0041 EB39     		jmp	.L12
 171              	.L11:
 423:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
 424:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (dest == NULL) {
 172              		.loc 2 424 8
 173 0043 48837DE8 		cmpq	$0, -24(%rbp)
 173      00
 174 0048 7507     		jne	.L13
 425:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SECUREC_ERROR_INVALID_PARAMTER("memset_s");
 426:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return EINVAL;
 175              		.loc 2 426 16
 176 004a B8160000 		movl	$22, %eax
 176      00
 177 004f EB2B     		jmp	.L12
 178              	.L13:
 427:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
GAS LISTING /tmp/ccLuEY1O.s 			page 21


 428:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (count > destMax) {
 179              		.loc 2 428 8
 180 0051 488B45D0 		movq	-48(%rbp), %rax
 181 0055 483B45E0 		cmpq	-32(%rbp), %rax
 182 0059 761C     		jbe	.L14
 429:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         (void)memset(dest, c, destMax); /* set entire buffer to value c */
 183              		.loc 2 429 15
 184 005b 488B55E0 		movq	-32(%rbp), %rdx
 185 005f 8B4DDC   		movl	-36(%rbp), %ecx
 186 0062 488B45E8 		movq	-24(%rbp), %rax
 187 0066 89CE     		movl	%ecx, %esi
 188 0068 4889C7   		movq	%rax, %rdi
 189 006b E8000000 		call	memset@PLT
 189      00
 430:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SECUREC_ERROR_INVALID_RANGE("memset_s");
 431:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return ERANGE_AND_RESET;
 190              		.loc 2 431 16
 191 0070 B8A20000 		movl	$162, %eax
 191      00
 192 0075 EB05     		jmp	.L12
 193              	.L14:
 432:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
 433:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     return EOK;
 194              		.loc 2 433 12
 195 0077 B8000000 		movl	$0, %eax
 195      00
 196              	.L12:
 434:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
 197              		.loc 2 434 1
 198 007c 488B75F8 		movq	-8(%rbp), %rsi
 199 0080 64483334 		xorq	%fs:40, %rsi
 199      25280000 
 199      00
 200 0089 7405     		je	.L15
 201 008b E8000000 		call	__stack_chk_fail@PLT
 201      00
 202              	.L15:
 203 0090 C9       		leave
 204              	.LCFI11:
 205              		.cfi_def_cfa 7, 8
 206 0091 C3       		ret
 207              		.cfi_endproc
 208              	.LFE9:
 210              		.section	.text.SecDoMemsetOpt,"ax",@progbits
 212              	SecDoMemsetOpt:
 213              	.LFB10:
 435:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 436:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #if SECUREC_WITH_PERFORMANCE_ADDONS || SECUREC_MEMSET_WITH_PERFORMANCE
 437:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
 438:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * Performance optimization
 439:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
 440:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** static void SecDoMemsetOpt(void *dest, int c, size_t count)
 441:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
 214              		.loc 2 441 1
 215              		.cfi_startproc
 216 0000 F30F1EFA 		endbr64
 217 0004 55       		pushq	%rbp
GAS LISTING /tmp/ccLuEY1O.s 			page 22


 218              	.LCFI12:
 219              		.cfi_def_cfa_offset 16
 220              		.cfi_offset 6, -16
 221 0005 4889E5   		movq	%rsp, %rbp
 222              	.LCFI13:
 223              		.cfi_def_cfa_register 6
 224 0008 53       		pushq	%rbx
 225 0009 4883EC48 		subq	$72, %rsp
 226              		.cfi_offset 3, -24
 227 000d 48897DC8 		movq	%rdi, -56(%rbp)
 228 0011 8975C4   		movl	%esi, -60(%rbp)
 229 0014 488955B8 		movq	%rdx, -72(%rbp)
 230              		.loc 2 441 1
 231 0018 64488B04 		movq	%fs:40, %rax
 231      25280000 
 231      00
 232 0021 488945E8 		movq	%rax, -24(%rbp)
 233 0025 31C0     		xorl	%eax, %eax
 442:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (count > SECUREC_MEMSET_THRESHOLD_SIZE) {
 234              		.loc 2 442 8
 235 0027 48837DB8 		cmpq	$32, -72(%rbp)
 235      20
 236 002c 761A     		jbe	.L17
 443:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SecDoMemset(dest, c, count);
 237              		.loc 2 443 9
 238 002e 488B55B8 		movq	-72(%rbp), %rdx
 239 0032 8B4DC4   		movl	-60(%rbp), %ecx
 240 0035 488B45C8 		movq	-56(%rbp), %rax
 241 0039 89CE     		movl	%ecx, %esi
 242 003b 4889C7   		movq	%rax, %rdi
 243 003e E8000000 		call	SecDoMemset
 243      00
 444:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     } else {
 445:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         if (SECUREC_ADDR_ALIGNED_8(dest)) {
 446:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* use struct assignment */
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             SECUREC_ALIGNED_SET_OPT_ZERO_FF;
 448:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             SECUREC_UNALIGNED_SET;
 450:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 451:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
 452:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     return;
 244              		.loc 2 452 5
 245 0043 E90E1000 		jmp	.L16
 245      00
 246              	.L17:
 445:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* use struct assignment */
 247              		.loc 2 445 13
 248 0048 488B45C8 		movq	-56(%rbp), %rax
 249 004c BE000000 		movl	$0, %esi
 249      00
 250 0051 4889C7   		movq	%rax, %rdi
 251 0054 E8000000 		call	SecIsAddrAligned8
 251      00
 445:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****             /* use struct assignment */
 252              		.loc 2 445 12
 253 0059 85C0     		testl	%eax, %eax
 254 005b 0F85930D 		jne	.L19
GAS LISTING /tmp/ccLuEY1O.s 			page 23


 254      0000
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 255              		.loc 2 447 13
 256 0061 837DC400 		cmpl	$0, -60(%rbp)
 257 0065 7412     		je	.L20
 258 0067 817DC4FF 		cmpl	$255, -60(%rbp)
 258      000000
 259 006e 0F849405 		je	.L21
 259      0000
 260 0074 E91E0B00 		jmp	.L162
 260      00
 261              	.L20:
 262 0079 48837DB8 		cmpq	$32, -72(%rbp)
 262      20
 263 007e 0F87CA0F 		ja	.L163
 263      0000
 264 0084 488B45B8 		movq	-72(%rbp), %rax
 265 0088 488D1485 		leaq	0(,%rax,4), %rdx
 265      00000000 
 266 0090 488D0500 		leaq	.L25(%rip), %rax
 266      000000
 267 0097 8B0402   		movl	(%rdx,%rax), %eax
 268 009a 4898     		cltq
 269 009c 488D1500 		leaq	.L25(%rip), %rdx
 269      000000
 270 00a3 4801D0   		addq	%rdx, %rax
 271 00a6 3EFFE0   		notrack jmp	*%rax
 272              		.section	.rodata.SecDoMemsetOpt,"a",@progbits
 273              		.align 4
 274              		.align 4
 275              	.L25:
 276 0000 00000000 		.long	.L163-.L25
 277 0004 00000000 		.long	.L56-.L25
 278 0008 00000000 		.long	.L55-.L25
 279 000c 00000000 		.long	.L54-.L25
 280 0010 00000000 		.long	.L53-.L25
 281 0014 00000000 		.long	.L52-.L25
 282 0018 00000000 		.long	.L51-.L25
 283 001c 00000000 		.long	.L50-.L25
 284 0020 00000000 		.long	.L49-.L25
 285 0024 00000000 		.long	.L48-.L25
 286 0028 00000000 		.long	.L47-.L25
 287 002c 00000000 		.long	.L46-.L25
 288 0030 00000000 		.long	.L45-.L25
 289 0034 00000000 		.long	.L44-.L25
 290 0038 00000000 		.long	.L43-.L25
 291 003c 00000000 		.long	.L42-.L25
 292 0040 00000000 		.long	.L41-.L25
 293 0044 00000000 		.long	.L40-.L25
 294 0048 00000000 		.long	.L39-.L25
 295 004c 00000000 		.long	.L38-.L25
 296 0050 00000000 		.long	.L37-.L25
 297 0054 00000000 		.long	.L36-.L25
 298 0058 00000000 		.long	.L35-.L25
 299 005c 00000000 		.long	.L34-.L25
 300 0060 00000000 		.long	.L33-.L25
 301 0064 00000000 		.long	.L32-.L25
GAS LISTING /tmp/ccLuEY1O.s 			page 24


 302 0068 00000000 		.long	.L31-.L25
 303 006c 00000000 		.long	.L30-.L25
 304 0070 00000000 		.long	.L29-.L25
 305 0074 00000000 		.long	.L28-.L25
 306 0078 00000000 		.long	.L27-.L25
 307 007c 00000000 		.long	.L26-.L25
 308 0080 00000000 		.long	.L24-.L25
 309              		.section	.text.SecDoMemsetOpt
 310              	.L56:
 311 00a9 488D3D00 		leaq	g_allZero(%rip), %rdi
 311      000000
 312 00b0 E8000000 		call	SecStrictAliasingCast
 312      00
 313 00b5 488B55C8 		movq	-56(%rbp), %rdx
 314 00b9 0FB600   		movzbl	(%rax), %eax
 315 00bc 8802     		movb	%al, (%rdx)
 316 00be E98B0F00 		jmp	.L163
 316      00
 317              	.L55:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 318              		.loc 2 447 13 is_stmt 0 discriminator 3
 319 00c3 488D3D00 		leaq	g_allZero(%rip), %rdi
 319      000000
 320 00ca E8000000 		call	SecStrictAliasingCast
 320      00
 321 00cf 488B55C8 		movq	-56(%rbp), %rdx
 322 00d3 0FB700   		movzwl	(%rax), %eax
 323 00d6 668902   		movw	%ax, (%rdx)
 324 00d9 E9700F00 		jmp	.L163
 324      00
 325              	.L54:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 326              		.loc 2 447 13 discriminator 4
 327 00de 488D3D00 		leaq	g_allZero(%rip), %rdi
 327      000000
 328 00e5 E8000000 		call	SecStrictAliasingCast
 328      00
 329 00ea 488B55C8 		movq	-56(%rbp), %rdx
 330 00ee 0FB708   		movzwl	(%rax), %ecx
 331 00f1 66890A   		movw	%cx, (%rdx)
 332 00f4 0FB64002 		movzbl	2(%rax), %eax
 333 00f8 884202   		movb	%al, 2(%rdx)
 334 00fb E94E0F00 		jmp	.L163
 334      00
 335              	.L53:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 336              		.loc 2 447 13 discriminator 5
 337 0100 488D3D00 		leaq	g_allZero(%rip), %rdi
 337      000000
 338 0107 E8000000 		call	SecStrictAliasingCast
 338      00
 339 010c 488B55C8 		movq	-56(%rbp), %rdx
 340 0110 8B00     		movl	(%rax), %eax
 341 0112 8902     		movl	%eax, (%rdx)
 342 0114 E9350F00 		jmp	.L163
 342      00
 343              	.L52:
GAS LISTING /tmp/ccLuEY1O.s 			page 25


 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 344              		.loc 2 447 13 discriminator 6
 345 0119 488D3D00 		leaq	g_allZero(%rip), %rdi
 345      000000
 346 0120 E8000000 		call	SecStrictAliasingCast
 346      00
 347 0125 488B55C8 		movq	-56(%rbp), %rdx
 348 0129 8B08     		movl	(%rax), %ecx
 349 012b 890A     		movl	%ecx, (%rdx)
 350 012d 0FB64004 		movzbl	4(%rax), %eax
 351 0131 884204   		movb	%al, 4(%rdx)
 352 0134 E9150F00 		jmp	.L163
 352      00
 353              	.L51:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 354              		.loc 2 447 13 discriminator 7
 355 0139 488D3D00 		leaq	g_allZero(%rip), %rdi
 355      000000
 356 0140 E8000000 		call	SecStrictAliasingCast
 356      00
 357 0145 488B55C8 		movq	-56(%rbp), %rdx
 358 0149 8B08     		movl	(%rax), %ecx
 359 014b 890A     		movl	%ecx, (%rdx)
 360 014d 0FB74004 		movzwl	4(%rax), %eax
 361 0151 66894204 		movw	%ax, 4(%rdx)
 362 0155 E9F40E00 		jmp	.L163
 362      00
 363              	.L50:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 364              		.loc 2 447 13 discriminator 8
 365 015a 488D3D00 		leaq	g_allZero(%rip), %rdi
 365      000000
 366 0161 E8000000 		call	SecStrictAliasingCast
 366      00
 367 0166 488B55C8 		movq	-56(%rbp), %rdx
 368 016a 8B08     		movl	(%rax), %ecx
 369 016c 890A     		movl	%ecx, (%rdx)
 370 016e 0FB74804 		movzwl	4(%rax), %ecx
 371 0172 66894A04 		movw	%cx, 4(%rdx)
 372 0176 0FB64006 		movzbl	6(%rax), %eax
 373 017a 884206   		movb	%al, 6(%rdx)
 374 017d E9CC0E00 		jmp	.L163
 374      00
 375              	.L49:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 376              		.loc 2 447 13 discriminator 9
 377 0182 488D3D00 		leaq	g_allZero(%rip), %rdi
 377      000000
 378 0189 E8000000 		call	SecStrictAliasingCast
 378      00
 379 018e 488B55C8 		movq	-56(%rbp), %rdx
 380 0192 488B00   		movq	(%rax), %rax
 381 0195 488902   		movq	%rax, (%rdx)
 382 0198 E9B10E00 		jmp	.L163
 382      00
 383              	.L48:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
GAS LISTING /tmp/ccLuEY1O.s 			page 26


 384              		.loc 2 447 13 discriminator 10
 385 019d 488D3D00 		leaq	g_allZero(%rip), %rdi
 385      000000
 386 01a4 E8000000 		call	SecStrictAliasingCast
 386      00
 387 01a9 488B55C8 		movq	-56(%rbp), %rdx
 388 01ad 488B08   		movq	(%rax), %rcx
 389 01b0 48890A   		movq	%rcx, (%rdx)
 390 01b3 0FB64008 		movzbl	8(%rax), %eax
 391 01b7 884208   		movb	%al, 8(%rdx)
 392 01ba E98F0E00 		jmp	.L163
 392      00
 393              	.L47:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 394              		.loc 2 447 13 discriminator 11
 395 01bf 488D3D00 		leaq	g_allZero(%rip), %rdi
 395      000000
 396 01c6 E8000000 		call	SecStrictAliasingCast
 396      00
 397 01cb 488B55C8 		movq	-56(%rbp), %rdx
 398 01cf 488B08   		movq	(%rax), %rcx
 399 01d2 48890A   		movq	%rcx, (%rdx)
 400 01d5 0FB74008 		movzwl	8(%rax), %eax
 401 01d9 66894208 		movw	%ax, 8(%rdx)
 402 01dd E96C0E00 		jmp	.L163
 402      00
 403              	.L46:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 404              		.loc 2 447 13 discriminator 12
 405 01e2 488D3D00 		leaq	g_allZero(%rip), %rdi
 405      000000
 406 01e9 E8000000 		call	SecStrictAliasingCast
 406      00
 407 01ee 488B55C8 		movq	-56(%rbp), %rdx
 408 01f2 488B08   		movq	(%rax), %rcx
 409 01f5 48890A   		movq	%rcx, (%rdx)
 410 01f8 0FB74808 		movzwl	8(%rax), %ecx
 411 01fc 66894A08 		movw	%cx, 8(%rdx)
 412 0200 0FB6400A 		movzbl	10(%rax), %eax
 413 0204 88420A   		movb	%al, 10(%rdx)
 414 0207 E9420E00 		jmp	.L163
 414      00
 415              	.L45:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 416              		.loc 2 447 13 discriminator 13
 417 020c 488D3D00 		leaq	g_allZero(%rip), %rdi
 417      000000
 418 0213 E8000000 		call	SecStrictAliasingCast
 418      00
 419 0218 488B55C8 		movq	-56(%rbp), %rdx
 420 021c 488B08   		movq	(%rax), %rcx
 421 021f 48890A   		movq	%rcx, (%rdx)
 422 0222 8B4008   		movl	8(%rax), %eax
 423 0225 894208   		movl	%eax, 8(%rdx)
 424 0228 E9210E00 		jmp	.L163
 424      00
 425              	.L44:
GAS LISTING /tmp/ccLuEY1O.s 			page 27


 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 426              		.loc 2 447 13 discriminator 14
 427 022d 488D3D00 		leaq	g_allZero(%rip), %rdi
 427      000000
 428 0234 E8000000 		call	SecStrictAliasingCast
 428      00
 429 0239 488B55C8 		movq	-56(%rbp), %rdx
 430 023d 488B08   		movq	(%rax), %rcx
 431 0240 48890A   		movq	%rcx, (%rdx)
 432 0243 8B4808   		movl	8(%rax), %ecx
 433 0246 894A08   		movl	%ecx, 8(%rdx)
 434 0249 0FB6400C 		movzbl	12(%rax), %eax
 435 024d 88420C   		movb	%al, 12(%rdx)
 436 0250 E9F90D00 		jmp	.L163
 436      00
 437              	.L43:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 438              		.loc 2 447 13 discriminator 15
 439 0255 488D3D00 		leaq	g_allZero(%rip), %rdi
 439      000000
 440 025c E8000000 		call	SecStrictAliasingCast
 440      00
 441 0261 488B55C8 		movq	-56(%rbp), %rdx
 442 0265 488B08   		movq	(%rax), %rcx
 443 0268 48890A   		movq	%rcx, (%rdx)
 444 026b 8B4808   		movl	8(%rax), %ecx
 445 026e 894A08   		movl	%ecx, 8(%rdx)
 446 0271 0FB7400C 		movzwl	12(%rax), %eax
 447 0275 6689420C 		movw	%ax, 12(%rdx)
 448 0279 E9D00D00 		jmp	.L163
 448      00
 449              	.L42:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 450              		.loc 2 447 13 discriminator 16
 451 027e 488D3D00 		leaq	g_allZero(%rip), %rdi
 451      000000
 452 0285 E8000000 		call	SecStrictAliasingCast
 452      00
 453 028a 488B55C8 		movq	-56(%rbp), %rdx
 454 028e 488B08   		movq	(%rax), %rcx
 455 0291 48890A   		movq	%rcx, (%rdx)
 456 0294 8B4808   		movl	8(%rax), %ecx
 457 0297 894A08   		movl	%ecx, 8(%rdx)
 458 029a 0FB7480C 		movzwl	12(%rax), %ecx
 459 029e 66894A0C 		movw	%cx, 12(%rdx)
 460 02a2 0FB6400E 		movzbl	14(%rax), %eax
 461 02a6 88420E   		movb	%al, 14(%rdx)
 462 02a9 E9A00D00 		jmp	.L163
 462      00
 463              	.L41:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 464              		.loc 2 447 13 discriminator 17
 465 02ae 488D3D00 		leaq	g_allZero(%rip), %rdi
 465      000000
 466 02b5 E8000000 		call	SecStrictAliasingCast
 466      00
 467 02ba 488B4DC8 		movq	-56(%rbp), %rcx
GAS LISTING /tmp/ccLuEY1O.s 			page 28


 468 02be 488B5008 		movq	8(%rax), %rdx
 469 02c2 488B00   		movq	(%rax), %rax
 470 02c5 488901   		movq	%rax, (%rcx)
 471 02c8 48895108 		movq	%rdx, 8(%rcx)
 472 02cc E97D0D00 		jmp	.L163
 472      00
 473              	.L40:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 474              		.loc 2 447 13 discriminator 18
 475 02d1 488D3D00 		leaq	g_allZero(%rip), %rdi
 475      000000
 476 02d8 E8000000 		call	SecStrictAliasingCast
 476      00
 477 02dd 4889C1   		movq	%rax, %rcx
 478 02e0 488B75C8 		movq	-56(%rbp), %rsi
 479 02e4 488B01   		movq	(%rcx), %rax
 480 02e7 488B5108 		movq	8(%rcx), %rdx
 481 02eb 488906   		movq	%rax, (%rsi)
 482 02ee 48895608 		movq	%rdx, 8(%rsi)
 483 02f2 0FB64110 		movzbl	16(%rcx), %eax
 484 02f6 884610   		movb	%al, 16(%rsi)
 485 02f9 E9500D00 		jmp	.L163
 485      00
 486              	.L39:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 487              		.loc 2 447 13 discriminator 19
 488 02fe 488D3D00 		leaq	g_allZero(%rip), %rdi
 488      000000
 489 0305 E8000000 		call	SecStrictAliasingCast
 489      00
 490 030a 4889C1   		movq	%rax, %rcx
 491 030d 488B75C8 		movq	-56(%rbp), %rsi
 492 0311 488B01   		movq	(%rcx), %rax
 493 0314 488B5108 		movq	8(%rcx), %rdx
 494 0318 488906   		movq	%rax, (%rsi)
 495 031b 48895608 		movq	%rdx, 8(%rsi)
 496 031f 0FB74110 		movzwl	16(%rcx), %eax
 497 0323 66894610 		movw	%ax, 16(%rsi)
 498 0327 E9220D00 		jmp	.L163
 498      00
 499              	.L38:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 500              		.loc 2 447 13 discriminator 20
 501 032c 488D3D00 		leaq	g_allZero(%rip), %rdi
 501      000000
 502 0333 E8000000 		call	SecStrictAliasingCast
 502      00
 503 0338 488B55C8 		movq	-56(%rbp), %rdx
 504 033c 488B08   		movq	(%rax), %rcx
 505 033f 488B5808 		movq	8(%rax), %rbx
 506 0343 48890A   		movq	%rcx, (%rdx)
 507 0346 48895A08 		movq	%rbx, 8(%rdx)
 508 034a 0FB74810 		movzwl	16(%rax), %ecx
 509 034e 66894A10 		movw	%cx, 16(%rdx)
 510 0352 0FB64012 		movzbl	18(%rax), %eax
 511 0356 884212   		movb	%al, 18(%rdx)
 512 0359 E9F00C00 		jmp	.L163
GAS LISTING /tmp/ccLuEY1O.s 			page 29


 512      00
 513              	.L37:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 514              		.loc 2 447 13 discriminator 21
 515 035e 488D3D00 		leaq	g_allZero(%rip), %rdi
 515      000000
 516 0365 E8000000 		call	SecStrictAliasingCast
 516      00
 517 036a 4889C1   		movq	%rax, %rcx
 518 036d 488B75C8 		movq	-56(%rbp), %rsi
 519 0371 488B01   		movq	(%rcx), %rax
 520 0374 488B5108 		movq	8(%rcx), %rdx
 521 0378 488906   		movq	%rax, (%rsi)
 522 037b 48895608 		movq	%rdx, 8(%rsi)
 523 037f 8B4110   		movl	16(%rcx), %eax
 524 0382 894610   		movl	%eax, 16(%rsi)
 525 0385 E9C40C00 		jmp	.L163
 525      00
 526              	.L36:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 527              		.loc 2 447 13 discriminator 22
 528 038a 488D3D00 		leaq	g_allZero(%rip), %rdi
 528      000000
 529 0391 E8000000 		call	SecStrictAliasingCast
 529      00
 530 0396 488B55C8 		movq	-56(%rbp), %rdx
 531 039a 488B08   		movq	(%rax), %rcx
 532 039d 488B5808 		movq	8(%rax), %rbx
 533 03a1 48890A   		movq	%rcx, (%rdx)
 534 03a4 48895A08 		movq	%rbx, 8(%rdx)
 535 03a8 8B4810   		movl	16(%rax), %ecx
 536 03ab 894A10   		movl	%ecx, 16(%rdx)
 537 03ae 0FB64014 		movzbl	20(%rax), %eax
 538 03b2 884214   		movb	%al, 20(%rdx)
 539 03b5 E9940C00 		jmp	.L163
 539      00
 540              	.L35:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 541              		.loc 2 447 13 discriminator 23
 542 03ba 488D3D00 		leaq	g_allZero(%rip), %rdi
 542      000000
 543 03c1 E8000000 		call	SecStrictAliasingCast
 543      00
 544 03c6 488B55C8 		movq	-56(%rbp), %rdx
 545 03ca 488B08   		movq	(%rax), %rcx
 546 03cd 488B5808 		movq	8(%rax), %rbx
 547 03d1 48890A   		movq	%rcx, (%rdx)
 548 03d4 48895A08 		movq	%rbx, 8(%rdx)
 549 03d8 8B4810   		movl	16(%rax), %ecx
 550 03db 894A10   		movl	%ecx, 16(%rdx)
 551 03de 0FB74014 		movzwl	20(%rax), %eax
 552 03e2 66894214 		movw	%ax, 20(%rdx)
 553 03e6 E9630C00 		jmp	.L163
 553      00
 554              	.L34:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 555              		.loc 2 447 13 discriminator 24
GAS LISTING /tmp/ccLuEY1O.s 			page 30


 556 03eb 488D3D00 		leaq	g_allZero(%rip), %rdi
 556      000000
 557 03f2 E8000000 		call	SecStrictAliasingCast
 557      00
 558 03f7 488B55C8 		movq	-56(%rbp), %rdx
 559 03fb 488B08   		movq	(%rax), %rcx
 560 03fe 488B5808 		movq	8(%rax), %rbx
 561 0402 48890A   		movq	%rcx, (%rdx)
 562 0405 48895A08 		movq	%rbx, 8(%rdx)
 563 0409 8B4810   		movl	16(%rax), %ecx
 564 040c 894A10   		movl	%ecx, 16(%rdx)
 565 040f 0FB74814 		movzwl	20(%rax), %ecx
 566 0413 66894A14 		movw	%cx, 20(%rdx)
 567 0417 0FB64016 		movzbl	22(%rax), %eax
 568 041b 884216   		movb	%al, 22(%rdx)
 569 041e E92B0C00 		jmp	.L163
 569      00
 570              	.L33:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 571              		.loc 2 447 13 discriminator 25
 572 0423 488D3D00 		leaq	g_allZero(%rip), %rdi
 572      000000
 573 042a E8000000 		call	SecStrictAliasingCast
 573      00
 574 042f 4889C1   		movq	%rax, %rcx
 575 0432 488B75C8 		movq	-56(%rbp), %rsi
 576 0436 488B01   		movq	(%rcx), %rax
 577 0439 488B5108 		movq	8(%rcx), %rdx
 578 043d 488906   		movq	%rax, (%rsi)
 579 0440 48895608 		movq	%rdx, 8(%rsi)
 580 0444 488B4110 		movq	16(%rcx), %rax
 581 0448 48894610 		movq	%rax, 16(%rsi)
 582 044c E9FD0B00 		jmp	.L163
 582      00
 583              	.L32:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 584              		.loc 2 447 13 discriminator 26
 585 0451 488D3D00 		leaq	g_allZero(%rip), %rdi
 585      000000
 586 0458 E8000000 		call	SecStrictAliasingCast
 586      00
 587 045d 488B55C8 		movq	-56(%rbp), %rdx
 588 0461 488B08   		movq	(%rax), %rcx
 589 0464 488B5808 		movq	8(%rax), %rbx
 590 0468 48890A   		movq	%rcx, (%rdx)
 591 046b 48895A08 		movq	%rbx, 8(%rdx)
 592 046f 488B4810 		movq	16(%rax), %rcx
 593 0473 48894A10 		movq	%rcx, 16(%rdx)
 594 0477 0FB64018 		movzbl	24(%rax), %eax
 595 047b 884218   		movb	%al, 24(%rdx)
 596 047e E9CB0B00 		jmp	.L163
 596      00
 597              	.L31:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 598              		.loc 2 447 13 discriminator 27
 599 0483 488D3D00 		leaq	g_allZero(%rip), %rdi
 599      000000
GAS LISTING /tmp/ccLuEY1O.s 			page 31


 600 048a E8000000 		call	SecStrictAliasingCast
 600      00
 601 048f 488B55C8 		movq	-56(%rbp), %rdx
 602 0493 488B08   		movq	(%rax), %rcx
 603 0496 488B5808 		movq	8(%rax), %rbx
 604 049a 48890A   		movq	%rcx, (%rdx)
 605 049d 48895A08 		movq	%rbx, 8(%rdx)
 606 04a1 488B4810 		movq	16(%rax), %rcx
 607 04a5 48894A10 		movq	%rcx, 16(%rdx)
 608 04a9 0FB74018 		movzwl	24(%rax), %eax
 609 04ad 66894218 		movw	%ax, 24(%rdx)
 610 04b1 E9980B00 		jmp	.L163
 610      00
 611              	.L30:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 612              		.loc 2 447 13 discriminator 28
 613 04b6 488D3D00 		leaq	g_allZero(%rip), %rdi
 613      000000
 614 04bd E8000000 		call	SecStrictAliasingCast
 614      00
 615 04c2 488B55C8 		movq	-56(%rbp), %rdx
 616 04c6 488B08   		movq	(%rax), %rcx
 617 04c9 488B5808 		movq	8(%rax), %rbx
 618 04cd 48890A   		movq	%rcx, (%rdx)
 619 04d0 48895A08 		movq	%rbx, 8(%rdx)
 620 04d4 488B4810 		movq	16(%rax), %rcx
 621 04d8 48894A10 		movq	%rcx, 16(%rdx)
 622 04dc 0FB74818 		movzwl	24(%rax), %ecx
 623 04e0 66894A18 		movw	%cx, 24(%rdx)
 624 04e4 0FB6401A 		movzbl	26(%rax), %eax
 625 04e8 88421A   		movb	%al, 26(%rdx)
 626 04eb E95E0B00 		jmp	.L163
 626      00
 627              	.L29:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 628              		.loc 2 447 13 discriminator 29
 629 04f0 488D3D00 		leaq	g_allZero(%rip), %rdi
 629      000000
 630 04f7 E8000000 		call	SecStrictAliasingCast
 630      00
 631 04fc 488B55C8 		movq	-56(%rbp), %rdx
 632 0500 488B08   		movq	(%rax), %rcx
 633 0503 488B5808 		movq	8(%rax), %rbx
 634 0507 48890A   		movq	%rcx, (%rdx)
 635 050a 48895A08 		movq	%rbx, 8(%rdx)
 636 050e 488B4810 		movq	16(%rax), %rcx
 637 0512 48894A10 		movq	%rcx, 16(%rdx)
 638 0516 8B4018   		movl	24(%rax), %eax
 639 0519 894218   		movl	%eax, 24(%rdx)
 640 051c E92D0B00 		jmp	.L163
 640      00
 641              	.L28:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 642              		.loc 2 447 13 discriminator 30
 643 0521 488D3D00 		leaq	g_allZero(%rip), %rdi
 643      000000
 644 0528 E8000000 		call	SecStrictAliasingCast
GAS LISTING /tmp/ccLuEY1O.s 			page 32


 644      00
 645 052d 488B55C8 		movq	-56(%rbp), %rdx
 646 0531 488B08   		movq	(%rax), %rcx
 647 0534 488B5808 		movq	8(%rax), %rbx
 648 0538 48890A   		movq	%rcx, (%rdx)
 649 053b 48895A08 		movq	%rbx, 8(%rdx)
 650 053f 488B4810 		movq	16(%rax), %rcx
 651 0543 48894A10 		movq	%rcx, 16(%rdx)
 652 0547 8B4818   		movl	24(%rax), %ecx
 653 054a 894A18   		movl	%ecx, 24(%rdx)
 654 054d 0FB6401C 		movzbl	28(%rax), %eax
 655 0551 88421C   		movb	%al, 28(%rdx)
 656 0554 E9F50A00 		jmp	.L163
 656      00
 657              	.L27:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 658              		.loc 2 447 13 discriminator 31
 659 0559 488D3D00 		leaq	g_allZero(%rip), %rdi
 659      000000
 660 0560 E8000000 		call	SecStrictAliasingCast
 660      00
 661 0565 488B55C8 		movq	-56(%rbp), %rdx
 662 0569 488B08   		movq	(%rax), %rcx
 663 056c 488B5808 		movq	8(%rax), %rbx
 664 0570 48890A   		movq	%rcx, (%rdx)
 665 0573 48895A08 		movq	%rbx, 8(%rdx)
 666 0577 488B4810 		movq	16(%rax), %rcx
 667 057b 48894A10 		movq	%rcx, 16(%rdx)
 668 057f 8B4818   		movl	24(%rax), %ecx
 669 0582 894A18   		movl	%ecx, 24(%rdx)
 670 0585 0FB7401C 		movzwl	28(%rax), %eax
 671 0589 6689421C 		movw	%ax, 28(%rdx)
 672 058d E9BC0A00 		jmp	.L163
 672      00
 673              	.L26:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 674              		.loc 2 447 13 discriminator 32
 675 0592 488D3D00 		leaq	g_allZero(%rip), %rdi
 675      000000
 676 0599 E8000000 		call	SecStrictAliasingCast
 676      00
 677 059e 488B55C8 		movq	-56(%rbp), %rdx
 678 05a2 488B08   		movq	(%rax), %rcx
 679 05a5 488B5808 		movq	8(%rax), %rbx
 680 05a9 48890A   		movq	%rcx, (%rdx)
 681 05ac 48895A08 		movq	%rbx, 8(%rdx)
 682 05b0 488B4810 		movq	16(%rax), %rcx
 683 05b4 48894A10 		movq	%rcx, 16(%rdx)
 684 05b8 8B4818   		movl	24(%rax), %ecx
 685 05bb 894A18   		movl	%ecx, 24(%rdx)
 686 05be 0FB7481C 		movzwl	28(%rax), %ecx
 687 05c2 66894A1C 		movw	%cx, 28(%rdx)
 688 05c6 0FB6401E 		movzbl	30(%rax), %eax
 689 05ca 88421E   		movb	%al, 30(%rdx)
 690 05cd E97C0A00 		jmp	.L163
 690      00
 691              	.L24:
GAS LISTING /tmp/ccLuEY1O.s 			page 33


 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 692              		.loc 2 447 13 discriminator 33
 693 05d2 488D3D00 		leaq	g_allZero(%rip), %rdi
 693      000000
 694 05d9 E8000000 		call	SecStrictAliasingCast
 694      00
 695 05de 4889C1   		movq	%rax, %rcx
 696 05e1 488B75C8 		movq	-56(%rbp), %rsi
 697 05e5 488B01   		movq	(%rcx), %rax
 698 05e8 488B5108 		movq	8(%rcx), %rdx
 699 05ec 488906   		movq	%rax, (%rsi)
 700 05ef 48895608 		movq	%rdx, 8(%rsi)
 701 05f3 488B4110 		movq	16(%rcx), %rax
 702 05f7 488B5118 		movq	24(%rcx), %rdx
 703 05fb 48894610 		movq	%rax, 16(%rsi)
 704 05ff 48895618 		movq	%rdx, 24(%rsi)
 705 0603 E9460A00 		jmp	.L163
 705      00
 706              	.L21:
 707 0608 48837DB8 		cmpq	$32, -72(%rbp)
 707      20
 708 060d 0F873B0A 		ja	.L163
 708      0000
 709 0613 488B45B8 		movq	-72(%rbp), %rax
 710 0617 488D1485 		leaq	0(,%rax,4), %rdx
 710      00000000 
 711 061f 488D0500 		leaq	.L60(%rip), %rax
 711      000000
 712 0626 8B0402   		movl	(%rdx,%rax), %eax
 713 0629 4898     		cltq
 714 062b 488D1500 		leaq	.L60(%rip), %rdx
 714      000000
 715 0632 4801D0   		addq	%rdx, %rax
 716 0635 3EFFE0   		notrack jmp	*%rax
 717              		.section	.rodata.SecDoMemsetOpt
 718              		.align 4
 719              		.align 4
 720              	.L60:
 721 0084 00000000 		.long	.L163-.L60
 722 0088 00000000 		.long	.L91-.L60
 723 008c 00000000 		.long	.L90-.L60
 724 0090 00000000 		.long	.L89-.L60
 725 0094 00000000 		.long	.L88-.L60
 726 0098 00000000 		.long	.L87-.L60
 727 009c 00000000 		.long	.L86-.L60
 728 00a0 00000000 		.long	.L85-.L60
 729 00a4 00000000 		.long	.L84-.L60
 730 00a8 00000000 		.long	.L83-.L60
 731 00ac 00000000 		.long	.L82-.L60
 732 00b0 00000000 		.long	.L81-.L60
 733 00b4 00000000 		.long	.L80-.L60
 734 00b8 00000000 		.long	.L79-.L60
 735 00bc 00000000 		.long	.L78-.L60
 736 00c0 00000000 		.long	.L77-.L60
 737 00c4 00000000 		.long	.L76-.L60
 738 00c8 00000000 		.long	.L75-.L60
 739 00cc 00000000 		.long	.L74-.L60
GAS LISTING /tmp/ccLuEY1O.s 			page 34


 740 00d0 00000000 		.long	.L73-.L60
 741 00d4 00000000 		.long	.L72-.L60
 742 00d8 00000000 		.long	.L71-.L60
 743 00dc 00000000 		.long	.L70-.L60
 744 00e0 00000000 		.long	.L69-.L60
 745 00e4 00000000 		.long	.L68-.L60
 746 00e8 00000000 		.long	.L67-.L60
 747 00ec 00000000 		.long	.L66-.L60
 748 00f0 00000000 		.long	.L65-.L60
 749 00f4 00000000 		.long	.L64-.L60
 750 00f8 00000000 		.long	.L63-.L60
 751 00fc 00000000 		.long	.L62-.L60
 752 0100 00000000 		.long	.L61-.L60
 753 0104 00000000 		.long	.L59-.L60
 754              		.section	.text.SecDoMemsetOpt
 755              	.L91:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 756              		.loc 2 447 13
 757 0638 488D3D00 		leaq	g_allFF(%rip), %rdi
 757      000000
 758 063f E8000000 		call	SecStrictAliasingCast
 758      00
 759 0644 488B55C8 		movq	-56(%rbp), %rdx
 760 0648 0FB600   		movzbl	(%rax), %eax
 761 064b 8802     		movb	%al, (%rdx)
 762 064d E9FC0900 		jmp	.L163
 762      00
 763              	.L90:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 764              		.loc 2 447 13 discriminator 37
 765 0652 488D3D00 		leaq	g_allFF(%rip), %rdi
 765      000000
 766 0659 E8000000 		call	SecStrictAliasingCast
 766      00
 767 065e 488B55C8 		movq	-56(%rbp), %rdx
 768 0662 0FB700   		movzwl	(%rax), %eax
 769 0665 668902   		movw	%ax, (%rdx)
 770 0668 E9E10900 		jmp	.L163
 770      00
 771              	.L89:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 772              		.loc 2 447 13 discriminator 38
 773 066d 488D3D00 		leaq	g_allFF(%rip), %rdi
 773      000000
 774 0674 E8000000 		call	SecStrictAliasingCast
 774      00
 775 0679 488B55C8 		movq	-56(%rbp), %rdx
 776 067d 0FB708   		movzwl	(%rax), %ecx
 777 0680 66890A   		movw	%cx, (%rdx)
 778 0683 0FB64002 		movzbl	2(%rax), %eax
 779 0687 884202   		movb	%al, 2(%rdx)
 780 068a E9BF0900 		jmp	.L163
 780      00
 781              	.L88:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 782              		.loc 2 447 13 discriminator 39
 783 068f 488D3D00 		leaq	g_allFF(%rip), %rdi
GAS LISTING /tmp/ccLuEY1O.s 			page 35


 783      000000
 784 0696 E8000000 		call	SecStrictAliasingCast
 784      00
 785 069b 488B55C8 		movq	-56(%rbp), %rdx
 786 069f 8B00     		movl	(%rax), %eax
 787 06a1 8902     		movl	%eax, (%rdx)
 788 06a3 E9A60900 		jmp	.L163
 788      00
 789              	.L87:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 790              		.loc 2 447 13 discriminator 40
 791 06a8 488D3D00 		leaq	g_allFF(%rip), %rdi
 791      000000
 792 06af E8000000 		call	SecStrictAliasingCast
 792      00
 793 06b4 488B55C8 		movq	-56(%rbp), %rdx
 794 06b8 8B08     		movl	(%rax), %ecx
 795 06ba 890A     		movl	%ecx, (%rdx)
 796 06bc 0FB64004 		movzbl	4(%rax), %eax
 797 06c0 884204   		movb	%al, 4(%rdx)
 798 06c3 E9860900 		jmp	.L163
 798      00
 799              	.L86:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 800              		.loc 2 447 13 discriminator 41
 801 06c8 488D3D00 		leaq	g_allFF(%rip), %rdi
 801      000000
 802 06cf E8000000 		call	SecStrictAliasingCast
 802      00
 803 06d4 488B55C8 		movq	-56(%rbp), %rdx
 804 06d8 8B08     		movl	(%rax), %ecx
 805 06da 890A     		movl	%ecx, (%rdx)
 806 06dc 0FB74004 		movzwl	4(%rax), %eax
 807 06e0 66894204 		movw	%ax, 4(%rdx)
 808 06e4 E9650900 		jmp	.L163
 808      00
 809              	.L85:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 810              		.loc 2 447 13 discriminator 42
 811 06e9 488D3D00 		leaq	g_allFF(%rip), %rdi
 811      000000
 812 06f0 E8000000 		call	SecStrictAliasingCast
 812      00
 813 06f5 488B55C8 		movq	-56(%rbp), %rdx
 814 06f9 8B08     		movl	(%rax), %ecx
 815 06fb 890A     		movl	%ecx, (%rdx)
 816 06fd 0FB74804 		movzwl	4(%rax), %ecx
 817 0701 66894A04 		movw	%cx, 4(%rdx)
 818 0705 0FB64006 		movzbl	6(%rax), %eax
 819 0709 884206   		movb	%al, 6(%rdx)
 820 070c E93D0900 		jmp	.L163
 820      00
 821              	.L84:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 822              		.loc 2 447 13 discriminator 43
 823 0711 488D3D00 		leaq	g_allFF(%rip), %rdi
 823      000000
GAS LISTING /tmp/ccLuEY1O.s 			page 36


 824 0718 E8000000 		call	SecStrictAliasingCast
 824      00
 825 071d 488B55C8 		movq	-56(%rbp), %rdx
 826 0721 488B00   		movq	(%rax), %rax
 827 0724 488902   		movq	%rax, (%rdx)
 828 0727 E9220900 		jmp	.L163
 828      00
 829              	.L83:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 830              		.loc 2 447 13 discriminator 44
 831 072c 488D3D00 		leaq	g_allFF(%rip), %rdi
 831      000000
 832 0733 E8000000 		call	SecStrictAliasingCast
 832      00
 833 0738 488B55C8 		movq	-56(%rbp), %rdx
 834 073c 488B08   		movq	(%rax), %rcx
 835 073f 48890A   		movq	%rcx, (%rdx)
 836 0742 0FB64008 		movzbl	8(%rax), %eax
 837 0746 884208   		movb	%al, 8(%rdx)
 838 0749 E9000900 		jmp	.L163
 838      00
 839              	.L82:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 840              		.loc 2 447 13 discriminator 45
 841 074e 488D3D00 		leaq	g_allFF(%rip), %rdi
 841      000000
 842 0755 E8000000 		call	SecStrictAliasingCast
 842      00
 843 075a 488B55C8 		movq	-56(%rbp), %rdx
 844 075e 488B08   		movq	(%rax), %rcx
 845 0761 48890A   		movq	%rcx, (%rdx)
 846 0764 0FB74008 		movzwl	8(%rax), %eax
 847 0768 66894208 		movw	%ax, 8(%rdx)
 848 076c E9DD0800 		jmp	.L163
 848      00
 849              	.L81:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 850              		.loc 2 447 13 discriminator 46
 851 0771 488D3D00 		leaq	g_allFF(%rip), %rdi
 851      000000
 852 0778 E8000000 		call	SecStrictAliasingCast
 852      00
 853 077d 488B55C8 		movq	-56(%rbp), %rdx
 854 0781 488B08   		movq	(%rax), %rcx
 855 0784 48890A   		movq	%rcx, (%rdx)
 856 0787 0FB74808 		movzwl	8(%rax), %ecx
 857 078b 66894A08 		movw	%cx, 8(%rdx)
 858 078f 0FB6400A 		movzbl	10(%rax), %eax
 859 0793 88420A   		movb	%al, 10(%rdx)
 860 0796 E9B30800 		jmp	.L163
 860      00
 861              	.L80:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 862              		.loc 2 447 13 discriminator 47
 863 079b 488D3D00 		leaq	g_allFF(%rip), %rdi
 863      000000
 864 07a2 E8000000 		call	SecStrictAliasingCast
GAS LISTING /tmp/ccLuEY1O.s 			page 37


 864      00
 865 07a7 488B55C8 		movq	-56(%rbp), %rdx
 866 07ab 488B08   		movq	(%rax), %rcx
 867 07ae 48890A   		movq	%rcx, (%rdx)
 868 07b1 8B4008   		movl	8(%rax), %eax
 869 07b4 894208   		movl	%eax, 8(%rdx)
 870 07b7 E9920800 		jmp	.L163
 870      00
 871              	.L79:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 872              		.loc 2 447 13 discriminator 48
 873 07bc 488D3D00 		leaq	g_allFF(%rip), %rdi
 873      000000
 874 07c3 E8000000 		call	SecStrictAliasingCast
 874      00
 875 07c8 488B55C8 		movq	-56(%rbp), %rdx
 876 07cc 488B08   		movq	(%rax), %rcx
 877 07cf 48890A   		movq	%rcx, (%rdx)
 878 07d2 8B4808   		movl	8(%rax), %ecx
 879 07d5 894A08   		movl	%ecx, 8(%rdx)
 880 07d8 0FB6400C 		movzbl	12(%rax), %eax
 881 07dc 88420C   		movb	%al, 12(%rdx)
 882 07df E96A0800 		jmp	.L163
 882      00
 883              	.L78:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 884              		.loc 2 447 13 discriminator 49
 885 07e4 488D3D00 		leaq	g_allFF(%rip), %rdi
 885      000000
 886 07eb E8000000 		call	SecStrictAliasingCast
 886      00
 887 07f0 488B55C8 		movq	-56(%rbp), %rdx
 888 07f4 488B08   		movq	(%rax), %rcx
 889 07f7 48890A   		movq	%rcx, (%rdx)
 890 07fa 8B4808   		movl	8(%rax), %ecx
 891 07fd 894A08   		movl	%ecx, 8(%rdx)
 892 0800 0FB7400C 		movzwl	12(%rax), %eax
 893 0804 6689420C 		movw	%ax, 12(%rdx)
 894 0808 E9410800 		jmp	.L163
 894      00
 895              	.L77:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 896              		.loc 2 447 13 discriminator 50
 897 080d 488D3D00 		leaq	g_allFF(%rip), %rdi
 897      000000
 898 0814 E8000000 		call	SecStrictAliasingCast
 898      00
 899 0819 488B55C8 		movq	-56(%rbp), %rdx
 900 081d 488B08   		movq	(%rax), %rcx
 901 0820 48890A   		movq	%rcx, (%rdx)
 902 0823 8B4808   		movl	8(%rax), %ecx
 903 0826 894A08   		movl	%ecx, 8(%rdx)
 904 0829 0FB7480C 		movzwl	12(%rax), %ecx
 905 082d 66894A0C 		movw	%cx, 12(%rdx)
 906 0831 0FB6400E 		movzbl	14(%rax), %eax
 907 0835 88420E   		movb	%al, 14(%rdx)
 908 0838 E9110800 		jmp	.L163
GAS LISTING /tmp/ccLuEY1O.s 			page 38


 908      00
 909              	.L76:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 910              		.loc 2 447 13 discriminator 51
 911 083d 488D3D00 		leaq	g_allFF(%rip), %rdi
 911      000000
 912 0844 E8000000 		call	SecStrictAliasingCast
 912      00
 913 0849 488B4DC8 		movq	-56(%rbp), %rcx
 914 084d 488B5008 		movq	8(%rax), %rdx
 915 0851 488B00   		movq	(%rax), %rax
 916 0854 488901   		movq	%rax, (%rcx)
 917 0857 48895108 		movq	%rdx, 8(%rcx)
 918 085b E9EE0700 		jmp	.L163
 918      00
 919              	.L75:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 920              		.loc 2 447 13 discriminator 52
 921 0860 488D3D00 		leaq	g_allFF(%rip), %rdi
 921      000000
 922 0867 E8000000 		call	SecStrictAliasingCast
 922      00
 923 086c 4889C1   		movq	%rax, %rcx
 924 086f 488B75C8 		movq	-56(%rbp), %rsi
 925 0873 488B01   		movq	(%rcx), %rax
 926 0876 488B5108 		movq	8(%rcx), %rdx
 927 087a 488906   		movq	%rax, (%rsi)
 928 087d 48895608 		movq	%rdx, 8(%rsi)
 929 0881 0FB64110 		movzbl	16(%rcx), %eax
 930 0885 884610   		movb	%al, 16(%rsi)
 931 0888 E9C10700 		jmp	.L163
 931      00
 932              	.L74:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 933              		.loc 2 447 13 discriminator 53
 934 088d 488D3D00 		leaq	g_allFF(%rip), %rdi
 934      000000
 935 0894 E8000000 		call	SecStrictAliasingCast
 935      00
 936 0899 4889C1   		movq	%rax, %rcx
 937 089c 488B75C8 		movq	-56(%rbp), %rsi
 938 08a0 488B01   		movq	(%rcx), %rax
 939 08a3 488B5108 		movq	8(%rcx), %rdx
 940 08a7 488906   		movq	%rax, (%rsi)
 941 08aa 48895608 		movq	%rdx, 8(%rsi)
 942 08ae 0FB74110 		movzwl	16(%rcx), %eax
 943 08b2 66894610 		movw	%ax, 16(%rsi)
 944 08b6 E9930700 		jmp	.L163
 944      00
 945              	.L73:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 946              		.loc 2 447 13 discriminator 54
 947 08bb 488D3D00 		leaq	g_allFF(%rip), %rdi
 947      000000
 948 08c2 E8000000 		call	SecStrictAliasingCast
 948      00
 949 08c7 488B55C8 		movq	-56(%rbp), %rdx
GAS LISTING /tmp/ccLuEY1O.s 			page 39


 950 08cb 488B08   		movq	(%rax), %rcx
 951 08ce 488B5808 		movq	8(%rax), %rbx
 952 08d2 48890A   		movq	%rcx, (%rdx)
 953 08d5 48895A08 		movq	%rbx, 8(%rdx)
 954 08d9 0FB74810 		movzwl	16(%rax), %ecx
 955 08dd 66894A10 		movw	%cx, 16(%rdx)
 956 08e1 0FB64012 		movzbl	18(%rax), %eax
 957 08e5 884212   		movb	%al, 18(%rdx)
 958 08e8 E9610700 		jmp	.L163
 958      00
 959              	.L72:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 960              		.loc 2 447 13 discriminator 55
 961 08ed 488D3D00 		leaq	g_allFF(%rip), %rdi
 961      000000
 962 08f4 E8000000 		call	SecStrictAliasingCast
 962      00
 963 08f9 4889C1   		movq	%rax, %rcx
 964 08fc 488B75C8 		movq	-56(%rbp), %rsi
 965 0900 488B01   		movq	(%rcx), %rax
 966 0903 488B5108 		movq	8(%rcx), %rdx
 967 0907 488906   		movq	%rax, (%rsi)
 968 090a 48895608 		movq	%rdx, 8(%rsi)
 969 090e 8B4110   		movl	16(%rcx), %eax
 970 0911 894610   		movl	%eax, 16(%rsi)
 971 0914 E9350700 		jmp	.L163
 971      00
 972              	.L71:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 973              		.loc 2 447 13 discriminator 56
 974 0919 488D3D00 		leaq	g_allFF(%rip), %rdi
 974      000000
 975 0920 E8000000 		call	SecStrictAliasingCast
 975      00
 976 0925 488B55C8 		movq	-56(%rbp), %rdx
 977 0929 488B08   		movq	(%rax), %rcx
 978 092c 488B5808 		movq	8(%rax), %rbx
 979 0930 48890A   		movq	%rcx, (%rdx)
 980 0933 48895A08 		movq	%rbx, 8(%rdx)
 981 0937 8B4810   		movl	16(%rax), %ecx
 982 093a 894A10   		movl	%ecx, 16(%rdx)
 983 093d 0FB64014 		movzbl	20(%rax), %eax
 984 0941 884214   		movb	%al, 20(%rdx)
 985 0944 E9050700 		jmp	.L163
 985      00
 986              	.L70:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 987              		.loc 2 447 13 discriminator 57
 988 0949 488D3D00 		leaq	g_allFF(%rip), %rdi
 988      000000
 989 0950 E8000000 		call	SecStrictAliasingCast
 989      00
 990 0955 488B55C8 		movq	-56(%rbp), %rdx
 991 0959 488B08   		movq	(%rax), %rcx
 992 095c 488B5808 		movq	8(%rax), %rbx
 993 0960 48890A   		movq	%rcx, (%rdx)
 994 0963 48895A08 		movq	%rbx, 8(%rdx)
GAS LISTING /tmp/ccLuEY1O.s 			page 40


 995 0967 8B4810   		movl	16(%rax), %ecx
 996 096a 894A10   		movl	%ecx, 16(%rdx)
 997 096d 0FB74014 		movzwl	20(%rax), %eax
 998 0971 66894214 		movw	%ax, 20(%rdx)
 999 0975 E9D40600 		jmp	.L163
 999      00
 1000              	.L69:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1001              		.loc 2 447 13 discriminator 58
 1002 097a 488D3D00 		leaq	g_allFF(%rip), %rdi
 1002      000000
 1003 0981 E8000000 		call	SecStrictAliasingCast
 1003      00
 1004 0986 488B55C8 		movq	-56(%rbp), %rdx
 1005 098a 488B08   		movq	(%rax), %rcx
 1006 098d 488B5808 		movq	8(%rax), %rbx
 1007 0991 48890A   		movq	%rcx, (%rdx)
 1008 0994 48895A08 		movq	%rbx, 8(%rdx)
 1009 0998 8B4810   		movl	16(%rax), %ecx
 1010 099b 894A10   		movl	%ecx, 16(%rdx)
 1011 099e 0FB74814 		movzwl	20(%rax), %ecx
 1012 09a2 66894A14 		movw	%cx, 20(%rdx)
 1013 09a6 0FB64016 		movzbl	22(%rax), %eax
 1014 09aa 884216   		movb	%al, 22(%rdx)
 1015 09ad E99C0600 		jmp	.L163
 1015      00
 1016              	.L68:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1017              		.loc 2 447 13 discriminator 59
 1018 09b2 488D3D00 		leaq	g_allFF(%rip), %rdi
 1018      000000
 1019 09b9 E8000000 		call	SecStrictAliasingCast
 1019      00
 1020 09be 4889C1   		movq	%rax, %rcx
 1021 09c1 488B75C8 		movq	-56(%rbp), %rsi
 1022 09c5 488B01   		movq	(%rcx), %rax
 1023 09c8 488B5108 		movq	8(%rcx), %rdx
 1024 09cc 488906   		movq	%rax, (%rsi)
 1025 09cf 48895608 		movq	%rdx, 8(%rsi)
 1026 09d3 488B4110 		movq	16(%rcx), %rax
 1027 09d7 48894610 		movq	%rax, 16(%rsi)
 1028 09db E96E0600 		jmp	.L163
 1028      00
 1029              	.L67:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1030              		.loc 2 447 13 discriminator 60
 1031 09e0 488D3D00 		leaq	g_allFF(%rip), %rdi
 1031      000000
 1032 09e7 E8000000 		call	SecStrictAliasingCast
 1032      00
 1033 09ec 488B55C8 		movq	-56(%rbp), %rdx
 1034 09f0 488B08   		movq	(%rax), %rcx
 1035 09f3 488B5808 		movq	8(%rax), %rbx
 1036 09f7 48890A   		movq	%rcx, (%rdx)
 1037 09fa 48895A08 		movq	%rbx, 8(%rdx)
 1038 09fe 488B4810 		movq	16(%rax), %rcx
 1039 0a02 48894A10 		movq	%rcx, 16(%rdx)
GAS LISTING /tmp/ccLuEY1O.s 			page 41


 1040 0a06 0FB64018 		movzbl	24(%rax), %eax
 1041 0a0a 884218   		movb	%al, 24(%rdx)
 1042 0a0d E93C0600 		jmp	.L163
 1042      00
 1043              	.L66:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1044              		.loc 2 447 13 discriminator 61
 1045 0a12 488D3D00 		leaq	g_allFF(%rip), %rdi
 1045      000000
 1046 0a19 E8000000 		call	SecStrictAliasingCast
 1046      00
 1047 0a1e 488B55C8 		movq	-56(%rbp), %rdx
 1048 0a22 488B08   		movq	(%rax), %rcx
 1049 0a25 488B5808 		movq	8(%rax), %rbx
 1050 0a29 48890A   		movq	%rcx, (%rdx)
 1051 0a2c 48895A08 		movq	%rbx, 8(%rdx)
 1052 0a30 488B4810 		movq	16(%rax), %rcx
 1053 0a34 48894A10 		movq	%rcx, 16(%rdx)
 1054 0a38 0FB74018 		movzwl	24(%rax), %eax
 1055 0a3c 66894218 		movw	%ax, 24(%rdx)
 1056 0a40 E9090600 		jmp	.L163
 1056      00
 1057              	.L65:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1058              		.loc 2 447 13 discriminator 62
 1059 0a45 488D3D00 		leaq	g_allFF(%rip), %rdi
 1059      000000
 1060 0a4c E8000000 		call	SecStrictAliasingCast
 1060      00
 1061 0a51 488B55C8 		movq	-56(%rbp), %rdx
 1062 0a55 488B08   		movq	(%rax), %rcx
 1063 0a58 488B5808 		movq	8(%rax), %rbx
 1064 0a5c 48890A   		movq	%rcx, (%rdx)
 1065 0a5f 48895A08 		movq	%rbx, 8(%rdx)
 1066 0a63 488B4810 		movq	16(%rax), %rcx
 1067 0a67 48894A10 		movq	%rcx, 16(%rdx)
 1068 0a6b 0FB74818 		movzwl	24(%rax), %ecx
 1069 0a6f 66894A18 		movw	%cx, 24(%rdx)
 1070 0a73 0FB6401A 		movzbl	26(%rax), %eax
 1071 0a77 88421A   		movb	%al, 26(%rdx)
 1072 0a7a E9CF0500 		jmp	.L163
 1072      00
 1073              	.L64:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1074              		.loc 2 447 13 discriminator 63
 1075 0a7f 488D3D00 		leaq	g_allFF(%rip), %rdi
 1075      000000
 1076 0a86 E8000000 		call	SecStrictAliasingCast
 1076      00
 1077 0a8b 488B55C8 		movq	-56(%rbp), %rdx
 1078 0a8f 488B08   		movq	(%rax), %rcx
 1079 0a92 488B5808 		movq	8(%rax), %rbx
 1080 0a96 48890A   		movq	%rcx, (%rdx)
 1081 0a99 48895A08 		movq	%rbx, 8(%rdx)
 1082 0a9d 488B4810 		movq	16(%rax), %rcx
 1083 0aa1 48894A10 		movq	%rcx, 16(%rdx)
 1084 0aa5 8B4018   		movl	24(%rax), %eax
GAS LISTING /tmp/ccLuEY1O.s 			page 42


 1085 0aa8 894218   		movl	%eax, 24(%rdx)
 1086 0aab E99E0500 		jmp	.L163
 1086      00
 1087              	.L63:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1088              		.loc 2 447 13 discriminator 64
 1089 0ab0 488D3D00 		leaq	g_allFF(%rip), %rdi
 1089      000000
 1090 0ab7 E8000000 		call	SecStrictAliasingCast
 1090      00
 1091 0abc 488B55C8 		movq	-56(%rbp), %rdx
 1092 0ac0 488B08   		movq	(%rax), %rcx
 1093 0ac3 488B5808 		movq	8(%rax), %rbx
 1094 0ac7 48890A   		movq	%rcx, (%rdx)
 1095 0aca 48895A08 		movq	%rbx, 8(%rdx)
 1096 0ace 488B4810 		movq	16(%rax), %rcx
 1097 0ad2 48894A10 		movq	%rcx, 16(%rdx)
 1098 0ad6 8B4818   		movl	24(%rax), %ecx
 1099 0ad9 894A18   		movl	%ecx, 24(%rdx)
 1100 0adc 0FB6401C 		movzbl	28(%rax), %eax
 1101 0ae0 88421C   		movb	%al, 28(%rdx)
 1102 0ae3 E9660500 		jmp	.L163
 1102      00
 1103              	.L62:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1104              		.loc 2 447 13 discriminator 65
 1105 0ae8 488D3D00 		leaq	g_allFF(%rip), %rdi
 1105      000000
 1106 0aef E8000000 		call	SecStrictAliasingCast
 1106      00
 1107 0af4 488B55C8 		movq	-56(%rbp), %rdx
 1108 0af8 488B08   		movq	(%rax), %rcx
 1109 0afb 488B5808 		movq	8(%rax), %rbx
 1110 0aff 48890A   		movq	%rcx, (%rdx)
 1111 0b02 48895A08 		movq	%rbx, 8(%rdx)
 1112 0b06 488B4810 		movq	16(%rax), %rcx
 1113 0b0a 48894A10 		movq	%rcx, 16(%rdx)
 1114 0b0e 8B4818   		movl	24(%rax), %ecx
 1115 0b11 894A18   		movl	%ecx, 24(%rdx)
 1116 0b14 0FB7401C 		movzwl	28(%rax), %eax
 1117 0b18 6689421C 		movw	%ax, 28(%rdx)
 1118 0b1c E92D0500 		jmp	.L163
 1118      00
 1119              	.L61:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1120              		.loc 2 447 13 discriminator 66
 1121 0b21 488D3D00 		leaq	g_allFF(%rip), %rdi
 1121      000000
 1122 0b28 E8000000 		call	SecStrictAliasingCast
 1122      00
 1123 0b2d 488B55C8 		movq	-56(%rbp), %rdx
 1124 0b31 488B08   		movq	(%rax), %rcx
 1125 0b34 488B5808 		movq	8(%rax), %rbx
 1126 0b38 48890A   		movq	%rcx, (%rdx)
 1127 0b3b 48895A08 		movq	%rbx, 8(%rdx)
 1128 0b3f 488B4810 		movq	16(%rax), %rcx
 1129 0b43 48894A10 		movq	%rcx, 16(%rdx)
GAS LISTING /tmp/ccLuEY1O.s 			page 43


 1130 0b47 8B4818   		movl	24(%rax), %ecx
 1131 0b4a 894A18   		movl	%ecx, 24(%rdx)
 1132 0b4d 0FB7481C 		movzwl	28(%rax), %ecx
 1133 0b51 66894A1C 		movw	%cx, 28(%rdx)
 1134 0b55 0FB6401E 		movzbl	30(%rax), %eax
 1135 0b59 88421E   		movb	%al, 30(%rdx)
 1136 0b5c E9ED0400 		jmp	.L163
 1136      00
 1137              	.L59:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1138              		.loc 2 447 13 discriminator 67
 1139 0b61 488D3D00 		leaq	g_allFF(%rip), %rdi
 1139      000000
 1140 0b68 E8000000 		call	SecStrictAliasingCast
 1140      00
 1141 0b6d 4889C1   		movq	%rax, %rcx
 1142 0b70 488B75C8 		movq	-56(%rbp), %rsi
 1143 0b74 488B01   		movq	(%rcx), %rax
 1144 0b77 488B5108 		movq	8(%rcx), %rdx
 1145 0b7b 488906   		movq	%rax, (%rsi)
 1146 0b7e 48895608 		movq	%rdx, 8(%rsi)
 1147 0b82 488B4110 		movq	16(%rcx), %rax
 1148 0b86 488B5118 		movq	24(%rcx), %rdx
 1149 0b8a 48894610 		movq	%rax, 16(%rsi)
 1150 0b8e 48895618 		movq	%rdx, 24(%rsi)
 1151 0b92 E9B70400 		jmp	.L163
 1151      00
 1152              	.L162:
 1153              	.LBB2:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1154              		.loc 2 447 13 discriminator 1
 1155 0b97 488B45C8 		movq	-56(%rbp), %rax
 1156 0b9b 488945D8 		movq	%rax, -40(%rbp)
 1157 0b9f 48837DB8 		cmpq	$32, -72(%rbp)
 1157      20
 1158 0ba4 0F87A704 		ja	.L164
 1158      0000
 1159 0baa 488B45B8 		movq	-72(%rbp), %rax
 1160 0bae 488D1485 		leaq	0(,%rax,4), %rdx
 1160      00000000 
 1161 0bb6 488D0500 		leaq	.L94(%rip), %rax
 1161      000000
 1162 0bbd 8B0402   		movl	(%rdx,%rax), %eax
 1163 0bc0 4898     		cltq
 1164 0bc2 488D1500 		leaq	.L94(%rip), %rdx
 1164      000000
 1165 0bc9 4801D0   		addq	%rdx, %rax
 1166 0bcc 3EFFE0   		notrack jmp	*%rax
 1167              		.section	.rodata.SecDoMemsetOpt
 1168              		.align 4
 1169              		.align 4
 1170              	.L94:
 1171 0108 00000000 		.long	.L164-.L94
 1172 010c 00000000 		.long	.L125-.L94
 1173 0110 00000000 		.long	.L124-.L94
 1174 0114 00000000 		.long	.L123-.L94
 1175 0118 00000000 		.long	.L122-.L94
GAS LISTING /tmp/ccLuEY1O.s 			page 44


 1176 011c 00000000 		.long	.L121-.L94
 1177 0120 00000000 		.long	.L120-.L94
 1178 0124 00000000 		.long	.L119-.L94
 1179 0128 00000000 		.long	.L118-.L94
 1180 012c 00000000 		.long	.L117-.L94
 1181 0130 00000000 		.long	.L116-.L94
 1182 0134 00000000 		.long	.L115-.L94
 1183 0138 00000000 		.long	.L114-.L94
 1184 013c 00000000 		.long	.L113-.L94
 1185 0140 00000000 		.long	.L112-.L94
 1186 0144 00000000 		.long	.L111-.L94
 1187 0148 00000000 		.long	.L110-.L94
 1188 014c 00000000 		.long	.L109-.L94
 1189 0150 00000000 		.long	.L108-.L94
 1190 0154 00000000 		.long	.L107-.L94
 1191 0158 00000000 		.long	.L106-.L94
 1192 015c 00000000 		.long	.L105-.L94
 1193 0160 00000000 		.long	.L104-.L94
 1194 0164 00000000 		.long	.L103-.L94
 1195 0168 00000000 		.long	.L102-.L94
 1196 016c 00000000 		.long	.L101-.L94
 1197 0170 00000000 		.long	.L100-.L94
 1198 0174 00000000 		.long	.L99-.L94
 1199 0178 00000000 		.long	.L98-.L94
 1200 017c 00000000 		.long	.L97-.L94
 1201 0180 00000000 		.long	.L96-.L94
 1202 0184 00000000 		.long	.L95-.L94
 1203 0188 00000000 		.long	.L93-.L94
 1204              		.section	.text.SecDoMemsetOpt
 1205              	.L93:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1206              		.loc 2 447 13
 1207 0bcf 488B45D8 		movq	-40(%rbp), %rax
 1208 0bd3 488D5001 		leaq	1(%rax), %rdx
 1209 0bd7 488955D8 		movq	%rdx, -40(%rbp)
 1210 0bdb 8B55C4   		movl	-60(%rbp), %edx
 1211 0bde 8810     		movb	%dl, (%rax)
 1212              	.L95:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1213              		.loc 2 447 13 discriminator 70
 1214 0be0 488B45D8 		movq	-40(%rbp), %rax
 1215 0be4 488D5001 		leaq	1(%rax), %rdx
 1216 0be8 488955D8 		movq	%rdx, -40(%rbp)
 1217 0bec 8B55C4   		movl	-60(%rbp), %edx
 1218 0bef 8810     		movb	%dl, (%rax)
 1219              	.L96:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1220              		.loc 2 447 13 discriminator 71
 1221 0bf1 488B45D8 		movq	-40(%rbp), %rax
 1222 0bf5 488D5001 		leaq	1(%rax), %rdx
 1223 0bf9 488955D8 		movq	%rdx, -40(%rbp)
 1224 0bfd 8B55C4   		movl	-60(%rbp), %edx
 1225 0c00 8810     		movb	%dl, (%rax)
 1226              	.L97:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1227              		.loc 2 447 13 discriminator 72
 1228 0c02 488B45D8 		movq	-40(%rbp), %rax
GAS LISTING /tmp/ccLuEY1O.s 			page 45


 1229 0c06 488D5001 		leaq	1(%rax), %rdx
 1230 0c0a 488955D8 		movq	%rdx, -40(%rbp)
 1231 0c0e 8B55C4   		movl	-60(%rbp), %edx
 1232 0c11 8810     		movb	%dl, (%rax)
 1233              	.L98:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1234              		.loc 2 447 13 discriminator 73
 1235 0c13 488B45D8 		movq	-40(%rbp), %rax
 1236 0c17 488D5001 		leaq	1(%rax), %rdx
 1237 0c1b 488955D8 		movq	%rdx, -40(%rbp)
 1238 0c1f 8B55C4   		movl	-60(%rbp), %edx
 1239 0c22 8810     		movb	%dl, (%rax)
 1240              	.L99:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1241              		.loc 2 447 13 discriminator 74
 1242 0c24 488B45D8 		movq	-40(%rbp), %rax
 1243 0c28 488D5001 		leaq	1(%rax), %rdx
 1244 0c2c 488955D8 		movq	%rdx, -40(%rbp)
 1245 0c30 8B55C4   		movl	-60(%rbp), %edx
 1246 0c33 8810     		movb	%dl, (%rax)
 1247              	.L100:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1248              		.loc 2 447 13 discriminator 75
 1249 0c35 488B45D8 		movq	-40(%rbp), %rax
 1250 0c39 488D5001 		leaq	1(%rax), %rdx
 1251 0c3d 488955D8 		movq	%rdx, -40(%rbp)
 1252 0c41 8B55C4   		movl	-60(%rbp), %edx
 1253 0c44 8810     		movb	%dl, (%rax)
 1254              	.L101:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1255              		.loc 2 447 13 discriminator 76
 1256 0c46 488B45D8 		movq	-40(%rbp), %rax
 1257 0c4a 488D5001 		leaq	1(%rax), %rdx
 1258 0c4e 488955D8 		movq	%rdx, -40(%rbp)
 1259 0c52 8B55C4   		movl	-60(%rbp), %edx
 1260 0c55 8810     		movb	%dl, (%rax)
 1261              	.L102:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1262              		.loc 2 447 13 discriminator 77
 1263 0c57 488B45D8 		movq	-40(%rbp), %rax
 1264 0c5b 488D5001 		leaq	1(%rax), %rdx
 1265 0c5f 488955D8 		movq	%rdx, -40(%rbp)
 1266 0c63 8B55C4   		movl	-60(%rbp), %edx
 1267 0c66 8810     		movb	%dl, (%rax)
 1268              	.L103:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1269              		.loc 2 447 13 discriminator 78
 1270 0c68 488B45D8 		movq	-40(%rbp), %rax
 1271 0c6c 488D5001 		leaq	1(%rax), %rdx
 1272 0c70 488955D8 		movq	%rdx, -40(%rbp)
 1273 0c74 8B55C4   		movl	-60(%rbp), %edx
 1274 0c77 8810     		movb	%dl, (%rax)
 1275              	.L104:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1276              		.loc 2 447 13 discriminator 79
 1277 0c79 488B45D8 		movq	-40(%rbp), %rax
 1278 0c7d 488D5001 		leaq	1(%rax), %rdx
GAS LISTING /tmp/ccLuEY1O.s 			page 46


 1279 0c81 488955D8 		movq	%rdx, -40(%rbp)
 1280 0c85 8B55C4   		movl	-60(%rbp), %edx
 1281 0c88 8810     		movb	%dl, (%rax)
 1282              	.L105:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1283              		.loc 2 447 13 discriminator 80
 1284 0c8a 488B45D8 		movq	-40(%rbp), %rax
 1285 0c8e 488D5001 		leaq	1(%rax), %rdx
 1286 0c92 488955D8 		movq	%rdx, -40(%rbp)
 1287 0c96 8B55C4   		movl	-60(%rbp), %edx
 1288 0c99 8810     		movb	%dl, (%rax)
 1289              	.L106:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1290              		.loc 2 447 13 discriminator 81
 1291 0c9b 488B45D8 		movq	-40(%rbp), %rax
 1292 0c9f 488D5001 		leaq	1(%rax), %rdx
 1293 0ca3 488955D8 		movq	%rdx, -40(%rbp)
 1294 0ca7 8B55C4   		movl	-60(%rbp), %edx
 1295 0caa 8810     		movb	%dl, (%rax)
 1296              	.L107:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1297              		.loc 2 447 13 discriminator 82
 1298 0cac 488B45D8 		movq	-40(%rbp), %rax
 1299 0cb0 488D5001 		leaq	1(%rax), %rdx
 1300 0cb4 488955D8 		movq	%rdx, -40(%rbp)
 1301 0cb8 8B55C4   		movl	-60(%rbp), %edx
 1302 0cbb 8810     		movb	%dl, (%rax)
 1303              	.L108:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1304              		.loc 2 447 13 discriminator 83
 1305 0cbd 488B45D8 		movq	-40(%rbp), %rax
 1306 0cc1 488D5001 		leaq	1(%rax), %rdx
 1307 0cc5 488955D8 		movq	%rdx, -40(%rbp)
 1308 0cc9 8B55C4   		movl	-60(%rbp), %edx
 1309 0ccc 8810     		movb	%dl, (%rax)
 1310              	.L109:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1311              		.loc 2 447 13 discriminator 84
 1312 0cce 488B45D8 		movq	-40(%rbp), %rax
 1313 0cd2 488D5001 		leaq	1(%rax), %rdx
 1314 0cd6 488955D8 		movq	%rdx, -40(%rbp)
 1315 0cda 8B55C4   		movl	-60(%rbp), %edx
 1316 0cdd 8810     		movb	%dl, (%rax)
 1317              	.L110:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1318              		.loc 2 447 13 discriminator 85
 1319 0cdf 488B45D8 		movq	-40(%rbp), %rax
 1320 0ce3 488D5001 		leaq	1(%rax), %rdx
 1321 0ce7 488955D8 		movq	%rdx, -40(%rbp)
 1322 0ceb 8B55C4   		movl	-60(%rbp), %edx
 1323 0cee 8810     		movb	%dl, (%rax)
 1324              	.L111:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1325              		.loc 2 447 13 discriminator 86
 1326 0cf0 488B45D8 		movq	-40(%rbp), %rax
 1327 0cf4 488D5001 		leaq	1(%rax), %rdx
 1328 0cf8 488955D8 		movq	%rdx, -40(%rbp)
GAS LISTING /tmp/ccLuEY1O.s 			page 47


 1329 0cfc 8B55C4   		movl	-60(%rbp), %edx
 1330 0cff 8810     		movb	%dl, (%rax)
 1331              	.L112:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1332              		.loc 2 447 13 discriminator 87
 1333 0d01 488B45D8 		movq	-40(%rbp), %rax
 1334 0d05 488D5001 		leaq	1(%rax), %rdx
 1335 0d09 488955D8 		movq	%rdx, -40(%rbp)
 1336 0d0d 8B55C4   		movl	-60(%rbp), %edx
 1337 0d10 8810     		movb	%dl, (%rax)
 1338              	.L113:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1339              		.loc 2 447 13 discriminator 88
 1340 0d12 488B45D8 		movq	-40(%rbp), %rax
 1341 0d16 488D5001 		leaq	1(%rax), %rdx
 1342 0d1a 488955D8 		movq	%rdx, -40(%rbp)
 1343 0d1e 8B55C4   		movl	-60(%rbp), %edx
 1344 0d21 8810     		movb	%dl, (%rax)
 1345              	.L114:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1346              		.loc 2 447 13 discriminator 89
 1347 0d23 488B45D8 		movq	-40(%rbp), %rax
 1348 0d27 488D5001 		leaq	1(%rax), %rdx
 1349 0d2b 488955D8 		movq	%rdx, -40(%rbp)
 1350 0d2f 8B55C4   		movl	-60(%rbp), %edx
 1351 0d32 8810     		movb	%dl, (%rax)
 1352              	.L115:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1353              		.loc 2 447 13 discriminator 90
 1354 0d34 488B45D8 		movq	-40(%rbp), %rax
 1355 0d38 488D5001 		leaq	1(%rax), %rdx
 1356 0d3c 488955D8 		movq	%rdx, -40(%rbp)
 1357 0d40 8B55C4   		movl	-60(%rbp), %edx
 1358 0d43 8810     		movb	%dl, (%rax)
 1359              	.L116:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1360              		.loc 2 447 13 discriminator 91
 1361 0d45 488B45D8 		movq	-40(%rbp), %rax
 1362 0d49 488D5001 		leaq	1(%rax), %rdx
 1363 0d4d 488955D8 		movq	%rdx, -40(%rbp)
 1364 0d51 8B55C4   		movl	-60(%rbp), %edx
 1365 0d54 8810     		movb	%dl, (%rax)
 1366              	.L117:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1367              		.loc 2 447 13 discriminator 92
 1368 0d56 488B45D8 		movq	-40(%rbp), %rax
 1369 0d5a 488D5001 		leaq	1(%rax), %rdx
 1370 0d5e 488955D8 		movq	%rdx, -40(%rbp)
 1371 0d62 8B55C4   		movl	-60(%rbp), %edx
 1372 0d65 8810     		movb	%dl, (%rax)
 1373              	.L118:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1374              		.loc 2 447 13 discriminator 93
 1375 0d67 488B45D8 		movq	-40(%rbp), %rax
 1376 0d6b 488D5001 		leaq	1(%rax), %rdx
 1377 0d6f 488955D8 		movq	%rdx, -40(%rbp)
 1378 0d73 8B55C4   		movl	-60(%rbp), %edx
GAS LISTING /tmp/ccLuEY1O.s 			page 48


 1379 0d76 8810     		movb	%dl, (%rax)
 1380              	.L119:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1381              		.loc 2 447 13 discriminator 94
 1382 0d78 488B45D8 		movq	-40(%rbp), %rax
 1383 0d7c 488D5001 		leaq	1(%rax), %rdx
 1384 0d80 488955D8 		movq	%rdx, -40(%rbp)
 1385 0d84 8B55C4   		movl	-60(%rbp), %edx
 1386 0d87 8810     		movb	%dl, (%rax)
 1387              	.L120:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1388              		.loc 2 447 13 discriminator 95
 1389 0d89 488B45D8 		movq	-40(%rbp), %rax
 1390 0d8d 488D5001 		leaq	1(%rax), %rdx
 1391 0d91 488955D8 		movq	%rdx, -40(%rbp)
 1392 0d95 8B55C4   		movl	-60(%rbp), %edx
 1393 0d98 8810     		movb	%dl, (%rax)
 1394              	.L121:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1395              		.loc 2 447 13 discriminator 96
 1396 0d9a 488B45D8 		movq	-40(%rbp), %rax
 1397 0d9e 488D5001 		leaq	1(%rax), %rdx
 1398 0da2 488955D8 		movq	%rdx, -40(%rbp)
 1399 0da6 8B55C4   		movl	-60(%rbp), %edx
 1400 0da9 8810     		movb	%dl, (%rax)
 1401              	.L122:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1402              		.loc 2 447 13 discriminator 97
 1403 0dab 488B45D8 		movq	-40(%rbp), %rax
 1404 0daf 488D5001 		leaq	1(%rax), %rdx
 1405 0db3 488955D8 		movq	%rdx, -40(%rbp)
 1406 0db7 8B55C4   		movl	-60(%rbp), %edx
 1407 0dba 8810     		movb	%dl, (%rax)
 1408              	.L123:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1409              		.loc 2 447 13 discriminator 98
 1410 0dbc 488B45D8 		movq	-40(%rbp), %rax
 1411 0dc0 488D5001 		leaq	1(%rax), %rdx
 1412 0dc4 488955D8 		movq	%rdx, -40(%rbp)
 1413 0dc8 8B55C4   		movl	-60(%rbp), %edx
 1414 0dcb 8810     		movb	%dl, (%rax)
 1415              	.L124:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1416              		.loc 2 447 13 discriminator 99
 1417 0dcd 488B45D8 		movq	-40(%rbp), %rax
 1418 0dd1 488D5001 		leaq	1(%rax), %rdx
 1419 0dd5 488955D8 		movq	%rdx, -40(%rbp)
 1420 0dd9 8B55C4   		movl	-60(%rbp), %edx
 1421 0ddc 8810     		movb	%dl, (%rax)
 1422              	.L125:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1423              		.loc 2 447 13 discriminator 100
 1424 0dde 488B45D8 		movq	-40(%rbp), %rax
 1425 0de2 488D5001 		leaq	1(%rax), %rdx
 1426 0de6 488955D8 		movq	%rdx, -40(%rbp)
 1427 0dea 8B55C4   		movl	-60(%rbp), %edx
 1428 0ded 8810     		movb	%dl, (%rax)
GAS LISTING /tmp/ccLuEY1O.s 			page 49


 1429 0def E95D0200 		jmp	.L164
 1429      00
 1430              	.L19:
 1431              	.LBE2:
 1432              	.LBB3:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1433              		.loc 2 449 13 is_stmt 1
 1434 0df4 488B45C8 		movq	-56(%rbp), %rax
 1435 0df8 488945E0 		movq	%rax, -32(%rbp)
 1436 0dfc 48837DB8 		cmpq	$32, -72(%rbp)
 1436      20
 1437 0e01 0F874D02 		ja	.L165
 1437      0000
 1438 0e07 488B45B8 		movq	-72(%rbp), %rax
 1439 0e0b 488D1485 		leaq	0(,%rax,4), %rdx
 1439      00000000 
 1440 0e13 488D0500 		leaq	.L128(%rip), %rax
 1440      000000
 1441 0e1a 8B0402   		movl	(%rdx,%rax), %eax
 1442 0e1d 4898     		cltq
 1443 0e1f 488D1500 		leaq	.L128(%rip), %rdx
 1443      000000
 1444 0e26 4801D0   		addq	%rdx, %rax
 1445 0e29 3EFFE0   		notrack jmp	*%rax
 1446              		.section	.rodata.SecDoMemsetOpt
 1447              		.align 4
 1448              		.align 4
 1449              	.L128:
 1450 018c 00000000 		.long	.L165-.L128
 1451 0190 00000000 		.long	.L159-.L128
 1452 0194 00000000 		.long	.L158-.L128
 1453 0198 00000000 		.long	.L157-.L128
 1454 019c 00000000 		.long	.L156-.L128
 1455 01a0 00000000 		.long	.L155-.L128
 1456 01a4 00000000 		.long	.L154-.L128
 1457 01a8 00000000 		.long	.L153-.L128
 1458 01ac 00000000 		.long	.L152-.L128
 1459 01b0 00000000 		.long	.L151-.L128
 1460 01b4 00000000 		.long	.L150-.L128
 1461 01b8 00000000 		.long	.L149-.L128
 1462 01bc 00000000 		.long	.L148-.L128
 1463 01c0 00000000 		.long	.L147-.L128
 1464 01c4 00000000 		.long	.L146-.L128
 1465 01c8 00000000 		.long	.L145-.L128
 1466 01cc 00000000 		.long	.L144-.L128
 1467 01d0 00000000 		.long	.L143-.L128
 1468 01d4 00000000 		.long	.L142-.L128
 1469 01d8 00000000 		.long	.L141-.L128
 1470 01dc 00000000 		.long	.L140-.L128
 1471 01e0 00000000 		.long	.L139-.L128
 1472 01e4 00000000 		.long	.L138-.L128
 1473 01e8 00000000 		.long	.L137-.L128
 1474 01ec 00000000 		.long	.L136-.L128
 1475 01f0 00000000 		.long	.L135-.L128
 1476 01f4 00000000 		.long	.L134-.L128
 1477 01f8 00000000 		.long	.L133-.L128
 1478 01fc 00000000 		.long	.L132-.L128
GAS LISTING /tmp/ccLuEY1O.s 			page 50


 1479 0200 00000000 		.long	.L131-.L128
 1480 0204 00000000 		.long	.L130-.L128
 1481 0208 00000000 		.long	.L129-.L128
 1482 020c 00000000 		.long	.L127-.L128
 1483              		.section	.text.SecDoMemsetOpt
 1484              	.L127:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1485              		.loc 2 449 13 is_stmt 0 discriminator 33
 1486 0e2c 488B45E0 		movq	-32(%rbp), %rax
 1487 0e30 488D5001 		leaq	1(%rax), %rdx
 1488 0e34 488955E0 		movq	%rdx, -32(%rbp)
 1489 0e38 8B55C4   		movl	-60(%rbp), %edx
 1490 0e3b 8810     		movb	%dl, (%rax)
 1491              	.L129:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1492              		.loc 2 449 13 discriminator 34
 1493 0e3d 488B45E0 		movq	-32(%rbp), %rax
 1494 0e41 488D5001 		leaq	1(%rax), %rdx
 1495 0e45 488955E0 		movq	%rdx, -32(%rbp)
 1496 0e49 8B55C4   		movl	-60(%rbp), %edx
 1497 0e4c 8810     		movb	%dl, (%rax)
 1498              	.L130:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1499              		.loc 2 449 13 discriminator 35
 1500 0e4e 488B45E0 		movq	-32(%rbp), %rax
 1501 0e52 488D5001 		leaq	1(%rax), %rdx
 1502 0e56 488955E0 		movq	%rdx, -32(%rbp)
 1503 0e5a 8B55C4   		movl	-60(%rbp), %edx
 1504 0e5d 8810     		movb	%dl, (%rax)
 1505              	.L131:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1506              		.loc 2 449 13 discriminator 36
 1507 0e5f 488B45E0 		movq	-32(%rbp), %rax
 1508 0e63 488D5001 		leaq	1(%rax), %rdx
 1509 0e67 488955E0 		movq	%rdx, -32(%rbp)
 1510 0e6b 8B55C4   		movl	-60(%rbp), %edx
 1511 0e6e 8810     		movb	%dl, (%rax)
 1512              	.L132:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1513              		.loc 2 449 13 discriminator 37
 1514 0e70 488B45E0 		movq	-32(%rbp), %rax
 1515 0e74 488D5001 		leaq	1(%rax), %rdx
 1516 0e78 488955E0 		movq	%rdx, -32(%rbp)
 1517 0e7c 8B55C4   		movl	-60(%rbp), %edx
 1518 0e7f 8810     		movb	%dl, (%rax)
 1519              	.L133:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1520              		.loc 2 449 13 discriminator 38
 1521 0e81 488B45E0 		movq	-32(%rbp), %rax
 1522 0e85 488D5001 		leaq	1(%rax), %rdx
 1523 0e89 488955E0 		movq	%rdx, -32(%rbp)
 1524 0e8d 8B55C4   		movl	-60(%rbp), %edx
 1525 0e90 8810     		movb	%dl, (%rax)
 1526              	.L134:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1527              		.loc 2 449 13 discriminator 39
 1528 0e92 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccLuEY1O.s 			page 51


 1529 0e96 488D5001 		leaq	1(%rax), %rdx
 1530 0e9a 488955E0 		movq	%rdx, -32(%rbp)
 1531 0e9e 8B55C4   		movl	-60(%rbp), %edx
 1532 0ea1 8810     		movb	%dl, (%rax)
 1533              	.L135:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1534              		.loc 2 449 13 discriminator 40
 1535 0ea3 488B45E0 		movq	-32(%rbp), %rax
 1536 0ea7 488D5001 		leaq	1(%rax), %rdx
 1537 0eab 488955E0 		movq	%rdx, -32(%rbp)
 1538 0eaf 8B55C4   		movl	-60(%rbp), %edx
 1539 0eb2 8810     		movb	%dl, (%rax)
 1540              	.L136:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1541              		.loc 2 449 13 discriminator 41
 1542 0eb4 488B45E0 		movq	-32(%rbp), %rax
 1543 0eb8 488D5001 		leaq	1(%rax), %rdx
 1544 0ebc 488955E0 		movq	%rdx, -32(%rbp)
 1545 0ec0 8B55C4   		movl	-60(%rbp), %edx
 1546 0ec3 8810     		movb	%dl, (%rax)
 1547              	.L137:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1548              		.loc 2 449 13 discriminator 42
 1549 0ec5 488B45E0 		movq	-32(%rbp), %rax
 1550 0ec9 488D5001 		leaq	1(%rax), %rdx
 1551 0ecd 488955E0 		movq	%rdx, -32(%rbp)
 1552 0ed1 8B55C4   		movl	-60(%rbp), %edx
 1553 0ed4 8810     		movb	%dl, (%rax)
 1554              	.L138:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1555              		.loc 2 449 13 discriminator 43
 1556 0ed6 488B45E0 		movq	-32(%rbp), %rax
 1557 0eda 488D5001 		leaq	1(%rax), %rdx
 1558 0ede 488955E0 		movq	%rdx, -32(%rbp)
 1559 0ee2 8B55C4   		movl	-60(%rbp), %edx
 1560 0ee5 8810     		movb	%dl, (%rax)
 1561              	.L139:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1562              		.loc 2 449 13 discriminator 44
 1563 0ee7 488B45E0 		movq	-32(%rbp), %rax
 1564 0eeb 488D5001 		leaq	1(%rax), %rdx
 1565 0eef 488955E0 		movq	%rdx, -32(%rbp)
 1566 0ef3 8B55C4   		movl	-60(%rbp), %edx
 1567 0ef6 8810     		movb	%dl, (%rax)
 1568              	.L140:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1569              		.loc 2 449 13 discriminator 45
 1570 0ef8 488B45E0 		movq	-32(%rbp), %rax
 1571 0efc 488D5001 		leaq	1(%rax), %rdx
 1572 0f00 488955E0 		movq	%rdx, -32(%rbp)
 1573 0f04 8B55C4   		movl	-60(%rbp), %edx
 1574 0f07 8810     		movb	%dl, (%rax)
 1575              	.L141:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1576              		.loc 2 449 13 discriminator 46
 1577 0f09 488B45E0 		movq	-32(%rbp), %rax
 1578 0f0d 488D5001 		leaq	1(%rax), %rdx
GAS LISTING /tmp/ccLuEY1O.s 			page 52


 1579 0f11 488955E0 		movq	%rdx, -32(%rbp)
 1580 0f15 8B55C4   		movl	-60(%rbp), %edx
 1581 0f18 8810     		movb	%dl, (%rax)
 1582              	.L142:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1583              		.loc 2 449 13 discriminator 47
 1584 0f1a 488B45E0 		movq	-32(%rbp), %rax
 1585 0f1e 488D5001 		leaq	1(%rax), %rdx
 1586 0f22 488955E0 		movq	%rdx, -32(%rbp)
 1587 0f26 8B55C4   		movl	-60(%rbp), %edx
 1588 0f29 8810     		movb	%dl, (%rax)
 1589              	.L143:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1590              		.loc 2 449 13 discriminator 48
 1591 0f2b 488B45E0 		movq	-32(%rbp), %rax
 1592 0f2f 488D5001 		leaq	1(%rax), %rdx
 1593 0f33 488955E0 		movq	%rdx, -32(%rbp)
 1594 0f37 8B55C4   		movl	-60(%rbp), %edx
 1595 0f3a 8810     		movb	%dl, (%rax)
 1596              	.L144:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1597              		.loc 2 449 13 discriminator 49
 1598 0f3c 488B45E0 		movq	-32(%rbp), %rax
 1599 0f40 488D5001 		leaq	1(%rax), %rdx
 1600 0f44 488955E0 		movq	%rdx, -32(%rbp)
 1601 0f48 8B55C4   		movl	-60(%rbp), %edx
 1602 0f4b 8810     		movb	%dl, (%rax)
 1603              	.L145:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1604              		.loc 2 449 13 discriminator 50
 1605 0f4d 488B45E0 		movq	-32(%rbp), %rax
 1606 0f51 488D5001 		leaq	1(%rax), %rdx
 1607 0f55 488955E0 		movq	%rdx, -32(%rbp)
 1608 0f59 8B55C4   		movl	-60(%rbp), %edx
 1609 0f5c 8810     		movb	%dl, (%rax)
 1610              	.L146:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1611              		.loc 2 449 13 discriminator 51
 1612 0f5e 488B45E0 		movq	-32(%rbp), %rax
 1613 0f62 488D5001 		leaq	1(%rax), %rdx
 1614 0f66 488955E0 		movq	%rdx, -32(%rbp)
 1615 0f6a 8B55C4   		movl	-60(%rbp), %edx
 1616 0f6d 8810     		movb	%dl, (%rax)
 1617              	.L147:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1618              		.loc 2 449 13 discriminator 52
 1619 0f6f 488B45E0 		movq	-32(%rbp), %rax
 1620 0f73 488D5001 		leaq	1(%rax), %rdx
 1621 0f77 488955E0 		movq	%rdx, -32(%rbp)
 1622 0f7b 8B55C4   		movl	-60(%rbp), %edx
 1623 0f7e 8810     		movb	%dl, (%rax)
 1624              	.L148:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1625              		.loc 2 449 13 discriminator 53
 1626 0f80 488B45E0 		movq	-32(%rbp), %rax
 1627 0f84 488D5001 		leaq	1(%rax), %rdx
 1628 0f88 488955E0 		movq	%rdx, -32(%rbp)
GAS LISTING /tmp/ccLuEY1O.s 			page 53


 1629 0f8c 8B55C4   		movl	-60(%rbp), %edx
 1630 0f8f 8810     		movb	%dl, (%rax)
 1631              	.L149:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1632              		.loc 2 449 13 discriminator 54
 1633 0f91 488B45E0 		movq	-32(%rbp), %rax
 1634 0f95 488D5001 		leaq	1(%rax), %rdx
 1635 0f99 488955E0 		movq	%rdx, -32(%rbp)
 1636 0f9d 8B55C4   		movl	-60(%rbp), %edx
 1637 0fa0 8810     		movb	%dl, (%rax)
 1638              	.L150:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1639              		.loc 2 449 13 discriminator 55
 1640 0fa2 488B45E0 		movq	-32(%rbp), %rax
 1641 0fa6 488D5001 		leaq	1(%rax), %rdx
 1642 0faa 488955E0 		movq	%rdx, -32(%rbp)
 1643 0fae 8B55C4   		movl	-60(%rbp), %edx
 1644 0fb1 8810     		movb	%dl, (%rax)
 1645              	.L151:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1646              		.loc 2 449 13 discriminator 56
 1647 0fb3 488B45E0 		movq	-32(%rbp), %rax
 1648 0fb7 488D5001 		leaq	1(%rax), %rdx
 1649 0fbb 488955E0 		movq	%rdx, -32(%rbp)
 1650 0fbf 8B55C4   		movl	-60(%rbp), %edx
 1651 0fc2 8810     		movb	%dl, (%rax)
 1652              	.L152:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1653              		.loc 2 449 13 discriminator 57
 1654 0fc4 488B45E0 		movq	-32(%rbp), %rax
 1655 0fc8 488D5001 		leaq	1(%rax), %rdx
 1656 0fcc 488955E0 		movq	%rdx, -32(%rbp)
 1657 0fd0 8B55C4   		movl	-60(%rbp), %edx
 1658 0fd3 8810     		movb	%dl, (%rax)
 1659              	.L153:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1660              		.loc 2 449 13 discriminator 58
 1661 0fd5 488B45E0 		movq	-32(%rbp), %rax
 1662 0fd9 488D5001 		leaq	1(%rax), %rdx
 1663 0fdd 488955E0 		movq	%rdx, -32(%rbp)
 1664 0fe1 8B55C4   		movl	-60(%rbp), %edx
 1665 0fe4 8810     		movb	%dl, (%rax)
 1666              	.L154:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1667              		.loc 2 449 13 discriminator 59
 1668 0fe6 488B45E0 		movq	-32(%rbp), %rax
 1669 0fea 488D5001 		leaq	1(%rax), %rdx
 1670 0fee 488955E0 		movq	%rdx, -32(%rbp)
 1671 0ff2 8B55C4   		movl	-60(%rbp), %edx
 1672 0ff5 8810     		movb	%dl, (%rax)
 1673              	.L155:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1674              		.loc 2 449 13 discriminator 60
 1675 0ff7 488B45E0 		movq	-32(%rbp), %rax
 1676 0ffb 488D5001 		leaq	1(%rax), %rdx
 1677 0fff 488955E0 		movq	%rdx, -32(%rbp)
 1678 1003 8B55C4   		movl	-60(%rbp), %edx
GAS LISTING /tmp/ccLuEY1O.s 			page 54


 1679 1006 8810     		movb	%dl, (%rax)
 1680              	.L156:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1681              		.loc 2 449 13 discriminator 61
 1682 1008 488B45E0 		movq	-32(%rbp), %rax
 1683 100c 488D5001 		leaq	1(%rax), %rdx
 1684 1010 488955E0 		movq	%rdx, -32(%rbp)
 1685 1014 8B55C4   		movl	-60(%rbp), %edx
 1686 1017 8810     		movb	%dl, (%rax)
 1687              	.L157:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1688              		.loc 2 449 13 discriminator 62
 1689 1019 488B45E0 		movq	-32(%rbp), %rax
 1690 101d 488D5001 		leaq	1(%rax), %rdx
 1691 1021 488955E0 		movq	%rdx, -32(%rbp)
 1692 1025 8B55C4   		movl	-60(%rbp), %edx
 1693 1028 8810     		movb	%dl, (%rax)
 1694              	.L158:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1695              		.loc 2 449 13 discriminator 63
 1696 102a 488B45E0 		movq	-32(%rbp), %rax
 1697 102e 488D5001 		leaq	1(%rax), %rdx
 1698 1032 488955E0 		movq	%rdx, -32(%rbp)
 1699 1036 8B55C4   		movl	-60(%rbp), %edx
 1700 1039 8810     		movb	%dl, (%rax)
 1701              	.L159:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1702              		.loc 2 449 13 discriminator 64
 1703 103b 488B45E0 		movq	-32(%rbp), %rax
 1704 103f 488D5001 		leaq	1(%rax), %rdx
 1705 1043 488955E0 		movq	%rdx, -32(%rbp)
 1706 1047 8B55C4   		movl	-60(%rbp), %edx
 1707 104a 8810     		movb	%dl, (%rax)
 1708 104c EB06     		jmp	.L165
 1709              	.L163:
 1710              	.LBE3:
 447:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         } else {
 1711              		.loc 2 447 13 is_stmt 1
 1712 104e 90       		nop
 1713 104f EB04     		jmp	.L18
 1714              	.L164:
 1715              	.LBB4:
 1716 1051 90       		nop
 1717 1052 EB01     		jmp	.L18
 1718              	.L165:
 1719              	.LBE4:
 1720              	.LBB5:
 449:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         }
 1721              		.loc 2 449 13
 1722 1054 90       		nop
 1723              	.L18:
 1724              	.LBE5:
 1725              		.loc 2 452 5 discriminator 66
 1726 1055 90       		nop
 1727              	.L16:
 453:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
 1728              		.loc 2 453 1
GAS LISTING /tmp/ccLuEY1O.s 			page 55


 1729 1056 488B45E8 		movq	-24(%rbp), %rax
 1730 105a 64483304 		xorq	%fs:40, %rax
 1730      25280000 
 1730      00
 1731 1063 7405     		je	.L161
 1732 1065 E8000000 		call	__stack_chk_fail@PLT
 1732      00
 1733              	.L161:
 1734 106a 4883C448 		addq	$72, %rsp
 1735 106e 5B       		popq	%rbx
 1736 106f 5D       		popq	%rbp
 1737              	.LCFI14:
 1738              		.cfi_def_cfa 7, 8
 1739 1070 C3       		ret
 1740              		.cfi_endproc
 1741              	.LFE10:
 1743              		.section	.text.memset_s,"ax",@progbits
 1744              		.globl	memset_s
 1746              	memset_s:
 1747              	.LFB11:
 454:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #endif
 455:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 456:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
 457:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * <FUNCTION DESCRIPTION>
 458:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    The memset_s function copies the value of c (converted to an unsigned char)
 459:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *     into each of the first count characters of the object pointed to by dest.
 460:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
 461:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * <INPUT PARAMETERS>
 462:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    dest                           Pointer to destination.
 463:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    destMax                     The size of the buffer.
 464:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    c                               Character to set.
 465:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    count                          Number of characters.
 466:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
 467:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * <OUTPUT PARAMETERS>
 468:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    dest buffer                   is uptdated.
 469:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
 470:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * <RETURN VALUE>
 471:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    EOK                            Success
 472:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    EINVAL                        dest == NULL and destMax != 0 and destMax <= SECUREC_MEM_MAX_LE
 473:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    ERANGE                       destMax is  0 or destMax > SECUREC_MEM_MAX_LEN
 474:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    ERANGE_AND_RESET    count > destMax and destMax != 0 and destMax <= SECUREC_MEM_MAX_LEN and d
 475:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *
 476:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  *    if return ERANGE_AND_RESET then fill dest to c ,fill length is destMax
 477:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
 478:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** errno_t memset_s(void *dest, size_t destMax, int c, size_t count)
 479:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
 1748              		.loc 2 479 1
 1749              		.cfi_startproc
 1750 0000 F30F1EFA 		endbr64
 1751 0004 55       		pushq	%rbp
 1752              	.LCFI15:
 1753              		.cfi_def_cfa_offset 16
 1754              		.cfi_offset 6, -16
 1755 0005 4889E5   		movq	%rsp, %rbp
 1756              	.LCFI16:
 1757              		.cfi_def_cfa_register 6
 1758 0008 4883EC30 		subq	$48, %rsp
GAS LISTING /tmp/ccLuEY1O.s 			page 56


 1759 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1760 0010 488975E0 		movq	%rsi, -32(%rbp)
 1761 0014 8955DC   		movl	%edx, -36(%rbp)
 1762 0017 48894DD0 		movq	%rcx, -48(%rbp)
 1763              		.loc 2 479 1
 1764 001b 64488B04 		movq	%fs:40, %rax
 1764      25280000 
 1764      00
 1765 0024 488945F8 		movq	%rax, -8(%rbp)
 1766 0028 31C0     		xorl	%eax, %eax
 480:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (SECUREC_MEMSET_PARAM_OK(dest, destMax, count)) {
 1767              		.loc 2 480 9
 1768 002a 488B45D0 		movq	-48(%rbp), %rax
 1769 002e 483B45E0 		cmpq	-32(%rbp), %rax
 1770 0032 0F96C0   		setbe	%al
 1771 0035 0FB6C0   		movzbl	%al, %eax
 1772              		.loc 2 480 8
 1773 0038 4885C0   		testq	%rax, %rax
 1774 003b 7417     		je	.L167
 1775              		.loc 2 480 9 discriminator 1
 1776 003d 48837DE8 		cmpq	$0, -24(%rbp)
 1776      00
 1777 0042 0F95C0   		setne	%al
 1778 0045 0FB6C0   		movzbl	%al, %eax
 1779              		.loc 2 480 8 discriminator 1
 1780 0048 4885C0   		testq	%rax, %rax
 1781 004b 7407     		je	.L167
 1782              		.loc 2 480 8 is_stmt 0 discriminator 3
 1783 004d B8010000 		movl	$1, %eax
 1783      00
 1784 0052 EB05     		jmp	.L168
 1785              	.L167:
 1786              		.loc 2 480 8 discriminator 4
 1787 0054 B8000000 		movl	$0, %eax
 1787      00
 1788              	.L168:
 1789              		.loc 2 480 8 discriminator 6
 1790 0059 85C0     		testl	%eax, %eax
 1791 005b 7430     		je	.L169
 1792              		.loc 2 480 9 is_stmt 1 discriminator 7
 1793 005d B8000000 		movl	$2147483648, %eax
 1793      80
 1794 0062 483945E0 		cmpq	%rax, -32(%rbp)
 1795 0066 0F92C0   		setb	%al
 1796 0069 0FB6C0   		movzbl	%al, %eax
 1797              		.loc 2 480 8 discriminator 7
 1798 006c 4885C0   		testq	%rax, %rax
 1799 006f 741C     		je	.L169
 481:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #if SECUREC_MEMSET_WITH_PERFORMANCE
 482:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SecDoMemsetOpt(dest, c, count);
 483:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #else
 484:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SecDoMemset(dest, c, count);
 1800              		.loc 2 484 9
 1801 0071 488B55D0 		movq	-48(%rbp), %rdx
 1802 0075 8B4DDC   		movl	-36(%rbp), %ecx
 1803 0078 488B45E8 		movq	-24(%rbp), %rax
 1804 007c 89CE     		movl	%ecx, %esi
GAS LISTING /tmp/ccLuEY1O.s 			page 57


 1805 007e 4889C7   		movq	%rax, %rdi
 1806 0081 E8000000 		call	SecDoMemset
 1806      00
 485:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #endif
 486:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return EOK;
 1807              		.loc 2 486 16
 1808 0086 B8000000 		movl	$0, %eax
 1808      00
 1809 008b EB17     		jmp	.L170
 1810              	.L169:
 487:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     } else {
 488:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         /* meet some runtime violation, return error code */
 489:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return SecMemsetError(dest, destMax, c, count);
 1811              		.loc 2 489 16
 1812 008d 488B4DD0 		movq	-48(%rbp), %rcx
 1813 0091 8B55DC   		movl	-36(%rbp), %edx
 1814 0094 488B75E0 		movq	-32(%rbp), %rsi
 1815 0098 488B45E8 		movq	-24(%rbp), %rax
 1816 009c 4889C7   		movq	%rax, %rdi
 1817 009f E8000000 		call	SecMemsetError
 1817      00
 1818              	.L170:
 490:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
 491:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
 1819              		.loc 2 491 1
 1820 00a4 488B7DF8 		movq	-8(%rbp), %rdi
 1821 00a8 6448333C 		xorq	%fs:40, %rdi
 1821      25280000 
 1821      00
 1822 00b1 7405     		je	.L171
 1823 00b3 E8000000 		call	__stack_chk_fail@PLT
 1823      00
 1824              	.L171:
 1825 00b8 C9       		leave
 1826              	.LCFI17:
 1827              		.cfi_def_cfa 7, 8
 1828 00b9 C3       		ret
 1829              		.cfi_endproc
 1830              	.LFE11:
 1832              		.section	.text.memset_sOptAsm,"ax",@progbits
 1833              		.globl	memset_sOptAsm
 1835              	memset_sOptAsm:
 1836              	.LFB12:
 492:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 493:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #if SECUREC_IN_KERNEL
 494:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** EXPORT_SYMBOL(memset_s);
 495:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #endif
 496:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 497:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** #if SECUREC_WITH_PERFORMANCE_ADDONS
 498:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
 499:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * Performance optimization
 500:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
 501:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** errno_t memset_sOptAsm(void *dest, size_t destMax, int c, size_t count)
 502:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
 1837              		.loc 2 502 1
 1838              		.cfi_startproc
 1839 0000 F30F1EFA 		endbr64
GAS LISTING /tmp/ccLuEY1O.s 			page 58


 1840 0004 55       		pushq	%rbp
 1841              	.LCFI18:
 1842              		.cfi_def_cfa_offset 16
 1843              		.cfi_offset 6, -16
 1844 0005 4889E5   		movq	%rsp, %rbp
 1845              	.LCFI19:
 1846              		.cfi_def_cfa_register 6
 1847 0008 4883EC30 		subq	$48, %rsp
 1848 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1849 0010 488975E0 		movq	%rsi, -32(%rbp)
 1850 0014 8955DC   		movl	%edx, -36(%rbp)
 1851 0017 48894DD0 		movq	%rcx, -48(%rbp)
 1852              		.loc 2 502 1
 1853 001b 64488B04 		movq	%fs:40, %rax
 1853      25280000 
 1853      00
 1854 0024 488945F8 		movq	%rax, -8(%rbp)
 1855 0028 31C0     		xorl	%eax, %eax
 503:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (SECUREC_MEMSET_PARAM_OK(dest, destMax, count)) {
 1856              		.loc 2 503 9
 1857 002a 488B45D0 		movq	-48(%rbp), %rax
 1858 002e 483B45E0 		cmpq	-32(%rbp), %rax
 1859 0032 0F96C0   		setbe	%al
 1860 0035 0FB6C0   		movzbl	%al, %eax
 1861              		.loc 2 503 8
 1862 0038 4885C0   		testq	%rax, %rax
 1863 003b 7417     		je	.L173
 1864              		.loc 2 503 9 discriminator 1
 1865 003d 48837DE8 		cmpq	$0, -24(%rbp)
 1865      00
 1866 0042 0F95C0   		setne	%al
 1867 0045 0FB6C0   		movzbl	%al, %eax
 1868              		.loc 2 503 8 discriminator 1
 1869 0048 4885C0   		testq	%rax, %rax
 1870 004b 7407     		je	.L173
 1871              		.loc 2 503 8 is_stmt 0 discriminator 3
 1872 004d B8010000 		movl	$1, %eax
 1872      00
 1873 0052 EB05     		jmp	.L174
 1874              	.L173:
 1875              		.loc 2 503 8 discriminator 4
 1876 0054 B8000000 		movl	$0, %eax
 1876      00
 1877              	.L174:
 1878              		.loc 2 503 8 discriminator 6
 1879 0059 85C0     		testl	%eax, %eax
 1880 005b 7430     		je	.L175
 1881              		.loc 2 503 9 is_stmt 1 discriminator 7
 1882 005d B8000000 		movl	$2147483648, %eax
 1882      80
 1883 0062 483945E0 		cmpq	%rax, -32(%rbp)
 1884 0066 0F92C0   		setb	%al
 1885 0069 0FB6C0   		movzbl	%al, %eax
 1886              		.loc 2 503 8 discriminator 7
 1887 006c 4885C0   		testq	%rax, %rax
 1888 006f 741C     		je	.L175
 504:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SecDoMemsetOpt(dest, c, count);
GAS LISTING /tmp/ccLuEY1O.s 			page 59


 1889              		.loc 2 504 9
 1890 0071 488B55D0 		movq	-48(%rbp), %rdx
 1891 0075 8B4DDC   		movl	-36(%rbp), %ecx
 1892 0078 488B45E8 		movq	-24(%rbp), %rax
 1893 007c 89CE     		movl	%ecx, %esi
 1894 007e 4889C7   		movq	%rax, %rdi
 1895 0081 E8000000 		call	SecDoMemsetOpt
 1895      00
 505:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return EOK;
 1896              		.loc 2 505 16
 1897 0086 B8000000 		movl	$0, %eax
 1897      00
 1898 008b EB17     		jmp	.L176
 1899              	.L175:
 506:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
 507:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     /* meet some runtime violation, return error code */
 508:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     return SecMemsetError(dest, destMax, c, count);
 1900              		.loc 2 508 12
 1901 008d 488B4DD0 		movq	-48(%rbp), %rcx
 1902 0091 8B55DC   		movl	-36(%rbp), %edx
 1903 0094 488B75E0 		movq	-32(%rbp), %rsi
 1904 0098 488B45E8 		movq	-24(%rbp), %rax
 1905 009c 4889C7   		movq	%rax, %rdi
 1906 009f E8000000 		call	SecMemsetError
 1906      00
 1907              	.L176:
 509:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
 1908              		.loc 2 509 1
 1909 00a4 488B7DF8 		movq	-8(%rbp), %rdi
 1910 00a8 6448333C 		xorq	%fs:40, %rdi
 1910      25280000 
 1910      00
 1911 00b1 7405     		je	.L177
 1912 00b3 E8000000 		call	__stack_chk_fail@PLT
 1912      00
 1913              	.L177:
 1914 00b8 C9       		leave
 1915              	.LCFI20:
 1916              		.cfi_def_cfa 7, 8
 1917 00b9 C3       		ret
 1918              		.cfi_endproc
 1919              	.LFE12:
 1921              		.section	.text.memset_sOptTc,"ax",@progbits
 1922              		.globl	memset_sOptTc
 1924              	memset_sOptTc:
 1925              	.LFB13:
 510:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** 
 511:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** /*
 512:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  * Performance optimization
 513:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****  */
 514:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** errno_t memset_sOptTc(void *dest, size_t destMax, int c, size_t count)
 515:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** {
 1926              		.loc 2 515 1
 1927              		.cfi_startproc
 1928 0000 F30F1EFA 		endbr64
 1929 0004 55       		pushq	%rbp
 1930              	.LCFI21:
GAS LISTING /tmp/ccLuEY1O.s 			page 60


 1931              		.cfi_def_cfa_offset 16
 1932              		.cfi_offset 6, -16
 1933 0005 4889E5   		movq	%rsp, %rbp
 1934              	.LCFI22:
 1935              		.cfi_def_cfa_register 6
 1936 0008 4883EC30 		subq	$48, %rsp
 1937 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1938 0010 488975E0 		movq	%rsi, -32(%rbp)
 1939 0014 8955DC   		movl	%edx, -36(%rbp)
 1940 0017 48894DD0 		movq	%rcx, -48(%rbp)
 1941              		.loc 2 515 1
 1942 001b 64488B04 		movq	%fs:40, %rax
 1942      25280000 
 1942      00
 1943 0024 488945F8 		movq	%rax, -8(%rbp)
 1944 0028 31C0     		xorl	%eax, %eax
 516:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     if (SECUREC_LIKELY(count <= destMax && dest != NULL)) {
 1945              		.loc 2 516 9
 1946 002a 488B45D0 		movq	-48(%rbp), %rax
 1947 002e 483B45E0 		cmpq	-32(%rbp), %rax
 1948 0032 0F96C0   		setbe	%al
 1949 0035 0FB6C0   		movzbl	%al, %eax
 1950              		.loc 2 516 8
 1951 0038 4885C0   		testq	%rax, %rax
 1952 003b 742C     		je	.L179
 1953              		.loc 2 516 9 discriminator 1
 1954 003d 48837DE8 		cmpq	$0, -24(%rbp)
 1954      00
 1955 0042 0F95C0   		setne	%al
 1956 0045 0FB6C0   		movzbl	%al, %eax
 1957              		.loc 2 516 8 discriminator 1
 1958 0048 4885C0   		testq	%rax, %rax
 1959 004b 741C     		je	.L179
 517:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         SecDoMemsetOpt(dest, c, count);
 1960              		.loc 2 517 9
 1961 004d 488B55D0 		movq	-48(%rbp), %rdx
 1962 0051 8B4DDC   		movl	-36(%rbp), %ecx
 1963 0054 488B45E8 		movq	-24(%rbp), %rax
 1964 0058 89CE     		movl	%ecx, %esi
 1965 005a 4889C7   		movq	%rax, %rdi
 1966 005d E8000000 		call	SecDoMemsetOpt
 1966      00
 518:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****         return EOK;
 1967              		.loc 2 518 16
 1968 0062 B8000000 		movl	$0, %eax
 1968      00
 1969 0067 EB17     		jmp	.L180
 1970              	.L179:
 519:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     }
 520:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     /* meet some runtime violation, return error code */
 521:/home/xingli/share/1205tiny/secure_c/src/memset_s.c ****     return SecMemsetError(dest, destMax, c, count);
 1971              		.loc 2 521 12
 1972 0069 488B4DD0 		movq	-48(%rbp), %rcx
 1973 006d 8B55DC   		movl	-36(%rbp), %edx
 1974 0070 488B75E0 		movq	-32(%rbp), %rsi
 1975 0074 488B45E8 		movq	-24(%rbp), %rax
 1976 0078 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/ccLuEY1O.s 			page 61


 1977 007b E8000000 		call	SecMemsetError
 1977      00
 1978              	.L180:
 522:/home/xingli/share/1205tiny/secure_c/src/memset_s.c **** }
 1979              		.loc 2 522 1
 1980 0080 488B7DF8 		movq	-8(%rbp), %rdi
 1981 0084 6448333C 		xorq	%fs:40, %rdi
 1981      25280000 
 1981      00
 1982 008d 7405     		je	.L181
 1983 008f E8000000 		call	__stack_chk_fail@PLT
 1983      00
 1984              	.L181:
 1985 0094 C9       		leave
 1986              	.LCFI23:
 1987              		.cfi_def_cfa 7, 8
 1988 0095 C3       		ret
 1989              		.cfi_endproc
 1990              	.LFE13:
 1992              		.text
 1993              	.Letext0:
 1994              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1995              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1996              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1997              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1998              		.file 7 "/usr/include/stdio.h"
 1999              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 2000              		.file 9 "/home/xingli/share/1205tiny/secure_c/include/securec.h"
 5060              		.section	.note.gnu.property,"a"
 5061              		.align 8
 5062 0000 04000000 		.long	 1f - 0f
 5063 0004 10000000 		.long	 4f - 1f
 5064 0008 05000000 		.long	 5
 5065              	0:
 5066 000c 474E5500 		.string	 "GNU"
 5067              	1:
 5068              		.align 8
 5069 0010 020000C0 		.long	 0xc0000002
 5070 0014 04000000 		.long	 3f - 2f
 5071              	2:
 5072 0018 03000000 		.long	 0x3
 5073              	3:
 5074 001c 00000000 		.align 8
 5075              	4:
GAS LISTING /tmp/ccLuEY1O.s 			page 62


DEFINED SYMBOLS
                            *ABS*:0000000000000000 memset_s.c
     /tmp/ccLuEY1O.s:6      .text.SecDoMemset:0000000000000000 SecDoMemset
     /tmp/ccLuEY1O.s:50     .text.SecIsAddrAligned8:0000000000000000 SecIsAddrAligned8
     /tmp/ccLuEY1O.s:92     .rodata.g_allZero:0000000000000000 g_allZero
     /tmp/ccLuEY1O.s:98     .rodata.g_allFF:0000000000000000 g_allFF
     /tmp/ccLuEY1O.s:104    .text.SecStrictAliasingCast:0000000000000000 SecStrictAliasingCast
     /tmp/ccLuEY1O.s:139    .text.SecMemsetError:0000000000000000 SecMemsetError
     /tmp/ccLuEY1O.s:212    .text.SecDoMemsetOpt:0000000000000000 SecDoMemsetOpt
     /tmp/ccLuEY1O.s:1746   .text.memset_s:0000000000000000 memset_s
     /tmp/ccLuEY1O.s:1835   .text.memset_sOptAsm:0000000000000000 memset_sOptAsm
     /tmp/ccLuEY1O.s:1924   .text.memset_sOptTc:0000000000000000 memset_sOptTc

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memset
__stack_chk_fail
