GAS LISTING /tmp/cc9FsUug.s 			page 1


   1              		.file	"wcstok_s.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.SecFindBeginW,"ax",@progbits
   6              	SecFindBeginW:
   7              	.LFB6:
   8              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c"
   1:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** 
  16:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** #include "securec.h"
  17:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** 
  18:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** /*
  19:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * FindBegin Wide character postion  function
  20:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  */
  21:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** static wchar_t *SecFindBeginW(wchar_t *strToken, const wchar_t *strDelimit)
  22:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** {
   9              		.loc 1 22 1
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              	.LCFI0:
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              	.LCFI1:
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DD8 		movq	%rdi, -40(%rbp)
  21 0010 488975D0 		movq	%rsi, -48(%rbp)
  22              		.loc 1 22 1
  23 0014 64488B04 		movq	%fs:40, %rax
  23      25280000 
  23      00
  24 001d 488945F8 		movq	%rax, -8(%rbp)
  25 0021 31C0     		xorl	%eax, %eax
  23:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* Find beginning of token (skip over leading delimiters). Note that
  24:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****      * there is no token if this loop sets string to point to the terminal null.
  25:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****      */
  26:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     wchar_t *token = strToken;
  26              		.loc 1 26 14
  27 0023 488B45D8 		movq	-40(%rbp), %rax
  28 0027 488945E8 		movq	%rax, -24(%rbp)
  27:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     while (*token != L'\0') {
  29              		.loc 1 27 11
GAS LISTING /tmp/cc9FsUug.s 			page 2


  30 002b EB38     		jmp	.L2
  31              	.L8:
  32              	.LBB2:
  28:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         const wchar_t *ctl = strDelimit;
  33              		.loc 1 28 24
  34 002d 488B45D0 		movq	-48(%rbp), %rax
  35 0031 488945F0 		movq	%rax, -16(%rbp)
  29:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
  36              		.loc 1 29 15
  37 0035 EB05     		jmp	.L3
  38              	.L5:
  30:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****             ++ctl;
  39              		.loc 1 30 13
  40 0037 488345F0 		addq	$4, -16(%rbp)
  40      04
  41              	.L3:
  29:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
  42              		.loc 1 29 16
  43 003c 488B45F0 		movq	-16(%rbp), %rax
  44 0040 8B00     		movl	(%rax), %eax
  29:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
  45              		.loc 1 29 15
  46 0042 85C0     		testl	%eax, %eax
  47 0044 7410     		je	.L4
  29:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
  48              		.loc 1 29 33 discriminator 1
  49 0046 488B45F0 		movq	-16(%rbp), %rax
  50 004a 8B10     		movl	(%rax), %edx
  29:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
  51              		.loc 1 29 41 discriminator 1
  52 004c 488B45E8 		movq	-24(%rbp), %rax
  53 0050 8B00     		movl	(%rax), %eax
  29:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
  54              		.loc 1 29 30 discriminator 1
  55 0052 39C2     		cmpl	%eax, %edx
  56 0054 75E1     		jne	.L5
  57              	.L4:
  31:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         }
  32:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         if (*ctl == L'\0') {
  58              		.loc 1 32 13
  59 0056 488B45F0 		movq	-16(%rbp), %rax
  60 005a 8B00     		movl	(%rax), %eax
  61              		.loc 1 32 12
  62 005c 85C0     		testl	%eax, %eax
  63 005e 7411     		je	.L11
  33:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****             break;
  34:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         }
  35:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         ++token;
  64              		.loc 1 35 9
  65 0060 488345E8 		addq	$4, -24(%rbp)
  65      04
  66              	.L2:
  67              	.LBE2:
  27:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         const wchar_t *ctl = strDelimit;
  68              		.loc 1 27 12
  69 0065 488B45E8 		movq	-24(%rbp), %rax
  70 0069 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/cc9FsUug.s 			page 3


  27:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         const wchar_t *ctl = strDelimit;
  71              		.loc 1 27 11
  72 006b 85C0     		testl	%eax, %eax
  73 006d 75BE     		jne	.L8
  74 006f EB01     		jmp	.L7
  75              	.L11:
  76              	.LBB3:
  33:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****             break;
  77              		.loc 1 33 13
  78 0071 90       		nop
  79              	.L7:
  80              	.LBE3:
  36:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     }
  37:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     return token;
  81              		.loc 1 37 12
  82 0072 488B45E8 		movq	-24(%rbp), %rax
  38:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** }
  83              		.loc 1 38 1
  84 0076 488B4DF8 		movq	-8(%rbp), %rcx
  85 007a 6448330C 		xorq	%fs:40, %rcx
  85      25280000 
  85      00
  86 0083 7405     		je	.L10
  87 0085 E8000000 		call	__stack_chk_fail@PLT
  87      00
  88              	.L10:
  89 008a C9       		leave
  90              	.LCFI2:
  91              		.cfi_def_cfa 7, 8
  92 008b C3       		ret
  93              		.cfi_endproc
  94              	.LFE6:
  96              		.section	.text.SecFindRestW,"ax",@progbits
  98              	SecFindRestW:
  99              	.LFB7:
  39:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** 
  40:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** /*
  41:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * FindBegin rest Wide character postion  function
  42:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  */
  43:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** static wchar_t *SecFindRestW(wchar_t *strToken, const wchar_t *strDelimit)
  44:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** {
 100              		.loc 1 44 1
 101              		.cfi_startproc
 102 0000 F30F1EFA 		endbr64
 103 0004 55       		pushq	%rbp
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 6, -16
 107 0005 4889E5   		movq	%rsp, %rbp
 108              	.LCFI4:
 109              		.cfi_def_cfa_register 6
 110 0008 4883EC30 		subq	$48, %rsp
 111 000c 48897DD8 		movq	%rdi, -40(%rbp)
 112 0010 488975D0 		movq	%rsi, -48(%rbp)
 113              		.loc 1 44 1
 114 0014 64488B04 		movq	%fs:40, %rax
 114      25280000 
GAS LISTING /tmp/cc9FsUug.s 			page 4


 114      00
 115 001d 488945F8 		movq	%rax, -8(%rbp)
 116 0021 31C0     		xorl	%eax, %eax
  45:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* Find the end of the token. If it is not the end of the string,
  46:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****      * put a null there.
  47:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****      */
  48:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     wchar_t *token = strToken;
 117              		.loc 1 48 14
 118 0023 488B45D8 		movq	-40(%rbp), %rax
 119 0027 488945E8 		movq	%rax, -24(%rbp)
  49:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     while (*token != L'\0') {
 120              		.loc 1 49 11
 121 002b EB4C     		jmp	.L13
 122              	.L19:
 123              	.LBB4:
  50:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         const wchar_t *ctl = strDelimit;
 124              		.loc 1 50 24
 125 002d 488B45D0 		movq	-48(%rbp), %rax
 126 0031 488945F0 		movq	%rax, -16(%rbp)
  51:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
 127              		.loc 1 51 15
 128 0035 EB05     		jmp	.L14
 129              	.L16:
  52:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****             ++ctl;
 130              		.loc 1 52 13
 131 0037 488345F0 		addq	$4, -16(%rbp)
 131      04
 132              	.L14:
  51:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
 133              		.loc 1 51 16
 134 003c 488B45F0 		movq	-16(%rbp), %rax
 135 0040 8B00     		movl	(%rax), %eax
  51:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
 136              		.loc 1 51 15
 137 0042 85C0     		testl	%eax, %eax
 138 0044 7410     		je	.L15
  51:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
 139              		.loc 1 51 33 discriminator 1
 140 0046 488B45F0 		movq	-16(%rbp), %rax
 141 004a 8B10     		movl	(%rax), %edx
  51:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
 142              		.loc 1 51 41 discriminator 1
 143 004c 488B45E8 		movq	-24(%rbp), %rax
 144 0050 8B00     		movl	(%rax), %eax
  51:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         while (*ctl != L'\0' && *ctl != *token) {
 145              		.loc 1 51 30 discriminator 1
 146 0052 39C2     		cmpl	%eax, %edx
 147 0054 75E1     		jne	.L16
 148              	.L15:
  53:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         }
  54:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         if (*ctl != L'\0') {
 149              		.loc 1 54 13
 150 0056 488B45F0 		movq	-16(%rbp), %rax
 151 005a 8B00     		movl	(%rax), %eax
 152              		.loc 1 54 12
 153 005c 85C0     		testl	%eax, %eax
 154 005e 7414     		je	.L17
GAS LISTING /tmp/cc9FsUug.s 			page 5


  55:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****             *token++ = L'\0';
 155              		.loc 1 55 19
 156 0060 488B45E8 		movq	-24(%rbp), %rax
 157 0064 488D5004 		leaq	4(%rax), %rdx
 158 0068 488955E8 		movq	%rdx, -24(%rbp)
 159              		.loc 1 55 22
 160 006c C7000000 		movl	$0, (%rax)
 160      0000
  56:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****             break;
 161              		.loc 1 56 13
 162 0072 EB0F     		jmp	.L18
 163              	.L17:
  57:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         }
  58:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         ++token;
 164              		.loc 1 58 9
 165 0074 488345E8 		addq	$4, -24(%rbp)
 165      04
 166              	.L13:
 167              	.LBE4:
  49:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         const wchar_t *ctl = strDelimit;
 168              		.loc 1 49 12
 169 0079 488B45E8 		movq	-24(%rbp), %rax
 170 007d 8B00     		movl	(%rax), %eax
  49:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         const wchar_t *ctl = strDelimit;
 171              		.loc 1 49 11
 172 007f 85C0     		testl	%eax, %eax
 173 0081 75AA     		jne	.L19
 174              	.L18:
  59:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     }
  60:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     return token;
 175              		.loc 1 60 12
 176 0083 488B45E8 		movq	-24(%rbp), %rax
  61:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** }
 177              		.loc 1 61 1
 178 0087 488B4DF8 		movq	-8(%rbp), %rcx
 179 008b 6448330C 		xorq	%fs:40, %rcx
 179      25280000 
 179      00
 180 0094 7405     		je	.L21
 181 0096 E8000000 		call	__stack_chk_fail@PLT
 181      00
 182              	.L21:
 183 009b C9       		leave
 184              	.LCFI5:
 185              		.cfi_def_cfa 7, 8
 186 009c C3       		ret
 187              		.cfi_endproc
 188              	.LFE7:
 190              		.section	.text.SecUpdateTokenW,"ax",@progbits
 192              	SecUpdateTokenW:
 193              	.LFB8:
  62:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** 
  63:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** /*
  64:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * Update Token wide character  function
  65:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  */
  66:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** static wchar_t *SecUpdateTokenW(wchar_t *strToken, const wchar_t *strDelimit, wchar_t **context)
  67:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** {
GAS LISTING /tmp/cc9FsUug.s 			page 6


 194              		.loc 1 67 1
 195              		.cfi_startproc
 196 0000 F30F1EFA 		endbr64
 197 0004 55       		pushq	%rbp
 198              	.LCFI6:
 199              		.cfi_def_cfa_offset 16
 200              		.cfi_offset 6, -16
 201 0005 4889E5   		movq	%rsp, %rbp
 202              	.LCFI7:
 203              		.cfi_def_cfa_register 6
 204 0008 4883EC30 		subq	$48, %rsp
 205 000c 48897DE8 		movq	%rdi, -24(%rbp)
 206 0010 488975E0 		movq	%rsi, -32(%rbp)
 207 0014 488955D8 		movq	%rdx, -40(%rbp)
 208              		.loc 1 67 1
 209 0018 64488B04 		movq	%fs:40, %rax
 209      25280000 
 209      00
 210 0021 488945F8 		movq	%rax, -8(%rbp)
 211 0025 31C0     		xorl	%eax, %eax
  68:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* point to updated position */
  69:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     wchar_t *token = SecFindRestW(strToken, strDelimit);
 212              		.loc 1 69 22
 213 0027 488B55E0 		movq	-32(%rbp), %rdx
 214 002b 488B45E8 		movq	-24(%rbp), %rax
 215 002f 4889D6   		movq	%rdx, %rsi
 216 0032 4889C7   		movq	%rax, %rdi
 217 0035 E8000000 		call	SecFindRestW
 217      00
 218 003a 488945F0 		movq	%rax, -16(%rbp)
  70:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* Update the context */
  71:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     *context = token;
 219              		.loc 1 71 14
 220 003e 488B45D8 		movq	-40(%rbp), %rax
 221 0042 488B55F0 		movq	-16(%rbp), %rdx
 222 0046 488910   		movq	%rdx, (%rax)
  72:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* Determine if a token has been found. */
  73:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     if (token == strToken) {
 223              		.loc 1 73 8
 224 0049 488B45F0 		movq	-16(%rbp), %rax
 225 004d 483B45E8 		cmpq	-24(%rbp), %rax
 226 0051 7507     		jne	.L23
  74:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         return NULL;
 227              		.loc 1 74 16
 228 0053 B8000000 		movl	$0, %eax
 228      00
 229 0058 EB04     		jmp	.L24
 230              	.L23:
  75:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     }
  76:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     return strToken;
 231              		.loc 1 76 12
 232 005a 488B45E8 		movq	-24(%rbp), %rax
 233              	.L24:
  77:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** }
 234              		.loc 1 77 1
 235 005e 488B4DF8 		movq	-8(%rbp), %rcx
 236 0062 6448330C 		xorq	%fs:40, %rcx
GAS LISTING /tmp/cc9FsUug.s 			page 7


 236      25280000 
 236      00
 237 006b 7405     		je	.L25
 238 006d E8000000 		call	__stack_chk_fail@PLT
 238      00
 239              	.L25:
 240 0072 C9       		leave
 241              	.LCFI8:
 242              		.cfi_def_cfa 7, 8
 243 0073 C3       		ret
 244              		.cfi_endproc
 245              	.LFE8:
 247              		.section	.text.wcstok_s,"ax",@progbits
 248              		.globl	wcstok_s
 250              	wcstok_s:
 251              	.LFB9:
  78:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** 
  79:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** /*
  80:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * <NAME>
  81:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *    wcstok_s
  82:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
  83:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
  84:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * <FUNCTION DESCRIPTION>
  85:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *   The  wcstok_s  function  is  the  wide-character  equivalent  of the strtok_s function
  86:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
  87:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * <INPUT PARAMETERS>
  88:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *    strToken               String containing token or tokens.
  89:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *    strDelimit             Set of delimiter characters.
  90:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *    context                Used to store position information between calls to
  91:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *                               wcstok_s.
  92:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *
  93:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * <OUTPUT PARAMETERS>
  94:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *    context               is updated
  95:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  * <RETURN VALUE>
  96:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  *   The  wcstok_s  function  is  the  wide-character  equivalent  of the strtok_s function
  97:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****  */
  98:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** wchar_t *wcstok_s(wchar_t *strToken, const wchar_t *strDelimit, wchar_t **context)
  99:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** {
 252              		.loc 1 99 1
 253              		.cfi_startproc
 254 0000 F30F1EFA 		endbr64
 255 0004 55       		pushq	%rbp
 256              	.LCFI9:
 257              		.cfi_def_cfa_offset 16
 258              		.cfi_offset 6, -16
 259 0005 4889E5   		movq	%rsp, %rbp
 260              	.LCFI10:
 261              		.cfi_def_cfa_register 6
 262 0008 4883EC30 		subq	$48, %rsp
 263 000c 48897DE8 		movq	%rdi, -24(%rbp)
 264 0010 488975E0 		movq	%rsi, -32(%rbp)
 265 0014 488955D8 		movq	%rdx, -40(%rbp)
 266              		.loc 1 99 1
 267 0018 64488B04 		movq	%fs:40, %rax
 267      25280000 
 267      00
 268 0021 488945F8 		movq	%rax, -8(%rbp)
GAS LISTING /tmp/cc9FsUug.s 			page 8


 269 0025 31C0     		xorl	%eax, %eax
 100:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     wchar_t *orgToken = strToken;
 270              		.loc 1 100 14
 271 0027 488B45E8 		movq	-24(%rbp), %rax
 272 002b 488945F0 		movq	%rax, -16(%rbp)
 101:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* validation section */
 102:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     if (context == NULL || strDelimit == NULL) {
 273              		.loc 1 102 8
 274 002f 48837DD8 		cmpq	$0, -40(%rbp)
 274      00
 275 0034 7407     		je	.L27
 276              		.loc 1 102 25 discriminator 1
 277 0036 48837DE0 		cmpq	$0, -32(%rbp)
 277      00
 278 003b 7507     		jne	.L28
 279              	.L27:
 103:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         return NULL;
 280              		.loc 1 103 16
 281 003d B8000000 		movl	$0, %eax
 281      00
 282 0042 EB5A     		jmp	.L29
 283              	.L28:
 104:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     }
 105:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     if (orgToken == NULL && (*context) == NULL) {
 284              		.loc 1 105 8
 285 0044 48837DF0 		cmpq	$0, -16(%rbp)
 285      00
 286 0049 7513     		jne	.L30
 287              		.loc 1 105 30 discriminator 1
 288 004b 488B45D8 		movq	-40(%rbp), %rax
 289 004f 488B00   		movq	(%rax), %rax
 290              		.loc 1 105 26 discriminator 1
 291 0052 4885C0   		testq	%rax, %rax
 292 0055 7507     		jne	.L30
 106:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         return NULL;
 293              		.loc 1 106 16
 294 0057 B8000000 		movl	$0, %eax
 294      00
 295 005c EB40     		jmp	.L29
 296              	.L30:
 107:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     }
 108:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     /* If string==NULL, continue with previous string */
 109:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     if (orgToken == NULL) {
 297              		.loc 1 109 8
 298 005e 48837DF0 		cmpq	$0, -16(%rbp)
 298      00
 299 0063 750B     		jne	.L31
 110:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****         orgToken = *context;
 300              		.loc 1 110 18
 301 0065 488B45D8 		movq	-40(%rbp), %rax
 302 0069 488B00   		movq	(%rax), %rax
 303 006c 488945F0 		movq	%rax, -16(%rbp)
 304              	.L31:
 111:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     }
 112:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     orgToken = SecFindBeginW(orgToken, strDelimit);
 305              		.loc 1 112 16
 306 0070 488B55E0 		movq	-32(%rbp), %rdx
GAS LISTING /tmp/cc9FsUug.s 			page 9


 307 0074 488B45F0 		movq	-16(%rbp), %rax
 308 0078 4889D6   		movq	%rdx, %rsi
 309 007b 4889C7   		movq	%rax, %rdi
 310 007e E8000000 		call	SecFindBeginW
 310      00
 311 0083 488945F0 		movq	%rax, -16(%rbp)
 113:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c ****     return SecUpdateTokenW(orgToken, strDelimit, context);
 312              		.loc 1 113 12
 313 0087 488B55D8 		movq	-40(%rbp), %rdx
 314 008b 488B4DE0 		movq	-32(%rbp), %rcx
 315 008f 488B45F0 		movq	-16(%rbp), %rax
 316 0093 4889CE   		movq	%rcx, %rsi
 317 0096 4889C7   		movq	%rax, %rdi
 318 0099 E8000000 		call	SecUpdateTokenW
 318      00
 319              	.L29:
 114:/home/xingli/share/1205tiny/secure_c/src/wcstok_s.c **** }
 320              		.loc 1 114 1
 321 009e 488B4DF8 		movq	-8(%rbp), %rcx
 322 00a2 6448330C 		xorq	%fs:40, %rcx
 322      25280000 
 322      00
 323 00ab 7405     		je	.L32
 324 00ad E8000000 		call	__stack_chk_fail@PLT
 324      00
 325              	.L32:
 326 00b2 C9       		leave
 327              	.LCFI11:
 328              		.cfi_def_cfa 7, 8
 329 00b3 C3       		ret
 330              		.cfi_endproc
 331              	.LFE9:
 333              		.text
 334              	.Letext0:
 335              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 336              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 337              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 338              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 339              		.file 6 "/usr/include/stdio.h"
 340              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1637              		.section	.note.gnu.property,"a"
 1638              		.align 8
 1639 0000 04000000 		.long	 1f - 0f
 1640 0004 10000000 		.long	 4f - 1f
 1641 0008 05000000 		.long	 5
 1642              	0:
 1643 000c 474E5500 		.string	 "GNU"
 1644              	1:
 1645              		.align 8
 1646 0010 020000C0 		.long	 0xc0000002
 1647 0014 04000000 		.long	 3f - 2f
 1648              	2:
 1649 0018 03000000 		.long	 0x3
 1650              	3:
 1651 001c 00000000 		.align 8
 1652              	4:
GAS LISTING /tmp/cc9FsUug.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 wcstok_s.c
     /tmp/cc9FsUug.s:6      .text.SecFindBeginW:0000000000000000 SecFindBeginW
     /tmp/cc9FsUug.s:98     .text.SecFindRestW:0000000000000000 SecFindRestW
     /tmp/cc9FsUug.s:192    .text.SecUpdateTokenW:0000000000000000 SecUpdateTokenW
     /tmp/cc9FsUug.s:250    .text.wcstok_s:0000000000000000 wcstok_s

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
