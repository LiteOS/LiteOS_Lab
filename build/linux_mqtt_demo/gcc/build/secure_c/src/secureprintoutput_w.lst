GAS LISTING /tmp/ccgOk6Ic.s 			page 1


   1              		.file	"secureprintoutput_w.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.SecDoMemcpy,"ax",@progbits
   6              	SecDoMemcpy:
   7              	.LFB6:
   8              		.file 1 "/home/xingli/share/1205tiny/secure_c/src/securecutil.h"
   1:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  16:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  17:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECURECUTIL_H_46C86578_F8FF_4E49_8E64_9B175241761F
  18:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #include "securec.h"
  19:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  20:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_MSC_VER)) && (_MSC_VER >= 1400)
  21:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING __pragma(warning(push)) \
  22:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     __pragma(warning(disable:4996 4127))
  23:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING  __pragma(warning(pop))
  24:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  25:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MASK_MSVC_CRT_WARNING
  26:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_END_MASK_MSVC_CRT_WARNING
  27:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  28:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_WHILE_ZERO SECUREC_MASK_MSVC_CRT_WARNING while (0) SECUREC_END_MASK_MSVC_CRT_WARNIN
  29:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  30:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_STRNLEN
  31:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE >= 700) || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURC
  32:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  33:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  34:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  35:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__GLIBC__) && __GLIBC__ >= 2 && defined(__GLIBC_MINOR__) && __GLIBC_MINOR__ >= 10
  36:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 1
  37:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  38:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  39:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  40:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  41:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
  42:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_STRNLEN 0
  43:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  44:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  45:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  46:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
  47:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* in kernel disbale functions */
  48:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  49:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 0
  50:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
GAS LISTING /tmp/ccgOk6Ic.s 			page 2


  51:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  52:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 0
  53:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  54:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  55:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 0
  56:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  57:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  58:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 0
  59:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  60:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  61:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 0
  62:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  63:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  64:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 0
  65:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  66:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no in kernel */
  67:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support file, can define this macro to 0. */
  68:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FILE
  69:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FILE 1
  70:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  71:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SCANF_FLOAT
  72:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SCANF_FLOAT 1
  73:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  74:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Systems that do not support float, can define this macro to 0. */
  75:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_ENABLE_SPRINTF_FLOAT
  76:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ENABLE_SPRINTF_FLOAT 1
  77:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  78:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_MBTOWC
  79:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_MBTOWC 1
  80:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  81:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCTOMB
  82:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCTOMB 1
  83:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  84:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_HAVE_WCHART
  85:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_HAVE_WCHART 1
  86:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  87:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
  88:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  89:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
  90:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_INT_MAX                     2147483647
  91:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_SIXTEEN(x)              ((x) << 4)
  92:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_EIGHT(x)                ((x) << 3)
  93:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN(x)                  ((((x) << 2) + (x)) << 1)
  94:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Limited format input and output width */
  95:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN_DIV_TEN       21474836
  96:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MAX_WIDTH_LEN               SECUREC_MUL_TEN(SECUREC_MAX_WIDTH_LEN_DIV_TEN)
  97:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Is the x multiplied by 10 greater than */
  98:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MUL_TEN_ADD_BEYOND_MAX(x)   (((x) > SECUREC_MAX_WIDTH_LEN_DIV_TEN))
  99:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 100:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE               (309 + 40)  /* Max length of double value */
 101:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_BUFSIZE_LB            (4932 + 40) /* Max length of long double value */
 102:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FLOAT_DEFAULT_PRECISION     6
 103:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 104:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* This macro does not handle pointer equality or integer overflow */
 105:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_NO_OVERLAP(dest, src, count) \
 106:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) <= (char *)(dest)) || \
 107:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) <= (const char *)(src)))
GAS LISTING /tmp/ccgOk6Ic.s 			page 3


 108:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 109:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MEMORY_IS_OVERLAP(dest, src, count) \
 110:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((const char *)(src) + (count)) > (char *)(dest)) || \
 111:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((char *)(dest) + (count)) > (const char *)(src)))
 112:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 113:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 114:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap, len is the length of the string not include terminator
 115:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 116:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 117:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_NO_OVERLAP(dest, src, len) \
 118:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) < (dest)) || \
 119:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) < (src)))
 120:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 121:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 122:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcpy wcscpy function, dest len and src Len are not inclu
 123:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 124:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 125:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_STRING_IS_OVERLAP(dest, src, len) \
 126:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((src) < (dest) && ((src) + (len)) >= (dest)) || \
 127:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((dest) < (src) && ((dest) + (len)) >= (src)))
 128:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 129:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /*
 130:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Check whether the strings overlap for strcat wcscat function, dest len and src Len are not inclu
 131:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Length is related to data type char or wchar , do not force conversion of types
 132:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 133:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CAT_STRING_IS_OVERLAP(dest, destLen, src, srcLen) \
 134:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (((dest) < (src) && ((dest) + (destLen) + (srcLen)) >= (src)) || \
 135:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     ((src) < (dest) && ((src) + (srcLen)) >= (dest)))
 136:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 137:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 138:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_HAVE_STRNLEN
 139:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 140:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = strnlen((str), (maxLen)); \
 141:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 142:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT(str, maxLen, outLen) do { \
 143:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     if ((maxLen) > 8) { \
 144:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         /* Optimization or len less then 8 */ \
 145:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         if (*((str) + 0) == '\0') { \
 146:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 0; \
 147:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 1) == '\0') { \
 148:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 1; \
 149:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 2) == '\0') { \
 150:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 2; \
 151:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 3) == '\0') { \
 152:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 3; \
 153:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 4) == '\0') { \
 154:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 4; \
 155:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 5) == '\0') { \
 156:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 5; \
 157:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 6) == '\0') { \
 158:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 6; \
 159:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 7) == '\0') { \
 160:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 7; \
 161:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else if (*((str) + 8) == '\0') { \
 162:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* Optimization with a length of 8 */ \
 163:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8; \
 164:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } else { \
GAS LISTING /tmp/ccgOk6Ic.s 			page 4


 165:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             /* The offset is 8 because the performance of 8 byte alignment is high */ \
 166:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****             *(outLen) = 8 + strnlen((str) + 8, (maxLen) - 8); \
 167:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         } \
 168:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } else { \
 169:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         SECUREC_CALC_STR_LEN((str), (maxLen), (outLen)); \
 170:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 171:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 172:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 173:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN(str, maxLen, outLen) do { \
 174:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const char *strEnd = (const char *)(str); \
 175:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     size_t availableSize = (size_t)(maxLen); \
 176:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (availableSize > 0 && *strEnd != '\0') { \
 177:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         --availableSize; \
 178:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 179:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 180:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = (size_t)(strEnd - (str)); \
 181:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 182:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_STR_LEN_OPT SECUREC_CALC_STR_LEN
 183:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 184:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 185:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_CALC_WSTR_LEN(str, maxLen, outLen) do { \
 186:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     const wchar_t *strEnd = (const wchar_t *)(str); \
 187:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     *(outLen) = 0; \
 188:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     while (*(outLen) < (maxLen) && *strEnd != L'\0') { \
 189:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         *(outLen) = *(outLen) + 1; \
 190:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****         ++strEnd; \
 191:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     } \
 192:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SECUREC_WHILE_ZERO
 193:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 194:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 195:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FORMAT_OUTPUT_INPUT
 196:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT) || defined(__ARMCC_VERSION)
 197:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef __int64 SecInt64;
 198:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int64 SecUnsignedInt64;
 199:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(__ARMCC_VERSION)
 200:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 201:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 202:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned __int32 SecUnsignedInt32;
 203:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 204:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 205:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt32;
 206:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef long long SecInt64;
 207:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned long long SecUnsignedInt64;
 208:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 209:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 210:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_FOR_WCHAR
 211:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_VXWORKS_PLATFORM) && !defined(__WINT_TYPE__)
 212:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t wint_t;
 213:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 214:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecChar;
 215:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wchar_t SecUnsignedChar;
 216:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecInt;
 217:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef wint_t SecUnsignedInt;
 218:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /*  no SECUREC_FOR_WCHAR */
 219:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef char SecChar;
 220:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned char SecUnsignedChar;
 221:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef int SecInt;
GAS LISTING /tmp/ccgOk6Ic.s 			page 5


 222:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef unsigned int SecUnsignedInt;
 223:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 224:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 225:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 226:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* Determine whether the address is 8-byte aligned
 227:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * Some systems do not have uintptr_t type, so  use NULL to clear tool alarm 507
 228:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 229:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ADDR_ALIGNED_8(addr) (SecIsAddrAligned8((addr), NULL) == 0)
 230:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 231:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* If you define the memory allocation function,
 232:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * you need to define the function prototype. You can define this macro as a header file.
 233:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 234:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_MALLOC_PROTOTYPE)
 235:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** SECUREC_MALLOC_PROTOTYPE
 236:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 237:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 238:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_MALLOC
 239:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_MALLOC(x) malloc((size_t)(x))
 240:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 241:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 242:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifndef SECUREC_FREE
 243:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_FREE(x)   free((void *)(x))
 244:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 245:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 246:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* struct for performance */
 247:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 248:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[1]; /* Performance optimization code structure assignment length 1 bytes */
 249:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf1;
 250:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 251:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[2]; /* Performance optimization code structure assignment length 2 bytes */
 252:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf2;
 253:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 254:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[3]; /* Performance optimization code structure assignment length 3 bytes */
 255:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf3;
 256:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 257:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[4]; /* Performance optimization code structure assignment length 4 bytes */
 258:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf4;
 259:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 260:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[5]; /* Performance optimization code structure assignment length 5 bytes */
 261:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf5;
 262:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 263:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[6]; /* Performance optimization code structure assignment length 6 bytes */
 264:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf6;
 265:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 266:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[7]; /* Performance optimization code structure assignment length 7 bytes */
 267:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf7;
 268:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 269:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[8]; /* Performance optimization code structure assignment length 8 bytes */
 270:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf8;
 271:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 272:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[9]; /* Performance optimization code structure assignment length 9 bytes */
 273:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf9;
 274:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 275:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[10]; /* Performance optimization code structure assignment length 10 bytes */
 276:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf10;
 277:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 278:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[11]; /* Performance optimization code structure assignment length 11 bytes */
GAS LISTING /tmp/ccgOk6Ic.s 			page 6


 279:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf11;
 280:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 281:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[12]; /* Performance optimization code structure assignment length 12 bytes */
 282:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf12;
 283:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 284:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[13]; /* Performance optimization code structure assignment length 13 bytes */
 285:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf13;
 286:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 287:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[14]; /* Performance optimization code structure assignment length 14 bytes */
 288:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf14;
 289:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 290:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[15]; /* Performance optimization code structure assignment length 15 bytes */
 291:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf15;
 292:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 293:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[16]; /* Performance optimization code structure assignment length 16 bytes */
 294:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf16;
 295:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 296:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[17]; /* Performance optimization code structure assignment length 17 bytes */
 297:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf17;
 298:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 299:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[18]; /* Performance optimization code structure assignment length 18 bytes */
 300:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf18;
 301:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 302:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[19]; /* Performance optimization code structure assignment length 19 bytes */
 303:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf19;
 304:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 305:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[20]; /* Performance optimization code structure assignment length 20 bytes */
 306:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf20;
 307:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 308:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[21]; /* Performance optimization code structure assignment length 21 bytes */
 309:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf21;
 310:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 311:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[22]; /* Performance optimization code structure assignment length 22 bytes */
 312:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf22;
 313:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 314:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[23]; /* Performance optimization code structure assignment length 23 bytes */
 315:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf23;
 316:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 317:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[24]; /* Performance optimization code structure assignment length 24 bytes */
 318:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf24;
 319:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 320:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[25]; /* Performance optimization code structure assignment length 25 bytes */
 321:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf25;
 322:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 323:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[26]; /* Performance optimization code structure assignment length 26 bytes */
 324:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf26;
 325:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 326:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[27]; /* Performance optimization code structure assignment length 27 bytes */
 327:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf27;
 328:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 329:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[28]; /* Performance optimization code structure assignment length 28 bytes */
 330:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf28;
 331:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 332:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[29]; /* Performance optimization code structure assignment length 29 bytes */
 333:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf29;
 334:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 335:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[30]; /* Performance optimization code structure assignment length 30 bytes */
GAS LISTING /tmp/ccgOk6Ic.s 			page 7


 336:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf30;
 337:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 338:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[31]; /* Performance optimization code structure assignment length 31 bytes */
 339:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf31;
 340:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 341:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[32]; /* Performance optimization code structure assignment length 32 bytes */
 342:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf32;
 343:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 344:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[33]; /* Performance optimization code structure assignment length 33 bytes */
 345:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf33;
 346:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 347:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[34]; /* Performance optimization code structure assignment length 34 bytes */
 348:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf34;
 349:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 350:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[35]; /* Performance optimization code structure assignment length 35 bytes */
 351:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf35;
 352:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 353:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[36]; /* Performance optimization code structure assignment length 36 bytes */
 354:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf36;
 355:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 356:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[37]; /* Performance optimization code structure assignment length 37 bytes */
 357:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf37;
 358:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 359:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[38]; /* Performance optimization code structure assignment length 38 bytes */
 360:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf38;
 361:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 362:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[39]; /* Performance optimization code structure assignment length 39 bytes */
 363:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf39;
 364:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 365:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[40]; /* Performance optimization code structure assignment length 40 bytes */
 366:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf40;
 367:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 368:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[41]; /* Performance optimization code structure assignment length 41 bytes */
 369:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf41;
 370:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 371:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[42]; /* Performance optimization code structure assignment length 42 bytes */
 372:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf42;
 373:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 374:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[43]; /* Performance optimization code structure assignment length 43 bytes */
 375:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf43;
 376:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 377:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[44]; /* Performance optimization code structure assignment length 44 bytes */
 378:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf44;
 379:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 380:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[45]; /* Performance optimization code structure assignment length 45 bytes */
 381:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf45;
 382:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 383:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[46]; /* Performance optimization code structure assignment length 46 bytes */
 384:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf46;
 385:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 386:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[47]; /* Performance optimization code structure assignment length 47 bytes */
 387:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf47;
 388:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 389:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[48]; /* Performance optimization code structure assignment length 48 bytes */
 390:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf48;
 391:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 392:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[49]; /* Performance optimization code structure assignment length 49 bytes */
GAS LISTING /tmp/ccgOk6Ic.s 			page 8


 393:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf49;
 394:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 395:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[50]; /* Performance optimization code structure assignment length 50 bytes */
 396:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf50;
 397:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 398:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[51]; /* Performance optimization code structure assignment length 51 bytes */
 399:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf51;
 400:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 401:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[52]; /* Performance optimization code structure assignment length 52 bytes */
 402:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf52;
 403:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 404:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[53]; /* Performance optimization code structure assignment length 53 bytes */
 405:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf53;
 406:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 407:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[54]; /* Performance optimization code structure assignment length 54 bytes */
 408:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf54;
 409:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 410:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[55]; /* Performance optimization code structure assignment length 55 bytes */
 411:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf55;
 412:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 413:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[56]; /* Performance optimization code structure assignment length 56 bytes */
 414:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf56;
 415:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 416:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[57]; /* Performance optimization code structure assignment length 57 bytes */
 417:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf57;
 418:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 419:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[58]; /* Performance optimization code structure assignment length 58 bytes */
 420:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf58;
 421:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 422:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[59]; /* Performance optimization code structure assignment length 59 bytes */
 423:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf59;
 424:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 425:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[60]; /* Performance optimization code structure assignment length 60 bytes */
 426:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf60;
 427:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 428:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[61]; /* Performance optimization code structure assignment length 61 bytes */
 429:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf61;
 430:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 431:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[62]; /* Performance optimization code structure assignment length 62 bytes */
 432:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf62;
 433:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 434:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[63]; /* Performance optimization code structure assignment length 63 bytes */
 435:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf63;
 436:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** typedef struct {
 437:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     unsigned char buf[64]; /* Performance optimization code structure assignment length 64 bytes */
 438:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** } SecStrBuf64;
 439:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 440:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 441:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 442:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 443:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* User can change the error handler by modify the following definition,
 444:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  * such as logging the detail error in file.
 445:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****  */
 446:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(_DEBUG) || defined(DEBUG)
 447:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_ASSERT)
 448:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) assert(msg "invalid argument" == NULL)
 449:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    assert(msg "invalid dest buffer size" == NULL)
GAS LISTING /tmp/ccgOk6Ic.s 			page 9


 450:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   assert(msg "buffer overlap" == NULL)
 451:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_PRINTF)
 452:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if SECUREC_IN_KERNEL
 453:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printk("%s invalid argument\n", msg)
 454:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printk("%s invalid dest buffer size\n", msg)
 455:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printk("%s buffer overlap\n", msg)
 456:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 457:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) printf("%s invalid argument\n", msg)
 458:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    printf("%s invalid dest buffer size\n", msg)
 459:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   printf("%s buffer overlap\n", msg)
 460:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 461:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #elif defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 462:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) LogSecureCRuntimeError(msg " EINVAL\n")
 463:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    LogSecureCRuntimeError(msg " ERANGE\n")
 464:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   LogSecureCRuntimeError(msg " EOVERLAP\n")
 465:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no HANDLER is defined */
 466:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 467:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 468:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 469:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 470:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else /* no DEBUG */
 471:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_PARAMTER(msg) ((void)0)
 472:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_INVALID_RANGE(msg)    ((void)0)
 473:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #define SECUREC_ERROR_BUFFER_OVERLAP(msg)   ((void)0)
 474:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 475:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 476:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef __cplusplus
 477:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** extern "C" {
 478:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 479:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 480:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** /* assembly language memory copy and memory set for X86 or MIPS ... */
 481:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 482:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memcpy_opt(void *, const void *, size_t);
 483:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void *memset_opt(void *, int, size_t);
 484:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 485:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 486:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #if defined(SECUREC_ERROR_HANDLER_BY_FILE_LOG)
 487:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     extern void LogSecureCRuntimeError(const char *errDetail);
 488:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 489:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** 
 490:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_INLINE_DO_MEMCPY
 491:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** static void SecDoMemcpy(void *dest, const void *src, size_t count)
 492:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** {
   9              		.loc 1 492 1
  10              		.cfi_startproc
  11 0000 F30F1EFA 		endbr64
  12 0004 55       		pushq	%rbp
  13              	.LCFI0:
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0005 4889E5   		movq	%rsp, %rbp
  17              	.LCFI1:
  18              		.cfi_def_cfa_register 6
  19 0008 4883EC30 		subq	$48, %rsp
  20 000c 48897DE8 		movq	%rdi, -24(%rbp)
  21 0010 488975E0 		movq	%rsi, -32(%rbp)
  22 0014 488955D8 		movq	%rdx, -40(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 10


  23              		.loc 1 492 1
  24 0018 64488B04 		movq	%fs:40, %rax
  24      25280000 
  24      00
  25 0021 488945F8 		movq	%rax, -8(%rbp)
  26 0025 31C0     		xorl	%eax, %eax
 493:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /*
 494:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      * if SECUREC_USE_ASM macro is enabled, it will call assembly language function to improve perf
 495:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****      */
 496:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #ifdef SECUREC_USE_ASM
 497:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy_opt(dest, src, count);
 498:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #else
 499:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     /* large enough, let system API do it */
 500:/home/xingli/share/1205tiny/secure_c/src/securecutil.h ****     (void)memcpy(dest, src, count);
  27              		.loc 1 500 11
  28 0027 488B55D8 		movq	-40(%rbp), %rdx
  29 002b 488B4DE0 		movq	-32(%rbp), %rcx
  30 002f 488B45E8 		movq	-24(%rbp), %rax
  31 0033 4889CE   		movq	%rcx, %rsi
  32 0036 4889C7   		movq	%rax, %rdi
  33 0039 E8000000 		call	memcpy@PLT
  33      00
 501:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** #endif
 502:/home/xingli/share/1205tiny/secure_c/src/securecutil.h **** }
  34              		.loc 1 502 1
  35 003e 90       		nop
  36 003f 488B45F8 		movq	-8(%rbp), %rax
  37 0043 64483304 		xorq	%fs:40, %rax
  37      25280000 
  37      00
  38 004c 7405     		je	.L2
  39 004e E8000000 		call	__stack_chk_fail@PLT
  39      00
  40              	.L2:
  41 0053 C9       		leave
  42              	.LCFI2:
  43              		.cfi_def_cfa 7, 8
  44 0054 C3       		ret
  45              		.cfi_endproc
  46              	.LFE6:
  48              		.section	.text.SecIndirectSprintf,"ax",@progbits
  50              	SecIndirectSprintf:
  51              	.LFB7:
  52              		.file 2 "/home/xingli/share/1205tiny/secure_c/src/output.inl"
   1:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * See the Mulan PSL v1 for more details.  
GAS LISTING /tmp/ccgOk6Ic.s 			page 11


  14:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* [Standardize-exceptions] Use unsafe function: Portability
  16:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * [reason] Use unsafe function to implement security function to maintain platform compatibility.
  17:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  *          And sufficient input validation is performed before calling
  18:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
  19:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  20:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifndef OUTPUT_INL_2B263E9C_43D8_44BB_B17A_6D2033DECEE5
  21:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define OUTPUT_INL_2B263E9C_43D8_44BB_B17A_6D2033DECEE5
  22:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  23:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_NULL_STRING_SIZE            8
  24:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_STATE_TABLE_SIZE              337
  25:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_BITS_WORD            16
  26:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_BITS_DWORD           32
  27:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  28:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_DIV_OCTAL            3
  29:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_OFFSET_DIV_HEX              4
  30:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_RADIX_OCTAL                 8
  31:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_RADIX_DECIMAL               10
  32:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_RADIX_HEX                   16
  33:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* Use two displacements to eliminate compilation warnings */
  34:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SHR_DWORD(x)                (((x) >> 16) >> 16)
  35:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_PREFIX_LEN                  2
  36:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* size include '+' and '\0' */
  37:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FLOAT_BUF_EXT               2
  38:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  39:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  40:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_STACK_SIZE_LESS_THAN_1K
  41:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_STR_LEN                 8
  42:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
  43:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_STR_LEN                 16
  44:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
  45:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  46:/home/xingli/share/1205tiny/secure_c/src/output.inl **** typedef struct {
  47:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     unsigned int flags;
  48:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int fldWidth;
  49:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int precision;
  50:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int bufferIsWide;           /* flag for buffer contains wide chars ;0 is not wide char */
  51:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int dynWidth;               /* %*   1 width from variable parameter ;0 not */
  52:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int dynPrecision;           /* %.*  1 precision from variable parameter ;0 not */
  53:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SecFormatAttr;
  54:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  55:/home/xingli/share/1205tiny/secure_c/src/output.inl **** typedef union {
  56:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     char *str;                  /* not a null terminated  string */
  57:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
  58:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     wchar_t *wStr;
  59:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
  60:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SecFormatBuf;
  61:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  62:/home/xingli/share/1205tiny/secure_c/src/output.inl **** typedef union {
  63:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     char str[SECUREC_BUFFER_SIZE + 1];
  64:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
  65:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     wchar_t wStr[SECUREC_BUFFER_SIZE + 1];
  66:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
  67:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SecBuffer;
  68:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  69:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
  70:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* call system sprintf to format float value */
GAS LISTING /tmp/ccgOk6Ic.s 			page 12


  71:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecIndirectSprintf(char *strDest, const char *format, ...)
  72:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
  53              		.loc 2 72 1
  54              		.cfi_startproc
  55 0000 F30F1EFA 		endbr64
  56 0004 55       		pushq	%rbp
  57              	.LCFI3:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 6, -16
  60 0005 4889E5   		movq	%rsp, %rbp
  61              	.LCFI4:
  62              		.cfi_def_cfa_register 6
  63 0008 4881ECF0 		subq	$240, %rsp
  63      000000
  64 000f 4889BD18 		movq	%rdi, -232(%rbp)
  64      FFFFFF
  65 0016 4889B510 		movq	%rsi, -240(%rbp)
  65      FFFFFF
  66 001d 48899560 		movq	%rdx, -160(%rbp)
  66      FFFFFF
  67 0024 48898D68 		movq	%rcx, -152(%rbp)
  67      FFFFFF
  68 002b 4C898570 		movq	%r8, -144(%rbp)
  68      FFFFFF
  69 0032 4C898D78 		movq	%r9, -136(%rbp)
  69      FFFFFF
  70 0039 84C0     		testb	%al, %al
  71 003b 7420     		je	.L4
  72 003d 0F294580 		movaps	%xmm0, -128(%rbp)
  73 0041 0F294D90 		movaps	%xmm1, -112(%rbp)
  74 0045 0F2955A0 		movaps	%xmm2, -96(%rbp)
  75 0049 0F295DB0 		movaps	%xmm3, -80(%rbp)
  76 004d 0F2965C0 		movaps	%xmm4, -64(%rbp)
  77 0051 0F296DD0 		movaps	%xmm5, -48(%rbp)
  78 0055 0F2975E0 		movaps	%xmm6, -32(%rbp)
  79 0059 0F297DF0 		movaps	%xmm7, -16(%rbp)
  80              	.L4:
  81              		.loc 2 72 1
  82 005d 64488B04 		movq	%fs:40, %rax
  82      25280000 
  82      00
  83 0066 48898548 		movq	%rax, -184(%rbp)
  83      FFFFFF
  84 006d 31C0     		xorl	%eax, %eax
  73:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int ret;                    /* If initialization causes  e838 */
  74:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     va_list argList;
  75:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  76:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     va_start(argList, format);
  85              		.loc 2 76 5
  86 006f C78530FF 		movl	$16, -208(%rbp)
  86      FFFF1000 
  86      0000
  87 0079 C78534FF 		movl	$48, -204(%rbp)
  87      FFFF3000 
  87      0000
  88 0083 488D4510 		leaq	16(%rbp), %rax
  89 0087 48898538 		movq	%rax, -200(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 13


  89      FFFFFF
  90 008e 488D8550 		leaq	-176(%rbp), %rax
  90      FFFFFF
  91 0095 48898540 		movq	%rax, -192(%rbp)
  91      FFFFFF
  77:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_MASK_MSVC_CRT_WARNING
  78:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ret = vsprintf(strDest, format, argList);
  92              		.loc 2 78 11
  93 009c 488D9530 		leaq	-208(%rbp), %rdx
  93      FFFFFF
  94 00a3 488B8D10 		movq	-240(%rbp), %rcx
  94      FFFFFF
  95 00aa 488B8518 		movq	-232(%rbp), %rax
  95      FFFFFF
  96 00b1 4889CE   		movq	%rcx, %rsi
  97 00b4 4889C7   		movq	%rax, %rdi
  98 00b7 E8000000 		call	vsprintf@PLT
  98      00
  99 00bc 89852CFF 		movl	%eax, -212(%rbp)
  99      FFFF
  79:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_END_MASK_MSVC_CRT_WARNING
  80:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     va_end(argList);
  81:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (void)argList; /* to clear e438 last value assigned not used , the compiler will optimize this 
  82:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  83:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return ret;
 100              		.loc 2 83 12
 101 00c2 8B852CFF 		movl	-212(%rbp), %eax
 101      FFFF
  84:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 102              		.loc 2 84 1
 103 00c8 488BB548 		movq	-184(%rbp), %rsi
 103      FFFFFF
 104 00cf 64483334 		xorq	%fs:40, %rsi
 104      25280000 
 104      00
 105 00d8 7405     		je	.L6
 106 00da E8000000 		call	__stack_chk_fail@PLT
 106      00
 107              	.L6:
 108 00df C9       		leave
 109              	.LCFI5:
 110              		.cfi_def_cfa 7, 8
 111 00e0 C3       		ret
 112              		.cfi_endproc
 113              	.LFE7:
 115              		.section	.text.SecFormatLongDboule,"ax",@progbits
 117              	SecFormatLongDboule:
 118              	.LFB8:
  85:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
  86:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
  87:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* out put long double value to dest */
  88:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecFormatLongDboule(char *strDest,const SecFormatAttr *formatAttr, const char *fmt, long
  89:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 119              		.loc 2 89 1
 120              		.cfi_startproc
 121 0000 F30F1EFA 		endbr64
 122 0004 55       		pushq	%rbp
GAS LISTING /tmp/ccgOk6Ic.s 			page 14


 123              	.LCFI6:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 6, -16
 126 0005 4889E5   		movq	%rsp, %rbp
 127              	.LCFI7:
 128              		.cfi_def_cfa_register 6
 129 0008 4883EC40 		subq	$64, %rsp
 130 000c 48897DE8 		movq	%rdi, -24(%rbp)
 131 0010 488975E0 		movq	%rsi, -32(%rbp)
 132 0014 488955D8 		movq	%rdx, -40(%rbp)
 133 0018 488B4510 		movq	16(%rbp), %rax
 134 001c 488B5518 		movq	24(%rbp), %rdx
 135 0020 488945C0 		movq	%rax, -64(%rbp)
 136 0024 488955C8 		movq	%rdx, -56(%rbp)
 137              		.loc 2 89 1
 138 0028 64488B04 		movq	%fs:40, %rax
 138      25280000 
 138      00
 139 0031 488945F8 		movq	%rax, -8(%rbp)
 140 0035 31C0     		xorl	%eax, %eax
  90:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int fldWidth = ((formatAttr->flags & SECUREC_FLAG_LEFT) ? (-(formatAttr->fldWidth)) : formatAtt
 141              		.loc 2 90 32
 142 0037 488B45E0 		movq	-32(%rbp), %rax
 143 003b 8B00     		movl	(%rax), %eax
 144              		.loc 2 90 40
 145 003d 83E004   		andl	$4, %eax
 146              		.loc 2 90 89
 147 0040 85C0     		testl	%eax, %eax
 148 0042 740B     		je	.L8
 149              		.loc 2 90 76 discriminator 1
 150 0044 488B45E0 		movq	-32(%rbp), %rax
 151 0048 8B4004   		movl	4(%rax), %eax
 152              		.loc 2 90 89 discriminator 1
 153 004b F7D8     		negl	%eax
 154 004d EB07     		jmp	.L9
 155              	.L8:
 156              		.loc 2 90 89 is_stmt 0 discriminator 2
 157 004f 488B45E0 		movq	-32(%rbp), %rax
 158 0053 8B4004   		movl	4(%rax), %eax
 159              	.L9:
 160              		.loc 2 90 9 is_stmt 1 discriminator 4
 161 0056 8945F4   		movl	%eax, -12(%rbp)
  91:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynWidth && formatAttr->dynPrecision) {
 162              		.loc 2 91 19 discriminator 4
 163 0059 488B45E0 		movq	-32(%rbp), %rax
 164 005d 8B4010   		movl	16(%rax), %eax
 165              		.loc 2 91 8 discriminator 4
 166 0060 85C0     		testl	%eax, %eax
 167 0062 7439     		je	.L10
 168              		.loc 2 91 43 discriminator 1
 169 0064 488B45E0 		movq	-32(%rbp), %rax
 170 0068 8B4014   		movl	20(%rax), %eax
 171              		.loc 2 91 30 discriminator 1
 172 006b 85C0     		testl	%eax, %eax
 173 006d 742E     		je	.L10
  92:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, formatAttr->precision, ldValue);
 174              		.loc 2 92 16
GAS LISTING /tmp/ccgOk6Ic.s 			page 15


 175 006f 488B45E0 		movq	-32(%rbp), %rax
 176 0073 8B4808   		movl	8(%rax), %ecx
 177 0076 8B55F4   		movl	-12(%rbp), %edx
 178 0079 488B75D8 		movq	-40(%rbp), %rsi
 179 007d 488B45E8 		movq	-24(%rbp), %rax
 180 0081 FF75C8   		pushq	-56(%rbp)
 181 0084 FF75C0   		pushq	-64(%rbp)
 182 0087 4889C7   		movq	%rax, %rdi
 183 008a B8000000 		movl	$0, %eax
 183      00
 184 008f E8000000 		call	SecIndirectSprintf
 184      00
 185 0094 4883C410 		addq	$16, %rsp
 186 0098 E98A0000 		jmp	.L11
 186      00
 187              	.L10:
  93:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynWidth) {
 188              		.loc 2 93 26
 189 009d 488B45E0 		movq	-32(%rbp), %rax
 190 00a1 8B4010   		movl	16(%rax), %eax
 191              		.loc 2 93 15
 192 00a4 85C0     		testl	%eax, %eax
 193 00a6 7427     		je	.L12
  94:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, ldValue);
 194              		.loc 2 94 16
 195 00a8 8B55F4   		movl	-12(%rbp), %edx
 196 00ab 488B4DD8 		movq	-40(%rbp), %rcx
 197 00af 488B45E8 		movq	-24(%rbp), %rax
 198 00b3 FF75C8   		pushq	-56(%rbp)
 199 00b6 FF75C0   		pushq	-64(%rbp)
 200 00b9 4889CE   		movq	%rcx, %rsi
 201 00bc 4889C7   		movq	%rax, %rdi
 202 00bf B8000000 		movl	$0, %eax
 202      00
 203 00c4 E8000000 		call	SecIndirectSprintf
 203      00
 204 00c9 4883C410 		addq	$16, %rsp
 205 00cd EB58     		jmp	.L11
 206              	.L12:
  95:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynPrecision) {
 207              		.loc 2 95 26
 208 00cf 488B45E0 		movq	-32(%rbp), %rax
 209 00d3 8B4014   		movl	20(%rax), %eax
 210              		.loc 2 95 15
 211 00d6 85C0     		testl	%eax, %eax
 212 00d8 742B     		je	.L13
  96:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, formatAttr->precision, ldValue);
 213              		.loc 2 96 16
 214 00da 488B45E0 		movq	-32(%rbp), %rax
 215 00de 8B5008   		movl	8(%rax), %edx
 216 00e1 488B4DD8 		movq	-40(%rbp), %rcx
 217 00e5 488B45E8 		movq	-24(%rbp), %rax
 218 00e9 FF75C8   		pushq	-56(%rbp)
 219 00ec FF75C0   		pushq	-64(%rbp)
 220 00ef 4889CE   		movq	%rcx, %rsi
 221 00f2 4889C7   		movq	%rax, %rdi
 222 00f5 B8000000 		movl	$0, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 16


 222      00
 223 00fa E8000000 		call	SecIndirectSprintf
 223      00
 224 00ff 4883C410 		addq	$16, %rsp
 225 0103 EB22     		jmp	.L11
 226              	.L13:
  97:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
  98:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return SecIndirectSprintf(strDest, fmt, ldValue);
 227              		.loc 2 98 12
 228 0105 488B55D8 		movq	-40(%rbp), %rdx
 229 0109 488B45E8 		movq	-24(%rbp), %rax
 230 010d FF75C8   		pushq	-56(%rbp)
 231 0110 FF75C0   		pushq	-64(%rbp)
 232 0113 4889D6   		movq	%rdx, %rsi
 233 0116 4889C7   		movq	%rax, %rdi
 234 0119 B8000000 		movl	$0, %eax
 234      00
 235 011e E8000000 		call	SecIndirectSprintf
 235      00
 236 0123 4883C410 		addq	$16, %rsp
 237              	.L11:
  99:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 238              		.loc 2 99 1
 239 0127 488B7DF8 		movq	-8(%rbp), %rdi
 240 012b 6448333C 		xorq	%fs:40, %rdi
 240      25280000 
 240      00
 241 0134 7405     		je	.L14
 242 0136 E8000000 		call	__stack_chk_fail@PLT
 242      00
 243              	.L14:
 244 013b C9       		leave
 245              	.LCFI8:
 246              		.cfi_def_cfa 7, 8
 247 013c C3       		ret
 248              		.cfi_endproc
 249              	.LFE8:
 251              		.section	.text.SecFormatDboule,"ax",@progbits
 253              	SecFormatDboule:
 254              	.LFB9:
 100:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 101:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 102:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* out put double value to dest */
 103:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecFormatDboule(char *strDest, const SecFormatAttr *formatAttr, const char *fmt, double 
 104:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 255              		.loc 2 104 1
 256              		.cfi_startproc
 257 0000 F30F1EFA 		endbr64
 258 0004 55       		pushq	%rbp
 259              	.LCFI9:
 260              		.cfi_def_cfa_offset 16
 261              		.cfi_offset 6, -16
 262 0005 4889E5   		movq	%rsp, %rbp
 263              	.LCFI10:
 264              		.cfi_def_cfa_register 6
 265 0008 4883EC30 		subq	$48, %rsp
 266 000c 48897DE8 		movq	%rdi, -24(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 17


 267 0010 488975E0 		movq	%rsi, -32(%rbp)
 268 0014 488955D8 		movq	%rdx, -40(%rbp)
 269 0018 F20F1145 		movsd	%xmm0, -48(%rbp)
 269      D0
 270              		.loc 2 104 1
 271 001d 64488B04 		movq	%fs:40, %rax
 271      25280000 
 271      00
 272 0026 488945F8 		movq	%rax, -8(%rbp)
 273 002a 31C0     		xorl	%eax, %eax
 105:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int fldWidth = ((formatAttr->flags & SECUREC_FLAG_LEFT) ? (-(formatAttr->fldWidth)) : formatAtt
 274              		.loc 2 105 32
 275 002c 488B45E0 		movq	-32(%rbp), %rax
 276 0030 8B00     		movl	(%rax), %eax
 277              		.loc 2 105 40
 278 0032 83E004   		andl	$4, %eax
 279              		.loc 2 105 89
 280 0035 85C0     		testl	%eax, %eax
 281 0037 740B     		je	.L16
 282              		.loc 2 105 76 discriminator 1
 283 0039 488B45E0 		movq	-32(%rbp), %rax
 284 003d 8B4004   		movl	4(%rax), %eax
 285              		.loc 2 105 89 discriminator 1
 286 0040 F7D8     		negl	%eax
 287 0042 EB07     		jmp	.L17
 288              	.L16:
 289              		.loc 2 105 89 is_stmt 0 discriminator 2
 290 0044 488B45E0 		movq	-32(%rbp), %rax
 291 0048 8B4004   		movl	4(%rax), %eax
 292              	.L17:
 293              		.loc 2 105 9 is_stmt 1 discriminator 4
 294 004b 8945F4   		movl	%eax, -12(%rbp)
 106:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynWidth && formatAttr->dynPrecision) {
 295              		.loc 2 106 19 discriminator 4
 296 004e 488B45E0 		movq	-32(%rbp), %rax
 297 0052 8B4010   		movl	16(%rax), %eax
 298              		.loc 2 106 8 discriminator 4
 299 0055 85C0     		testl	%eax, %eax
 300 0057 7438     		je	.L18
 301              		.loc 2 106 43 discriminator 1
 302 0059 488B45E0 		movq	-32(%rbp), %rax
 303 005d 8B4014   		movl	20(%rax), %eax
 304              		.loc 2 106 30 discriminator 1
 305 0060 85C0     		testl	%eax, %eax
 306 0062 742D     		je	.L18
 107:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, formatAttr->precision, dValue);
 307              		.loc 2 107 16
 308 0064 488B45E0 		movq	-32(%rbp), %rax
 309 0068 8B4808   		movl	8(%rax), %ecx
 310 006b 488B7DD0 		movq	-48(%rbp), %rdi
 311 006f 8B55F4   		movl	-12(%rbp), %edx
 312 0072 488B75D8 		movq	-40(%rbp), %rsi
 313 0076 488B45E8 		movq	-24(%rbp), %rax
 314 007a 66480F6E 		movq	%rdi, %xmm0
 314      C7
 315 007f 4889C7   		movq	%rax, %rdi
 316 0082 B8010000 		movl	$1, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 18


 316      00
 317 0087 E8000000 		call	SecIndirectSprintf
 317      00
 318 008c E9870000 		jmp	.L19
 318      00
 319              	.L18:
 108:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynWidth) {
 320              		.loc 2 108 26
 321 0091 488B45E0 		movq	-32(%rbp), %rax
 322 0095 8B4010   		movl	16(%rax), %eax
 323              		.loc 2 108 15
 324 0098 85C0     		testl	%eax, %eax
 325 009a 7426     		je	.L20
 109:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, fldWidth, dValue);
 326              		.loc 2 109 16
 327 009c 488B75D0 		movq	-48(%rbp), %rsi
 328 00a0 8B55F4   		movl	-12(%rbp), %edx
 329 00a3 488B4DD8 		movq	-40(%rbp), %rcx
 330 00a7 488B45E8 		movq	-24(%rbp), %rax
 331 00ab 66480F6E 		movq	%rsi, %xmm0
 331      C6
 332 00b0 4889CE   		movq	%rcx, %rsi
 333 00b3 4889C7   		movq	%rax, %rdi
 334 00b6 B8010000 		movl	$1, %eax
 334      00
 335 00bb E8000000 		call	SecIndirectSprintf
 335      00
 336 00c0 EB56     		jmp	.L19
 337              	.L20:
 110:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if (formatAttr->dynPrecision) {
 338              		.loc 2 110 26
 339 00c2 488B45E0 		movq	-32(%rbp), %rax
 340 00c6 8B4014   		movl	20(%rax), %eax
 341              		.loc 2 110 15
 342 00c9 85C0     		testl	%eax, %eax
 343 00cb 742A     		je	.L21
 111:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return SecIndirectSprintf(strDest, fmt, formatAttr->precision, dValue);
 344              		.loc 2 111 16
 345 00cd 488B45E0 		movq	-32(%rbp), %rax
 346 00d1 8B5008   		movl	8(%rax), %edx
 347 00d4 488B75D0 		movq	-48(%rbp), %rsi
 348 00d8 488B4DD8 		movq	-40(%rbp), %rcx
 349 00dc 488B45E8 		movq	-24(%rbp), %rax
 350 00e0 66480F6E 		movq	%rsi, %xmm0
 350      C6
 351 00e5 4889CE   		movq	%rcx, %rsi
 352 00e8 4889C7   		movq	%rax, %rdi
 353 00eb B8010000 		movl	$1, %eax
 353      00
 354 00f0 E8000000 		call	SecIndirectSprintf
 354      00
 355 00f5 EB21     		jmp	.L19
 356              	.L21:
 112:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 113:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return SecIndirectSprintf(strDest, fmt, dValue);
 357              		.loc 2 113 12
 358 00f7 488B4DD0 		movq	-48(%rbp), %rcx
GAS LISTING /tmp/ccgOk6Ic.s 			page 19


 359 00fb 488B55D8 		movq	-40(%rbp), %rdx
 360 00ff 488B45E8 		movq	-24(%rbp), %rax
 361 0103 66480F6E 		movq	%rcx, %xmm0
 361      C1
 362 0108 4889D6   		movq	%rdx, %rsi
 363 010b 4889C7   		movq	%rax, %rdi
 364 010e B8010000 		movl	$1, %eax
 364      00
 365 0113 E8000000 		call	SecIndirectSprintf
 365      00
 366              	.L19:
 114:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 367              		.loc 2 114 1
 368 0118 488B7DF8 		movq	-8(%rbp), %rdi
 369 011c 6448333C 		xorq	%fs:40, %rdi
 369      25280000 
 369      00
 370 0125 7405     		je	.L22
 371 0127 E8000000 		call	__stack_chk_fail@PLT
 371      00
 372              	.L22:
 373 012c C9       		leave
 374              	.LCFI11:
 375              		.cfi_def_cfa 7, 8
 376 012d C3       		ret
 377              		.cfi_endproc
 378              	.LFE9:
 380              		.section	.text.SecIsSameSize,"ax",@progbits
 382              	SecIsSameSize:
 383              	.LFB10:
 115:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 116:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 117:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 118:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* to clear e506 warning */
 119:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecIsSameSize(size_t sizeA, size_t sizeB)
 120:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 384              		.loc 2 120 1
 385              		.cfi_startproc
 386 0000 F30F1EFA 		endbr64
 387 0004 55       		pushq	%rbp
 388              	.LCFI12:
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 6, -16
 391 0005 4889E5   		movq	%rsp, %rbp
 392              	.LCFI13:
 393              		.cfi_def_cfa_register 6
 394 0008 4883EC20 		subq	$32, %rsp
 395 000c 48897DE8 		movq	%rdi, -24(%rbp)
 396 0010 488975E0 		movq	%rsi, -32(%rbp)
 397              		.loc 2 120 1
 398 0014 64488B04 		movq	%fs:40, %rax
 398      25280000 
 398      00
 399 001d 488945F8 		movq	%rax, -8(%rbp)
 400 0021 31C0     		xorl	%eax, %eax
 121:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return sizeA == sizeB;
 401              		.loc 2 121 18
GAS LISTING /tmp/ccgOk6Ic.s 			page 20


 402 0023 488B45E8 		movq	-24(%rbp), %rax
 403 0027 483B45E0 		cmpq	-32(%rbp), %rax
 404 002b 0F94C0   		sete	%al
 405 002e 0FB6C0   		movzbl	%al, %eax
 122:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 406              		.loc 2 122 1
 407 0031 488B55F8 		movq	-8(%rbp), %rdx
 408 0035 64483314 		xorq	%fs:40, %rdx
 408      25280000 
 408      00
 409 003e 7405     		je	.L25
 410 0040 E8000000 		call	__stack_chk_fail@PLT
 410      00
 411              	.L25:
 412 0045 C9       		leave
 413              	.LCFI14:
 414              		.cfi_def_cfa 7, 8
 415 0046 C3       		ret
 416              		.cfi_endproc
 417              	.LFE10:
 419              		.section	.text.SecDecodeFlags,"ax",@progbits
 421              	SecDecodeFlags:
 422              	.LFB11:
 123:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 124:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 125:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_DWORD(val32, numBase) do { \
 126:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 127:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[(val32) % (numBase)]; \
 128:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while (((val32) /= (numBase)) != 0)
 129:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 130:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_USE_SPECIAL_DIV64) || (defined(SECUREC_VXWORKS_VERSION_5_4) && !defined(SECUREC
 131:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 132:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Fast divide by 10 algorithm.
 133:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Calculation divisor multiply  0xcccccccccccccccdULL, resultHi64 >> 3 as quotient
 134:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 135:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static void SecU64Div10(SecUnsignedInt64 divisor, SecUnsignedInt64 *quotient, SecUnsignedInt32 *rem
 136:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 137:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 mask = 0xffffffffULL; /* use 0xffffffffULL as 32 bit mask */
 138:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 magicHi = 0xccccccccULL; /* fast divide 10 magic numbers high 32bit 0xcccccccc
 139:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 magicLow = 0xcccccccdULL; /* fast divide 10 magic numbers low 32bit  0xccccccc
 140:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 divisorHi = (SecUnsignedInt64)(SECUREC_SHR_DWORD(divisor)); /* hig 32 bit use 
 141:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 divisorLow = (SecUnsignedInt64)(divisor & mask); /* low 32 bit mask */
 142:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorHi = divisorHi * magicHi;
 143:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorLow1 = divisorHi * magicLow;
 144:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorLow2 = divisorLow * magicHi;
 145:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 factorLow3 = divisorLow * magicLow;
 146:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 carry = (factorLow1 & mask) + (factorLow2 & mask) + SECUREC_SHR_DWORD(factorLo
 147:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 resultHi64 = factorHi + SECUREC_SHR_DWORD(factorLow1) + \
 148:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                    SECUREC_SHR_DWORD(factorLow2) + SECUREC_SHR_DWORD(carry);
 149:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 150:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *quotient = resultHi64 >> 3; /* fast divide 10 magic numbers 3 */
 151:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *remainder = (SecUnsignedInt32)(divisor - ((*quotient) * 10)); /* quotient mul 10 */
 152:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return;
 153:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 154:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_VXWORKS_VERSION_5_4) && !defined(SECUREC_ON_64BITS)
 155:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 156:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Divide function for VXWORKS
GAS LISTING /tmp/ccgOk6Ic.s 			page 21


 157:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 158:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecU64Div32(SecUnsignedInt64 divisor, SecUnsignedInt32 radix,
 159:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 *quotient, SecUnsignedInt32 *remainder)
 160:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 161:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     switch (radix) {
 162:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_RADIX_DECIMAL:
 163:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             SecU64Div10(divisor, quotient, remainder);
 164:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 165:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_RADIX_HEX:
 166:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *quotient = divisor >> SECUREC_OFFSET_DIV_HEX;
 167:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *remainder = divisor & 0xfULL; /* mask one hex number by 0xfULL */
 168:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 169:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_RADIX_OCTAL:
 170:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *quotient = divisor >> SECUREC_OFFSET_DIV_OCTAL;
 171:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             *remainder = divisor & 0x7ULL; /* mask one hex number by 0x7ULL */
 172:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 173:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         default:
 174:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 175:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 176:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 177:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 178:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 179:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 180:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 181:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_USE_SPECIAL_DIV64)
 182:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* The compiler does not provide 64 bit division problems */
 183:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_QWORD_BASE10(val64) do { \
 184:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt64 quotient = 0; \
 185:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecUnsignedInt32 digit = 0; \
 186:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecU64Div10((val64), &(quotient), &(digit)); \
 187:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 188:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[digit]; \
 189:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (val64) = quotient; \
 190:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while ((val64) != 0)
 191:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 192:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_QWORD_BASE10(val64) do { \
 193:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 194:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[(val64) % SECUREC_RADIX_DECIMAL]; \
 195:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while (((val64) /= SECUREC_RADIX_DECIMAL) != 0)
 196:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 197:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SPECIAL_QWORD(val64, numBase) do { \
 198:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     --formatBuf.str; \
 199:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(formatBuf.str) = digits[(val64) % (numBase)]; \
 200:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } while (((val64) /= (numBase)) != 0)
 201:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 202:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 203:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_WRITE_STR_OPT(src, txtLen, outStream, outChars) do { \
 204:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int ii_; \
 205:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     for (ii_ = 0; ii_ < (txtLen); ++ii_) { \
 206:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *((SecChar *)(void *)((outStream)->cur)) = *(SecChar *)(src); \
 207:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->cur += sizeof(SecChar); \
 208:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (src) = (src) + 1; \
 209:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } \
 210:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->count -= (txtLen) * (int)(sizeof(SecChar)); \
 211:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(outChars) = *(outChars) + (txtLen); \
 212:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 213:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
GAS LISTING /tmp/ccgOk6Ic.s 			page 22


 214:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_WRITE_STR(src, txtLen, outStream, outChars) do { \
 215:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if ((txtLen) < 12) { /* performance optimization for mobile number length 12 */ \
 216:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_SAFE_WRITE_STR_OPT((src), (txtLen), (outStream), (outChars)); \
 217:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else { \
 218:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SecDoMemcpy((outStream)->cur, (src), ((size_t)(unsigned int)(txtLen) * (sizeof(SecChar))));
 219:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->cur += (size_t)((size_t)(unsigned int)(txtLen) * (sizeof(SecChar))); \
 220:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->count -= (txtLen) * (int)(sizeof(SecChar)); \
 221:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *(outChars) = *(outChars) + (txtLen); \
 222:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } \
 223:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 224:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 225:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_WRITE_CHAR(c, outStream, outChars) do { \
 226:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *((SecChar *)(void *)((outStream)->cur)) = (SecChar)(c); \
 227:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->cur += sizeof(SecChar); \
 228:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->count -= (int)(sizeof(SecChar)); \
 229:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(outChars) = *(outChars) + 1; \
 230:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 231:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 232:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_SAFE_PADDING(padChar, padLen, outStream, outChars) do { \
 233:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int ii_; \
 234:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     for (ii_ = 0; ii_ < (padLen); ++ii_) { \
 235:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *((SecChar *)(void *)((outStream)->cur)) = (SecChar)(padChar); \
 236:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (outStream)->cur += sizeof(SecChar); \
 237:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } \
 238:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (outStream)->count -= (padLen) * (int)(sizeof(SecChar)); \
 239:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     *(outChars) = *(outChars) + (padLen); \
 240:/home/xingli/share/1205tiny/secure_c/src/output.inl **** } SECUREC_WHILE_ZERO
 241:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 242:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* The count variable can be reduced to 0, and the external function complements the \0 terminator.
 243:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_IS_REST_BUF_ENOUGH(stream, needLen) ((int)((stream)->count - \
 244:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (int)(needLen) * (int)(sizeof(SecChar))) >= 0)
 245:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 246:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_STATE_OFFSET  256
 247:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 248:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_FMT_TYPE(c, fmtTable)  ((((unsigned int)(int)(c)) <= (unsigned int)(int)SECUREC_CHA
 249:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ((fmtTable)[(unsigned char)(c)]) : 0)
 250:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_DECODE_STATE(c, fmtTable, lastState) (SecFmtState)((((fmtTable)[(SECUREC_FMT_TYPE(c
 251:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ((unsigned char)STAT_INVALID + 1) + \
 252:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (unsigned char)(lastState) + \
 253:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_FMT_STATE_OFFSET])))
 254:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 255:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #define SECUREC_DECODE_STATE(c, fmtTable, lastState) (SecFmtState)(((fmtTable)[((fmtTable)[(unsigne
 256:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     ((unsigned char)STAT_INVALID + 1) + \
 257:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     (unsigned char)(lastState) + \
 258:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_FMT_STATE_OFFSET]))
 259:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 260:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 261:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static void SecDecodeFlags(SecChar ch, SecFormatAttr *attr)
 262:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 423              		.loc 2 262 1
 424              		.cfi_startproc
 425 0000 F30F1EFA 		endbr64
 426 0004 55       		pushq	%rbp
 427              	.LCFI15:
 428              		.cfi_def_cfa_offset 16
 429              		.cfi_offset 6, -16
 430 0005 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/ccgOk6Ic.s 			page 23


 431              	.LCFI16:
 432              		.cfi_def_cfa_register 6
 433 0008 4883EC20 		subq	$32, %rsp
 434 000c 897DEC   		movl	%edi, -20(%rbp)
 435 000f 488975E0 		movq	%rsi, -32(%rbp)
 436              		.loc 2 262 1
 437 0013 64488B04 		movq	%fs:40, %rax
 437      25280000 
 437      00
 438 001c 488945F8 		movq	%rax, -8(%rbp)
 439 0020 31C0     		xorl	%eax, %eax
 440 0022 8B45EC   		movl	-20(%rbp), %eax
 441 0025 83E820   		subl	$32, %eax
 442 0028 83F810   		cmpl	$16, %eax
 443 002b 0F878100 		ja	.L37
 443      0000
 444 0031 89C0     		movl	%eax, %eax
 445 0033 488D1485 		leaq	0(,%rax,4), %rdx
 445      00000000 
 446 003b 488D0500 		leaq	.L29(%rip), %rax
 446      000000
 447 0042 8B0402   		movl	(%rdx,%rax), %eax
 448 0045 4898     		cltq
 449 0047 488D1500 		leaq	.L29(%rip), %rdx
 449      000000
 450 004e 4801D0   		addq	%rdx, %rax
 451 0051 3EFFE0   		notrack jmp	*%rax
 452              		.section	.rodata.SecDecodeFlags,"a",@progbits
 453              		.align 4
 454              		.align 4
 455              	.L29:
 456 0000 00000000 		.long	.L33-.L29
 457 0004 00000000 		.long	.L37-.L29
 458 0008 00000000 		.long	.L37-.L29
 459 000c 00000000 		.long	.L32-.L29
 460 0010 00000000 		.long	.L37-.L29
 461 0014 00000000 		.long	.L37-.L29
 462 0018 00000000 		.long	.L37-.L29
 463 001c 00000000 		.long	.L37-.L29
 464 0020 00000000 		.long	.L37-.L29
 465 0024 00000000 		.long	.L37-.L29
 466 0028 00000000 		.long	.L37-.L29
 467 002c 00000000 		.long	.L31-.L29
 468 0030 00000000 		.long	.L37-.L29
 469 0034 00000000 		.long	.L30-.L29
 470 0038 00000000 		.long	.L37-.L29
 471 003c 00000000 		.long	.L37-.L29
 472 0040 00000000 		.long	.L28-.L29
 473              		.section	.text.SecDecodeFlags
 474              	.L33:
 263:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     switch (ch) {
 264:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR(' '):
 265:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_SIGN_SPACE;
 475              		.loc 2 265 25
 476 0054 488B45E0 		movq	-32(%rbp), %rax
 477 0058 8B00     		movl	(%rax), %eax
 478 005a 83C802   		orl	$2, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 24


 479 005d 89C2     		movl	%eax, %edx
 480 005f 488B45E0 		movq	-32(%rbp), %rax
 481 0063 8910     		movl	%edx, (%rax)
 266:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 482              		.loc 2 266 13
 483 0065 EB4C     		jmp	.L34
 484              	.L31:
 267:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('+'):
 268:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_SIGN;
 485              		.loc 2 268 25
 486 0067 488B45E0 		movq	-32(%rbp), %rax
 487 006b 8B00     		movl	(%rax), %eax
 488 006d 83C801   		orl	$1, %eax
 489 0070 89C2     		movl	%eax, %edx
 490 0072 488B45E0 		movq	-32(%rbp), %rax
 491 0076 8910     		movl	%edx, (%rax)
 269:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 492              		.loc 2 269 13
 493 0078 EB39     		jmp	.L34
 494              	.L30:
 270:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('-'):
 271:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_LEFT;
 495              		.loc 2 271 25
 496 007a 488B45E0 		movq	-32(%rbp), %rax
 497 007e 8B00     		movl	(%rax), %eax
 498 0080 83C804   		orl	$4, %eax
 499 0083 89C2     		movl	%eax, %edx
 500 0085 488B45E0 		movq	-32(%rbp), %rax
 501 0089 8910     		movl	%edx, (%rax)
 272:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 502              		.loc 2 272 13
 503 008b EB26     		jmp	.L34
 504              	.L28:
 273:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('0'):
 274:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_LEADZERO;   /* add zero th the front */
 505              		.loc 2 274 25
 506 008d 488B45E0 		movq	-32(%rbp), %rax
 507 0091 8B00     		movl	(%rax), %eax
 508 0093 83C808   		orl	$8, %eax
 509 0096 89C2     		movl	%eax, %edx
 510 0098 488B45E0 		movq	-32(%rbp), %rax
 511 009c 8910     		movl	%edx, (%rax)
 275:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 512              		.loc 2 275 13
 513 009e EB13     		jmp	.L34
 514              	.L32:
 276:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('#'):
 277:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_ALTERNATE;  /* output %x with 0x */
 515              		.loc 2 277 25
 516 00a0 488B45E0 		movq	-32(%rbp), %rax
 517 00a4 8B00     		movl	(%rax), %eax
 518 00a6 0C80     		orb	$-128, %al
 519 00a8 89C2     		movl	%eax, %edx
 520 00aa 488B45E0 		movq	-32(%rbp), %rax
 521 00ae 8910     		movl	%edx, (%rax)
 278:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 522              		.loc 2 278 13
GAS LISTING /tmp/ccgOk6Ic.s 			page 25


 523 00b0 EB01     		jmp	.L34
 524              	.L37:
 279:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         default:
 280:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 525              		.loc 2 280 13
 526 00b2 90       		nop
 527              	.L34:
 281:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 282:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return;
 528              		.loc 2 282 5
 529 00b3 90       		nop
 283:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 530              		.loc 2 283 1
 531 00b4 488B45F8 		movq	-8(%rbp), %rax
 532 00b8 64483304 		xorq	%fs:40, %rax
 532      25280000 
 532      00
 533 00c1 7405     		je	.L36
 534 00c3 E8000000 		call	__stack_chk_fail@PLT
 534      00
 535              	.L36:
 536 00c8 C9       		leave
 537              	.LCFI17:
 538              		.cfi_def_cfa 7, 8
 539 00c9 C3       		ret
 540              		.cfi_endproc
 541              	.LFE11:
 543              		.section	.text.SecDecodeSizeI,"ax",@progbits
 545              	SecDecodeSizeI:
 546              	.LFB12:
 284:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 285:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 286:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 287:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded size identifier in format string to Reduce the number of lines of function code
 288:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 289:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeSizeI(SecFormatAttr *attr, const SecChar **format)
 290:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 547              		.loc 2 290 1
 548              		.cfi_startproc
 549 0000 F30F1EFA 		endbr64
 550 0004 55       		pushq	%rbp
 551              	.LCFI18:
 552              		.cfi_def_cfa_offset 16
 553              		.cfi_offset 6, -16
 554 0005 4889E5   		movq	%rsp, %rbp
 555              	.LCFI19:
 556              		.cfi_def_cfa_register 6
 557 0008 4883EC20 		subq	$32, %rsp
 558 000c 48897DE8 		movq	%rdi, -24(%rbp)
 559 0010 488975E0 		movq	%rsi, -32(%rbp)
 560              		.loc 2 290 1
 561 0014 64488B04 		movq	%fs:40, %rax
 561      25280000 
 561      00
 562 001d 488945F8 		movq	%rax, -8(%rbp)
 563 0021 31C0     		xorl	%eax, %eax
 291:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
GAS LISTING /tmp/ccgOk6Ic.s 			page 26


 292:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->flags |= SECUREC_FLAG_I64;    /* %I  to  INT64 */
 564              		.loc 2 292 17
 565 0023 488B45E8 		movq	-24(%rbp), %rax
 566 0027 8B00     		movl	(%rax), %eax
 567 0029 80CC80   		orb	$-128, %ah
 568 002c 89C2     		movl	%eax, %edx
 569 002e 488B45E8 		movq	-24(%rbp), %rax
 570 0032 8910     		movl	%edx, (%rax)
 293:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 294:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if ((**format == SECUREC_CHAR('6')) && (*((*format) + 1) == SECUREC_CHAR('4'))) {
 571              		.loc 2 294 11
 572 0034 488B45E0 		movq	-32(%rbp), %rax
 573 0038 488B00   		movq	(%rax), %rax
 574              		.loc 2 294 10
 575 003b 8B00     		movl	(%rax), %eax
 576              		.loc 2 294 8
 577 003d 83F836   		cmpl	$54, %eax
 578 0040 753A     		jne	.L39
 579              		.loc 2 294 48 discriminator 1
 580 0042 488B45E0 		movq	-32(%rbp), %rax
 581 0046 488B00   		movq	(%rax), %rax
 582              		.loc 2 294 57 discriminator 1
 583 0049 4883C004 		addq	$4, %rax
 584              		.loc 2 294 45 discriminator 1
 585 004d 8B00     		movl	(%rax), %eax
 586              		.loc 2 294 41 discriminator 1
 587 004f 83F834   		cmpl	$52, %eax
 588 0052 7528     		jne	.L39
 295:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (*format) += 2; /* add 2 to skip I64 */
 589              		.loc 2 295 19
 590 0054 488B45E0 		movq	-32(%rbp), %rax
 591 0058 488B00   		movq	(%rax), %rax
 592 005b 488D5008 		leaq	8(%rax), %rdx
 593 005f 488B45E0 		movq	-32(%rbp), %rax
 594 0063 488910   		movq	%rdx, (%rax)
 296:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         attr->flags |= SECUREC_FLAG_I64;    /* %I64  to  INT64 */
 595              		.loc 2 296 21
 596 0066 488B45E8 		movq	-24(%rbp), %rax
 597 006a 8B00     		movl	(%rax), %eax
 598 006c 80CC80   		orb	$-128, %ah
 599 006f 89C2     		movl	%eax, %edx
 600 0071 488B45E8 		movq	-24(%rbp), %rax
 601 0075 8910     		movl	%edx, (%rax)
 602 0077 E9A00000 		jmp	.L40
 602      00
 603              	.L39:
 297:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if ((**format == SECUREC_CHAR('3')) && (*((*format) + 1) == SECUREC_CHAR('2'))) {
 604              		.loc 2 297 18
 605 007c 488B45E0 		movq	-32(%rbp), %rax
 606 0080 488B00   		movq	(%rax), %rax
 607              		.loc 2 297 17
 608 0083 8B00     		movl	(%rax), %eax
 609              		.loc 2 297 15
 610 0085 83F833   		cmpl	$51, %eax
 611 0088 7537     		jne	.L41
 612              		.loc 2 297 55 discriminator 1
 613 008a 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 27


 614 008e 488B00   		movq	(%rax), %rax
 615              		.loc 2 297 64 discriminator 1
 616 0091 4883C004 		addq	$4, %rax
 617              		.loc 2 297 52 discriminator 1
 618 0095 8B00     		movl	(%rax), %eax
 619              		.loc 2 297 48 discriminator 1
 620 0097 83F832   		cmpl	$50, %eax
 621 009a 7525     		jne	.L41
 298:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (*format) += 2; /* add 2 to skip I32 */
 622              		.loc 2 298 19
 623 009c 488B45E0 		movq	-32(%rbp), %rax
 624 00a0 488B00   		movq	(%rax), %rax
 625 00a3 488D5008 		leaq	8(%rax), %rdx
 626 00a7 488B45E0 		movq	-32(%rbp), %rax
 627 00ab 488910   		movq	%rdx, (%rax)
 299:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         attr->flags &= ~SECUREC_FLAG_I64;   /* %I64  to  INT32 */
 628              		.loc 2 299 21
 629 00ae 488B45E8 		movq	-24(%rbp), %rax
 630 00b2 8B00     		movl	(%rax), %eax
 631 00b4 80E47F   		andb	$127, %ah
 632 00b7 89C2     		movl	%eax, %edx
 633 00b9 488B45E8 		movq	-24(%rbp), %rax
 634 00bd 8910     		movl	%edx, (%rax)
 635 00bf EB5B     		jmp	.L40
 636              	.L41:
 300:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if ((**format == SECUREC_CHAR('d')) || (**format == SECUREC_CHAR('i')) ||
 637              		.loc 2 300 18
 638 00c1 488B45E0 		movq	-32(%rbp), %rax
 639 00c5 488B00   		movq	(%rax), %rax
 640              		.loc 2 300 17
 641 00c8 8B00     		movl	(%rax), %eax
 642              		.loc 2 300 15
 643 00ca 83F864   		cmpl	$100, %eax
 644 00cd 744D     		je	.L40
 645              		.loc 2 300 53 discriminator 1
 646 00cf 488B45E0 		movq	-32(%rbp), %rax
 647 00d3 488B00   		movq	(%rax), %rax
 648              		.loc 2 300 52 discriminator 1
 649 00d6 8B00     		movl	(%rax), %eax
 650              		.loc 2 300 48 discriminator 1
 651 00d8 83F869   		cmpl	$105, %eax
 652 00db 743F     		je	.L40
 301:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (**format == SECUREC_CHAR('o')) || (**format == SECUREC_CHAR('u')) ||
 653              		.loc 2 301 11 discriminator 2
 654 00dd 488B45E0 		movq	-32(%rbp), %rax
 655 00e1 488B00   		movq	(%rax), %rax
 656              		.loc 2 301 10 discriminator 2
 657 00e4 8B00     		movl	(%rax), %eax
 300:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else if ((**format == SECUREC_CHAR('d')) || (**format == SECUREC_CHAR('i')) ||
 658              		.loc 2 300 83 discriminator 2
 659 00e6 83F86F   		cmpl	$111, %eax
 660 00e9 7431     		je	.L40
 661              		.loc 2 301 46
 662 00eb 488B45E0 		movq	-32(%rbp), %rax
 663 00ef 488B00   		movq	(%rax), %rax
 664              		.loc 2 301 45
 665 00f2 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 28


 666              		.loc 2 301 41
 667 00f4 83F875   		cmpl	$117, %eax
 668 00f7 7423     		je	.L40
 302:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (**format == SECUREC_CHAR('x')) || (**format == SECUREC_CHAR('X'))) {
 669              		.loc 2 302 11 discriminator 1
 670 00f9 488B45E0 		movq	-32(%rbp), %rax
 671 00fd 488B00   		movq	(%rax), %rax
 672              		.loc 2 302 10 discriminator 1
 673 0100 8B00     		movl	(%rax), %eax
 301:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         (**format == SECUREC_CHAR('o')) || (**format == SECUREC_CHAR('u')) ||
 674              		.loc 2 301 76 discriminator 1
 675 0102 83F878   		cmpl	$120, %eax
 676 0105 7415     		je	.L40
 677              		.loc 2 302 46
 678 0107 488B45E0 		movq	-32(%rbp), %rax
 679 010b 488B00   		movq	(%rax), %rax
 680              		.loc 2 302 45
 681 010e 8B00     		movl	(%rax), %eax
 682              		.loc 2 302 41
 683 0110 83F858   		cmpl	$88, %eax
 684 0113 7407     		je	.L40
 303:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* do nothing */
 304:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 305:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* Compatibility  code for "%I" just print I */
 306:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 685              		.loc 2 306 16
 686 0115 B8FFFFFF 		movl	$-1, %eax
 686      FF
 687 011a EB05     		jmp	.L42
 688              	.L40:
 307:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 308:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 689              		.loc 2 308 12
 690 011c B8000000 		movl	$0, %eax
 690      00
 691              	.L42:
 309:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 692              		.loc 2 309 1
 693 0121 488B4DF8 		movq	-8(%rbp), %rcx
 694 0125 6448330C 		xorq	%fs:40, %rcx
 694      25280000 
 694      00
 695 012e 7405     		je	.L43
 696 0130 E8000000 		call	__stack_chk_fail@PLT
 696      00
 697              	.L43:
 698 0135 C9       		leave
 699              	.LCFI20:
 700              		.cfi_def_cfa 7, 8
 701 0136 C3       		ret
 702              		.cfi_endproc
 703              	.LFE12:
 705              		.section	.text.SecDecodeSize,"ax",@progbits
 707              	SecDecodeSize:
 708              	.LFB13:
 310:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 311:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded size identifier in format string
GAS LISTING /tmp/ccgOk6Ic.s 			page 29


 312:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 313:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeSize(SecChar ch, SecFormatAttr *attr, const SecChar **format)
 314:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 709              		.loc 2 314 1
 710              		.cfi_startproc
 711 0000 F30F1EFA 		endbr64
 712 0004 55       		pushq	%rbp
 713              	.LCFI21:
 714              		.cfi_def_cfa_offset 16
 715              		.cfi_offset 6, -16
 716 0005 4889E5   		movq	%rsp, %rbp
 717              	.LCFI22:
 718              		.cfi_def_cfa_register 6
 719 0008 4883EC30 		subq	$48, %rsp
 720 000c 897DEC   		movl	%edi, -20(%rbp)
 721 000f 488975E0 		movq	%rsi, -32(%rbp)
 722 0013 488955D8 		movq	%rdx, -40(%rbp)
 723              		.loc 2 314 1
 724 0017 64488B04 		movq	%fs:40, %rax
 724      25280000 
 724      00
 725 0020 488945F8 		movq	%rax, -8(%rbp)
 726 0024 31C0     		xorl	%eax, %eax
 727 0026 8B45EC   		movl	-20(%rbp), %eax
 728 0029 83E849   		subl	$73, %eax
 729 002c 83F831   		cmpl	$49, %eax
 730 002f 0F872C01 		ja	.L63
 730      0000
 731 0035 89C0     		movl	%eax, %eax
 732 0037 488D1485 		leaq	0(,%rax,4), %rdx
 732      00000000 
 733 003f 488D0500 		leaq	.L47(%rip), %rax
 733      000000
 734 0046 8B0402   		movl	(%rdx,%rax), %eax
 735 0049 4898     		cltq
 736 004b 488D1500 		leaq	.L47(%rip), %rdx
 736      000000
 737 0052 4801D0   		addq	%rdx, %rax
 738 0055 3EFFE0   		notrack jmp	*%rax
 739              		.section	.rodata.SecDecodeSize,"a",@progbits
 740              		.align 4
 741              		.align 4
 742              	.L47:
 743 0000 00000000 		.long	.L54-.L47
 744 0004 00000000 		.long	.L63-.L47
 745 0008 00000000 		.long	.L63-.L47
 746 000c 00000000 		.long	.L50-.L47
 747 0010 00000000 		.long	.L63-.L47
 748 0014 00000000 		.long	.L63-.L47
 749 0018 00000000 		.long	.L63-.L47
 750 001c 00000000 		.long	.L63-.L47
 751 0020 00000000 		.long	.L63-.L47
 752 0024 00000000 		.long	.L63-.L47
 753 0028 00000000 		.long	.L63-.L47
 754 002c 00000000 		.long	.L63-.L47
 755 0030 00000000 		.long	.L63-.L47
 756 0034 00000000 		.long	.L63-.L47
GAS LISTING /tmp/ccgOk6Ic.s 			page 30


 757 0038 00000000 		.long	.L63-.L47
 758 003c 00000000 		.long	.L63-.L47
 759 0040 00000000 		.long	.L63-.L47
 760 0044 00000000 		.long	.L46-.L47
 761 0048 00000000 		.long	.L63-.L47
 762 004c 00000000 		.long	.L63-.L47
 763 0050 00000000 		.long	.L63-.L47
 764 0054 00000000 		.long	.L63-.L47
 765 0058 00000000 		.long	.L63-.L47
 766 005c 00000000 		.long	.L63-.L47
 767 0060 00000000 		.long	.L63-.L47
 768 0064 00000000 		.long	.L63-.L47
 769 0068 00000000 		.long	.L63-.L47
 770 006c 00000000 		.long	.L63-.L47
 771 0070 00000000 		.long	.L63-.L47
 772 0074 00000000 		.long	.L63-.L47
 773 0078 00000000 		.long	.L63-.L47
 774 007c 00000000 		.long	.L53-.L47
 775 0080 00000000 		.long	.L63-.L47
 776 0084 00000000 		.long	.L52-.L47
 777 0088 00000000 		.long	.L63-.L47
 778 008c 00000000 		.long	.L51-.L47
 779 0090 00000000 		.long	.L63-.L47
 780 0094 00000000 		.long	.L63-.L47
 781 0098 00000000 		.long	.L63-.L47
 782 009c 00000000 		.long	.L63-.L47
 783 00a0 00000000 		.long	.L50-.L47
 784 00a4 00000000 		.long	.L63-.L47
 785 00a8 00000000 		.long	.L63-.L47
 786 00ac 00000000 		.long	.L49-.L47
 787 00b0 00000000 		.long	.L63-.L47
 788 00b4 00000000 		.long	.L63-.L47
 789 00b8 00000000 		.long	.L48-.L47
 790 00bc 00000000 		.long	.L63-.L47
 791 00c0 00000000 		.long	.L63-.L47
 792 00c4 00000000 		.long	.L46-.L47
 793              		.section	.text.SecDecodeSize
 794              	.L52:
 315:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     switch (ch) {
 316:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 317:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('j'):
 318:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_INTMAX;
 795              		.loc 2 318 25
 796 0058 488B45E0 		movq	-32(%rbp), %rax
 797 005c 8B00     		movl	(%rax), %eax
 798 005e 0D000004 		orl	$262144, %eax
 798      00
 799 0063 89C2     		movl	%eax, %edx
 800 0065 488B45E0 		movq	-32(%rbp), %rax
 801 0069 8910     		movl	%edx, (%rax)
 319:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 802              		.loc 2 319 13
 803 006b E9F50000 		jmp	.L55
 803      00
 804              	.L50:
 320:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 321:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('q'):
GAS LISTING /tmp/ccgOk6Ic.s 			page 31


 322:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             /* fall-through */ /* FALLTHRU */
 323:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('L'):
 324:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_LONGLONG | SECUREC_FLAG_LONG_DOUBLE;
 805              		.loc 2 324 25
 806 0070 488B45E0 		movq	-32(%rbp), %rax
 807 0074 8B00     		movl	(%rax), %eax
 808 0076 80CC14   		orb	$20, %ah
 809 0079 89C2     		movl	%eax, %edx
 810 007b 488B45E0 		movq	-32(%rbp), %rax
 811 007f 8910     		movl	%edx, (%rax)
 325:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 812              		.loc 2 325 13
 813 0081 E9DF0000 		jmp	.L55
 813      00
 814              	.L51:
 326:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('l'):
 327:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (**format == SECUREC_CHAR('l')) {
 815              		.loc 2 327 18
 816 0086 488B45D8 		movq	-40(%rbp), %rax
 817 008a 488B00   		movq	(%rax), %rax
 818              		.loc 2 327 17
 819 008d 8B00     		movl	(%rax), %eax
 820              		.loc 2 327 16
 821 008f 83F86C   		cmpl	$108, %eax
 822 0092 7528     		jne	.L56
 328:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 *format = *format + 1;
 823              		.loc 2 328 27
 824 0094 488B45D8 		movq	-40(%rbp), %rax
 825 0098 488B00   		movq	(%rax), %rax
 826              		.loc 2 328 35
 827 009b 488D5004 		leaq	4(%rax), %rdx
 828              		.loc 2 328 25
 829 009f 488B45D8 		movq	-40(%rbp), %rax
 830 00a3 488910   		movq	%rdx, (%rax)
 329:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_LONGLONG;   /* long long */
 831              		.loc 2 329 29
 832 00a6 488B45E0 		movq	-32(%rbp), %rax
 833 00aa 8B00     		movl	(%rax), %eax
 834 00ac 80CC10   		orb	$16, %ah
 835 00af 89C2     		movl	%eax, %edx
 836 00b1 488B45E0 		movq	-32(%rbp), %rax
 837 00b5 8910     		movl	%edx, (%rax)
 330:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             } else {
 331:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_LONG;   /* long int or wchar_t */
 332:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 333:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 838              		.loc 2 333 13
 839 00b7 E9A90000 		jmp	.L55
 839      00
 840              	.L56:
 331:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 841              		.loc 2 331 29
 842 00bc 488B45E0 		movq	-32(%rbp), %rax
 843 00c0 8B00     		movl	(%rax), %eax
 844 00c2 83C810   		orl	$16, %eax
 845 00c5 89C2     		movl	%eax, %edx
 846 00c7 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 32


 847 00cb 8910     		movl	%edx, (%rax)
 848              		.loc 2 333 13
 849 00cd E9930000 		jmp	.L55
 849      00
 850              	.L49:
 334:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('t'):
 335:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_PTRDIFF;
 851              		.loc 2 335 25
 852 00d2 488B45E0 		movq	-32(%rbp), %rax
 853 00d6 8B00     		movl	(%rax), %eax
 854 00d8 0D000001 		orl	$65536, %eax
 854      00
 855 00dd 89C2     		movl	%eax, %edx
 856 00df 488B45E0 		movq	-32(%rbp), %rax
 857 00e3 8910     		movl	%edx, (%rax)
 336:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 858              		.loc 2 336 13
 859 00e5 EB7E     		jmp	.L55
 860              	.L46:
 337:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 338:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('z'):
 339:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             /* fall-through */ /* FALLTHRU */
 340:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('Z'):
 341:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_SIZE;
 861              		.loc 2 341 25
 862 00e7 488B45E0 		movq	-32(%rbp), %rax
 863 00eb 8B00     		movl	(%rax), %eax
 864 00ed 0D000002 		orl	$131072, %eax
 864      00
 865 00f2 89C2     		movl	%eax, %edx
 866 00f4 488B45E0 		movq	-32(%rbp), %rax
 867 00f8 8910     		movl	%edx, (%rax)
 342:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 868              		.loc 2 342 13
 869 00fa EB69     		jmp	.L55
 870              	.L54:
 343:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 344:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('I'):
 345:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (SecDecodeSizeI(attr, format) != 0) {
 871              		.loc 2 345 17
 872 00fc 488B55D8 		movq	-40(%rbp), %rdx
 873 0100 488B45E0 		movq	-32(%rbp), %rax
 874 0104 4889D6   		movq	%rdx, %rsi
 875 0107 4889C7   		movq	%rax, %rdi
 876 010a E8000000 		call	SecDecodeSizeI
 876      00
 877              		.loc 2 345 16
 878 010f 85C0     		testl	%eax, %eax
 879 0111 7451     		je	.L64
 346:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* Compatibility  code for "%I" just print I */
 347:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;
 880              		.loc 2 347 24
 881 0113 B8FFFFFF 		movl	$-1, %eax
 881      FF
 882 0118 EB50     		jmp	.L59
 883              	.L53:
 348:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
GAS LISTING /tmp/ccgOk6Ic.s 			page 33


 349:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 350:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('h'):
 351:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (**format == SECUREC_CHAR('h')) {
 884              		.loc 2 351 18
 885 011a 488B45D8 		movq	-40(%rbp), %rax
 886 011e 488B00   		movq	(%rax), %rax
 887              		.loc 2 351 17
 888 0121 8B00     		movl	(%rax), %eax
 889              		.loc 2 351 16
 890 0123 83F868   		cmpl	$104, %eax
 891 0126 7513     		jne	.L60
 352:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_CHAR;   /* char */
 892              		.loc 2 352 29
 893 0128 488B45E0 		movq	-32(%rbp), %rax
 894 012c 8B00     		movl	(%rax), %eax
 895 012e 80CC20   		orb	$32, %ah
 896 0131 89C2     		movl	%eax, %edx
 897 0133 488B45E0 		movq	-32(%rbp), %rax
 898 0137 8910     		movl	%edx, (%rax)
 353:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             } else {
 354:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 attr->flags |= SECUREC_FLAG_SHORT;  /* short int */
 355:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 356:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 899              		.loc 2 356 13
 900 0139 EB2A     		jmp	.L55
 901              	.L60:
 354:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 902              		.loc 2 354 29
 903 013b 488B45E0 		movq	-32(%rbp), %rax
 904 013f 8B00     		movl	(%rax), %eax
 905 0141 83C820   		orl	$32, %eax
 906 0144 89C2     		movl	%eax, %edx
 907 0146 488B45E0 		movq	-32(%rbp), %rax
 908 014a 8910     		movl	%edx, (%rax)
 909              		.loc 2 356 13
 910 014c EB17     		jmp	.L55
 911              	.L48:
 357:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('w'):
 358:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             attr->flags |= SECUREC_FLAG_WIDECHAR;   /* wide char */
 912              		.loc 2 358 25
 913 014e 488B45E0 		movq	-32(%rbp), %rax
 914 0152 8B00     		movl	(%rax), %eax
 915 0154 80CC08   		orb	$8, %ah
 916 0157 89C2     		movl	%eax, %edx
 917 0159 488B45E0 		movq	-32(%rbp), %rax
 918 015d 8910     		movl	%edx, (%rax)
 359:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 919              		.loc 2 359 13
 920 015f EB04     		jmp	.L55
 921              	.L63:
 360:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         default:
 361:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             break;
 922              		.loc 2 361 13
 923 0161 90       		nop
 924 0162 EB01     		jmp	.L55
 925              	.L64:
 349:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         case SECUREC_CHAR('h'):
GAS LISTING /tmp/ccgOk6Ic.s 			page 34


 926              		.loc 2 349 13
 927 0164 90       		nop
 928              	.L55:
 362:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 363:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 929              		.loc 2 363 12
 930 0165 B8000000 		movl	$0, %eax
 930      00
 931              	.L59:
 364:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 932              		.loc 2 364 1
 933 016a 488B4DF8 		movq	-8(%rbp), %rcx
 934 016e 6448330C 		xorq	%fs:40, %rcx
 934      25280000 
 934      00
 935 0177 7405     		je	.L62
 936 0179 E8000000 		call	__stack_chk_fail@PLT
 936      00
 937              	.L62:
 938 017e C9       		leave
 939              	.LCFI23:
 940              		.cfi_def_cfa 7, 8
 941 017f C3       		ret
 942              		.cfi_endproc
 943              	.LFE13:
 945              		.section	.text.SecDecodeTypeC,"ax",@progbits
 947              	SecDecodeTypeC:
 948              	.LFB14:
 365:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 366:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 367:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded char type identifier
 368:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 369:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeC(SecFormatAttr *attr, unsigned int cValue, SecFormatBuf *formatBuf, SecBuf
 370:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 949              		.loc 2 370 1
 950              		.cfi_startproc
 951 0000 F30F1EFA 		endbr64
 952 0004 55       		pushq	%rbp
 953              	.LCFI24:
 954              		.cfi_def_cfa_offset 16
 955              		.cfi_offset 6, -16
 956 0005 4889E5   		movq	%rsp, %rbp
 957              	.LCFI25:
 958              		.cfi_def_cfa_register 6
 959 0008 4883EC30 		subq	$48, %rsp
 960 000c 48897DE8 		movq	%rdi, -24(%rbp)
 961 0010 8975E4   		movl	%esi, -28(%rbp)
 962 0013 488955D8 		movq	%rdx, -40(%rbp)
 963 0017 48894DD0 		movq	%rcx, -48(%rbp)
 964              		.loc 2 370 1
 965 001b 64488B04 		movq	%fs:40, %rax
 965      25280000 
 965      00
 966 0024 488945F8 		movq	%rax, -8(%rbp)
 967 0028 31C0     		xorl	%eax, %eax
 371:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT)) && !(defined(__hpux)) && !(defined(SECUREC_ON_SOLARI
 372:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->flags &= ~SECUREC_FLAG_LEADZERO;
GAS LISTING /tmp/ccgOk6Ic.s 			page 35


 968              		.loc 2 372 17
 969 002a 488B45E8 		movq	-24(%rbp), %rax
 970 002e 8B00     		movl	(%rax), %eax
 971 0030 83E0F7   		andl	$-9, %eax
 972 0033 89C2     		movl	%eax, %edx
 973 0035 488B45E8 		movq	-24(%rbp), %rax
 974 0039 8910     		movl	%edx, (%rax)
 373:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 374:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 375:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 376:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->bufferIsWide = 1;
 975              		.loc 2 376 24
 976 003b 488B45E8 		movq	-24(%rbp), %rax
 977 003f C7400C01 		movl	$1, 12(%rax)
 977      000000
 377:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & SECUREC_FLAG_SHORT) {
 978              		.loc 2 377 13
 979 0046 488B45E8 		movq	-24(%rbp), %rax
 980 004a 8B00     		movl	(%rax), %eax
 981              		.loc 2 377 21
 982 004c 83E020   		andl	$32, %eax
 983              		.loc 2 377 8
 984 004f 85C0     		testl	%eax, %eax
 985 0051 742D     		je	.L66
 986              	.LBB2:
 378:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_MBTOWC
 379:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* multibyte character to wide  character */
 380:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         char tmpChar[2]; /* One character string, length is 2 */
 381:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         tmpChar[0] = (char)(cValue & 0x00ff);
 987              		.loc 2 381 22
 988 0053 8B45E4   		movl	-28(%rbp), %eax
 989              		.loc 2 381 20
 990 0056 8845F6   		movb	%al, -10(%rbp)
 382:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         tmpChar[1] = '\0';
 991              		.loc 2 382 20
 992 0059 C645F700 		movb	$0, -9(%rbp)
 383:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 384:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (mbtowc(buffer->wStr, tmpChar, sizeof(tmpChar)) < 0) {
 993              		.loc 2 384 26
 994 005d 488B45D0 		movq	-48(%rbp), %rax
 995              		.loc 2 384 13
 996 0061 488D4DF6 		leaq	-10(%rbp), %rcx
 997 0065 BA020000 		movl	$2, %edx
 997      00
 998 006a 4889CE   		movq	%rcx, %rsi
 999 006d 4889C7   		movq	%rax, %rdi
 1000 0070 E8000000 		call	mbtowc@PLT
 1000      00
 1001              		.loc 2 384 12
 1002 0075 85C0     		testl	%eax, %eax
 1003 0077 7910     		jns	.L69
 385:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1004              		.loc 2 385 20
 1005 0079 B8FFFFFF 		movl	$-1, %eax
 1005      FF
 1006 007e EB19     		jmp	.L68
 1007              	.L66:
GAS LISTING /tmp/ccgOk6Ic.s 			page 36


 1008              	.LBE2:
 386:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 387:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 388:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 389:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 390:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 391:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         buffer->wStr[0] = (wchar_t)cValue;
 1009              		.loc 2 391 27
 1010 0080 8B55E4   		movl	-28(%rbp), %edx
 1011              		.loc 2 391 25
 1012 0083 488B45D0 		movq	-48(%rbp), %rax
 1013 0087 8910     		movl	%edx, (%rax)
 1014              	.L69:
 392:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 393:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatBuf->wStr = buffer->wStr;
 1015              		.loc 2 393 23
 1016 0089 488B55D0 		movq	-48(%rbp), %rdx
 1017              		.loc 2 393 21
 1018 008d 488B45D8 		movq	-40(%rbp), %rax
 1019 0091 488910   		movq	%rdx, (%rax)
 394:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 1;                /* only 1 wide character */
 1020              		.loc 2 394 12
 1021 0094 B8010000 		movl	$1, %eax
 1021      00
 1022              	.L68:
 395:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* SECUREC_FOR_WCHAR */
 396:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->bufferIsWide = 0;
 397:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & (SECUREC_FLAG_LONG | SECUREC_FLAG_WIDECHAR)) {
 398:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCTOMB
 399:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         wchar_t wChar = (wchar_t)cValue;
 400:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         int textLen;
 401:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* wide  character  to multibyte character */
 402:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_MASK_MSVC_CRT_WARNING
 403:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = wctomb(buffer->str, wChar);
 404:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_END_MASK_MSVC_CRT_WARNING
 405:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (textLen < 0) {
 406:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 407:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 408:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->str = buffer->str;
 409:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return textLen;
 410:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 411:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 412:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 413:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 414:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* get  multibyte character from argument */
 415:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         unsigned short temp;
 416:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         temp = (unsigned short)cValue;
 417:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         buffer->str[0] = (char)temp;
 418:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->str = buffer->str;
 419:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return 1; /* only 1 character */
 420:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 421:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 422:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 423:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1023              		.loc 2 423 1
 1024 0099 488B75F8 		movq	-8(%rbp), %rsi
 1025 009d 64483334 		xorq	%fs:40, %rsi
GAS LISTING /tmp/ccgOk6Ic.s 			page 37


 1025      25280000 
 1025      00
 1026 00a6 7405     		je	.L70
 1027 00a8 E8000000 		call	__stack_chk_fail@PLT
 1027      00
 1028              	.L70:
 1029 00ad C9       		leave
 1030              	.LCFI26:
 1031              		.cfi_def_cfa 7, 8
 1032 00ae C3       		ret
 1033              		.cfi_endproc
 1034              	.LFE14:
 1036              		.section	.data.g_wStrNullString,"aw"
 1037              		.align 32
 1040              	g_wStrNullString:
 1041 0000 28000000 		.long	40
 1042 0004 6E000000 		.long	110
 1043 0008 75000000 		.long	117
 1044 000c 6C000000 		.long	108
 1045 0010 6C000000 		.long	108
 1046 0014 29000000 		.long	41
 1047 0018 00000000 		.long	0
 1048 001c 00000000 		.long	0
 1049              		.section	.data.g_strNullString,"aw"
 1050              		.align 8
 1053              	g_strNullString:
 1054 0000 286E756C 		.string	"(null)"
 1054      6C2900
 1055 0007 00       		.zero	1
 1056              		.section	.text.SecDecodeTypeSchar,"ax",@progbits
 1058              	SecDecodeTypeSchar:
 1059              	.LFB15:
 424:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 425:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /* literal string to print null ptr, define it as array rather than const text area
 426:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * is to avoid gcc warning with pointing const text with variable
 427:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 428:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
 429:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static wchar_t g_wStrNullString[SECUREC_NULL_STRING_SIZE] = { L'(', L'n', L'u', L'l', L'l', L')', L
 430:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 431:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static char g_strNullString[SECUREC_NULL_STRING_SIZE] = "(null)";
 432:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 433:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeSchar(const SecFormatAttr *attr, SecFormatBuf *formatBuf)
 434:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1060              		.loc 2 434 1
 1061              		.cfi_startproc
 1062 0000 F30F1EFA 		endbr64
 1063 0004 55       		pushq	%rbp
 1064              	.LCFI27:
 1065              		.cfi_def_cfa_offset 16
 1066              		.cfi_offset 6, -16
 1067 0005 4889E5   		movq	%rsp, %rbp
 1068              	.LCFI28:
 1069              		.cfi_def_cfa_register 6
 1070 0008 4883EC30 		subq	$48, %rsp
 1071 000c 48897DD8 		movq	%rdi, -40(%rbp)
 1072 0010 488975D0 		movq	%rsi, -48(%rbp)
 1073              		.loc 2 434 1
GAS LISTING /tmp/ccgOk6Ic.s 			page 38


 1074 0014 64488B04 		movq	%fs:40, %rax
 1074      25280000 
 1074      00
 1075 001d 488945F8 		movq	%rax, -8(%rbp)
 1076 0021 31C0     		xorl	%eax, %eax
 435:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int finalPrecision = (attr->precision == -1) ? SECUREC_INT_MAX : attr->precision;
 1077              		.loc 2 435 31
 1078 0023 488B45D8 		movq	-40(%rbp), %rax
 1079 0027 8B4008   		movl	8(%rax), %eax
 1080              		.loc 2 435 68
 1081 002a 83F8FF   		cmpl	$-1, %eax
 1082 002d 7409     		je	.L72
 1083              		.loc 2 435 68 is_stmt 0 discriminator 1
 1084 002f 488B45D8 		movq	-40(%rbp), %rax
 1085 0033 8B4008   		movl	8(%rax), %eax
 1086 0036 EB05     		jmp	.L73
 1087              	.L72:
 1088              		.loc 2 435 68 discriminator 2
 1089 0038 B8FFFFFF 		movl	$2147483647, %eax
 1089      7F
 1090              	.L73:
 1091              		.loc 2 435 9 is_stmt 1 discriminator 4
 1092 003d 8945EC   		movl	%eax, -20(%rbp)
 436:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;
 437:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 438:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatBuf->str == NULL) {   /* NULL passed, use special string */
 1093              		.loc 2 438 18 discriminator 4
 1094 0040 488B45D0 		movq	-48(%rbp), %rax
 1095 0044 488B00   		movq	(%rax), %rax
 1096              		.loc 2 438 8 discriminator 4
 1097 0047 4885C0   		testq	%rax, %rax
 1098 004a 750E     		jne	.L74
 439:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->str = g_strNullString;
 1099              		.loc 2 439 24
 1100 004c 488B45D0 		movq	-48(%rbp), %rax
 1101 0050 488D1500 		leaq	g_strNullString(%rip), %rdx
 1101      000000
 1102 0057 488910   		movq	%rdx, (%rax)
 1103              	.L74:
 440:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 441:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (finalPrecision == SECUREC_INT_MAX) {
 1104              		.loc 2 441 8
 1105 005a 817DECFF 		cmpl	$2147483647, -20(%rbp)
 1105      FFFF7F
 1106 0061 7514     		jne	.L75
 442:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* precision NOT assigned */
 443:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* The strlen performance is high when the string length is greater than 32 */
 444:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = (int)strlen(formatBuf->str);
 1107              		.loc 2 444 40
 1108 0063 488B45D0 		movq	-48(%rbp), %rax
 1109 0067 488B00   		movq	(%rax), %rax
 1110              		.loc 2 444 24
 1111 006a 4889C7   		movq	%rax, %rdi
 1112 006d E8000000 		call	strlen@PLT
 1112      00
 1113              		.loc 2 444 17
 1114 0072 8945E8   		movl	%eax, -24(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 39


 1115 0075 EB22     		jmp	.L76
 1116              	.L75:
 1117              	.LBB3:
 445:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 446:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* precision assigned */
 447:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         size_t tmpLen;
 448:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_CALC_STR_LEN(formatBuf->str, (size_t)(unsigned int)finalPrecision, &tmpLen);
 1118              		.loc 2 448 9
 1119 0077 8B45EC   		movl	-20(%rbp), %eax
 1120 007a 89C2     		movl	%eax, %edx
 1121 007c 488B45D0 		movq	-48(%rbp), %rax
 1122 0080 488B00   		movq	(%rax), %rax
 1123 0083 4889D6   		movq	%rdx, %rsi
 1124 0086 4889C7   		movq	%rax, %rdi
 1125 0089 E8000000 		call	strnlen@PLT
 1125      00
 1126 008e 488945F0 		movq	%rax, -16(%rbp)
 449:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = (int)tmpLen;
 1127              		.loc 2 449 19
 1128 0092 488B45F0 		movq	-16(%rbp), %rax
 1129              		.loc 2 449 17
 1130 0096 8945E8   		movl	%eax, -24(%rbp)
 1131              	.L76:
 1132              	.LBE3:
 450:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 451:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return textLen;
 1133              		.loc 2 451 12
 1134 0099 8B45E8   		movl	-24(%rbp), %eax
 452:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1135              		.loc 2 452 1
 1136 009c 488B4DF8 		movq	-8(%rbp), %rcx
 1137 00a0 6448330C 		xorq	%fs:40, %rcx
 1137      25280000 
 1137      00
 1138 00a9 7405     		je	.L78
 1139 00ab E8000000 		call	__stack_chk_fail@PLT
 1139      00
 1140              	.L78:
 1141 00b0 C9       		leave
 1142              	.LCFI29:
 1143              		.cfi_def_cfa 7, 8
 1144 00b1 C3       		ret
 1145              		.cfi_endproc
 1146              	.LFE15:
 1148              		.section	.text.SecDecodeTypeSwchar,"ax",@progbits
 1150              	SecDecodeTypeSwchar:
 1151              	.LFB16:
 453:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 454:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
 455:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeSwchar(SecFormatAttr *attr, SecFormatBuf *formatBuf)
 456:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1152              		.loc 2 456 1
 1153              		.cfi_startproc
 1154 0000 F30F1EFA 		endbr64
 1155 0004 55       		pushq	%rbp
 1156              	.LCFI30:
 1157              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccgOk6Ic.s 			page 40


 1158              		.cfi_offset 6, -16
 1159 0005 4889E5   		movq	%rsp, %rbp
 1160              	.LCFI31:
 1161              		.cfi_def_cfa_register 6
 1162 0008 4883EC30 		subq	$48, %rsp
 1163 000c 48897DD8 		movq	%rdi, -40(%rbp)
 1164 0010 488975D0 		movq	%rsi, -48(%rbp)
 1165              		.loc 2 456 1
 1166 0014 64488B04 		movq	%fs:40, %rax
 1166      25280000 
 1166      00
 1167 001d 488945F8 		movq	%rax, -8(%rbp)
 1168 0021 31C0     		xorl	%eax, %eax
 457:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int finalPrecision = (attr->precision == -1) ? SECUREC_INT_MAX : attr->precision;
 1169              		.loc 2 457 31
 1170 0023 488B45D8 		movq	-40(%rbp), %rax
 1171 0027 8B4008   		movl	8(%rax), %eax
 1172              		.loc 2 457 68
 1173 002a 83F8FF   		cmpl	$-1, %eax
 1174 002d 7409     		je	.L80
 1175              		.loc 2 457 68 is_stmt 0 discriminator 1
 1176 002f 488B45D8 		movq	-40(%rbp), %rax
 1177 0033 8B4008   		movl	8(%rax), %eax
 1178 0036 EB05     		jmp	.L81
 1179              	.L80:
 1180              		.loc 2 457 68 discriminator 2
 1181 0038 B8FFFFFF 		movl	$2147483647, %eax
 1181      7F
 1182              	.L81:
 1183              		.loc 2 457 9 is_stmt 1 discriminator 4
 1184 003d 8945EC   		movl	%eax, -20(%rbp)
 458:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;
 459:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 460:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->bufferIsWide = 1;
 1185              		.loc 2 460 24 discriminator 4
 1186 0040 488B45D8 		movq	-40(%rbp), %rax
 1187 0044 C7400C01 		movl	$1, 12(%rax)
 1187      000000
 461:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatBuf->wStr == NULL) {  /* NULL passed, use special string */
 1188              		.loc 2 461 18 discriminator 4
 1189 004b 488B45D0 		movq	-48(%rbp), %rax
 1190 004f 488B00   		movq	(%rax), %rax
 1191              		.loc 2 461 8 discriminator 4
 1192 0052 4885C0   		testq	%rax, %rax
 1193 0055 750E     		jne	.L82
 462:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatBuf->wStr = g_wStrNullString;
 1194              		.loc 2 462 25
 1195 0057 488B45D0 		movq	-48(%rbp), %rax
 1196 005b 488D1500 		leaq	g_wStrNullString(%rip), %rdx
 1196      000000
 1197 0062 488910   		movq	%rdx, (%rax)
 1198              	.L82:
 1199              	.LBB4:
 463:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 464:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* textLen in wchar_t */
 465:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SECUREC_CALC_WSTR_LEN(formatBuf->wStr, finalPrecision, &textLen);
 1200              		.loc 2 465 5
GAS LISTING /tmp/ccgOk6Ic.s 			page 41


 1201 0065 488B45D0 		movq	-48(%rbp), %rax
 1202 0069 488B00   		movq	(%rax), %rax
 1203 006c 488945F0 		movq	%rax, -16(%rbp)
 1204 0070 C745E800 		movl	$0, -24(%rbp)
 1204      000000
 1205 0077 EB0E     		jmp	.L83
 1206              	.L85:
 1207              		.loc 2 465 5 is_stmt 0 discriminator 4
 1208 0079 8B45E8   		movl	-24(%rbp), %eax
 1209 007c 83C001   		addl	$1, %eax
 1210 007f 8945E8   		movl	%eax, -24(%rbp)
 1211 0082 488345F0 		addq	$4, -16(%rbp)
 1211      04
 1212              	.L83:
 1213              		.loc 2 465 5 discriminator 1
 1214 0087 8B45E8   		movl	-24(%rbp), %eax
 1215 008a 3945EC   		cmpl	%eax, -20(%rbp)
 1216 008d 7E0A     		jle	.L84
 1217              		.loc 2 465 5 discriminator 3
 1218 008f 488B45F0 		movq	-16(%rbp), %rax
 1219 0093 8B00     		movl	(%rax), %eax
 1220 0095 85C0     		testl	%eax, %eax
 1221 0097 75E0     		jne	.L85
 1222              	.L84:
 1223              	.LBE4:
 466:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 467:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return textLen;
 1224              		.loc 2 467 12 is_stmt 1
 1225 0099 8B45E8   		movl	-24(%rbp), %eax
 468:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1226              		.loc 2 468 1
 1227 009c 488B4DF8 		movq	-8(%rbp), %rcx
 1228 00a0 6448330C 		xorq	%fs:40, %rcx
 1228      25280000 
 1228      00
 1229 00a9 7405     		je	.L87
 1230 00ab E8000000 		call	__stack_chk_fail@PLT
 1230      00
 1231              	.L87:
 1232 00b0 C9       		leave
 1233              	.LCFI32:
 1234              		.cfi_def_cfa 7, 8
 1235 00b1 C3       		ret
 1236              		.cfi_endproc
 1237              	.LFE16:
 1239              		.section	.text.SecDecodeTypeS,"ax",@progbits
 1241              	SecDecodeTypeS:
 1242              	.LFB17:
 469:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 470:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 471:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 472:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Decoded string identifier
 473:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 474:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeTypeS(SecFormatAttr *attr, char *argPtr, SecFormatBuf *formatBuf)
 475:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1243              		.loc 2 475 1
 1244              		.cfi_startproc
GAS LISTING /tmp/ccgOk6Ic.s 			page 42


 1245 0000 F30F1EFA 		endbr64
 1246 0004 55       		pushq	%rbp
 1247              	.LCFI33:
 1248              		.cfi_def_cfa_offset 16
 1249              		.cfi_offset 6, -16
 1250 0005 4889E5   		movq	%rsp, %rbp
 1251              	.LCFI34:
 1252              		.cfi_def_cfa_register 6
 1253 0008 4883EC30 		subq	$48, %rsp
 1254 000c 48897DE8 		movq	%rdi, -24(%rbp)
 1255 0010 488975E0 		movq	%rsi, -32(%rbp)
 1256 0014 488955D8 		movq	%rdx, -40(%rbp)
 1257              		.loc 2 475 1
 1258 0018 64488B04 		movq	%fs:40, %rax
 1258      25280000 
 1258      00
 1259 0021 488945F8 		movq	%rax, -8(%rbp)
 1260 0025 31C0     		xorl	%eax, %eax
 476:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;
 477:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT)) && (!defined(SECUREC_ON_UNIX))
 478:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     attr->flags &= ~SECUREC_FLAG_LEADZERO;
 1261              		.loc 2 478 17
 1262 0027 488B45E8 		movq	-24(%rbp), %rax
 1263 002b 8B00     		movl	(%rax), %eax
 1264 002d 83E0F7   		andl	$-9, %eax
 1265 0030 89C2     		movl	%eax, %edx
 1266 0032 488B45E8 		movq	-24(%rbp), %rax
 1267 0036 8910     		movl	%edx, (%rax)
 479:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 480:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatBuf->str = argPtr;
 1268              		.loc 2 480 20
 1269 0038 488B45D8 		movq	-40(%rbp), %rax
 1270 003c 488B55E0 		movq	-32(%rbp), %rdx
 1271 0040 488910   		movq	%rdx, (%rax)
 481:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 482:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_LINUX_FORMAT)
 483:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (!(attr->flags & SECUREC_FLAG_LONG)) {
 1272              		.loc 2 483 15
 1273 0043 488B45E8 		movq	-24(%rbp), %rax
 1274 0047 8B00     		movl	(%rax), %eax
 1275              		.loc 2 483 23
 1276 0049 83E010   		andl	$16, %eax
 1277              		.loc 2 483 8
 1278 004c 85C0     		testl	%eax, %eax
 1279 004e 7511     		jne	.L89
 484:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         attr->flags |= SECUREC_FLAG_SHORT;
 1280              		.loc 2 484 21
 1281 0050 488B45E8 		movq	-24(%rbp), %rax
 1282 0054 8B00     		movl	(%rax), %eax
 1283 0056 83C820   		orl	$32, %eax
 1284 0059 89C2     		movl	%eax, %edx
 1285 005b 488B45E8 		movq	-24(%rbp), %rax
 1286 005f 8910     		movl	%edx, (%rax)
 1287              	.L89:
 485:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 486:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 487:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & SECUREC_FLAG_SHORT) {
GAS LISTING /tmp/ccgOk6Ic.s 			page 43


 1288              		.loc 2 487 13
 1289 0061 488B45E8 		movq	-24(%rbp), %rax
 1290 0065 8B00     		movl	(%rax), %eax
 1291              		.loc 2 487 21
 1292 0067 83E020   		andl	$32, %eax
 1293              		.loc 2 487 8
 1294 006a 85C0     		testl	%eax, %eax
 1295 006c 7418     		je	.L90
 488:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in multibyte chars */
 489:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSchar(attr, formatBuf);
 1296              		.loc 2 489 19
 1297 006e 488B55D8 		movq	-40(%rbp), %rdx
 1298 0072 488B45E8 		movq	-24(%rbp), %rax
 1299 0076 4889D6   		movq	%rdx, %rsi
 1300 0079 4889C7   		movq	%rax, %rdi
 1301 007c E8000000 		call	SecDecodeTypeSchar
 1301      00
 1302 0081 8945F4   		movl	%eax, -12(%rbp)
 1303 0084 EB16     		jmp	.L91
 1304              	.L90:
 490:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 491:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in wide chars */
 492:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSwchar(attr, formatBuf);
 1305              		.loc 2 492 19
 1306 0086 488B55D8 		movq	-40(%rbp), %rdx
 1307 008a 488B45E8 		movq	-24(%rbp), %rax
 1308 008e 4889D6   		movq	%rdx, %rsi
 1309 0091 4889C7   		movq	%rax, %rdi
 1310 0094 E8000000 		call	SecDecodeTypeSwchar
 1310      00
 1311 0099 8945F4   		movl	%eax, -12(%rbp)
 1312              	.L91:
 493:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 494:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* SECUREC_FOR_WCHAR */
 495:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (attr->flags & (SECUREC_FLAG_LONG | SECUREC_FLAG_WIDECHAR)) {
 496:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in wide chars */
 497:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCHART
 498:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSwchar(attr, formatBuf);
 499:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 500:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = 0;
 501:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 502:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 503:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* textLen now contains length in multibyte chars */
 504:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         textLen = SecDecodeTypeSchar(attr, formatBuf);
 505:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 506:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif /* SECUREC_FOR_WCHAR */
 507:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return textLen;
 1313              		.loc 2 507 12
 1314 009c 8B45F4   		movl	-12(%rbp), %eax
 508:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1315              		.loc 2 508 1
 1316 009f 488B4DF8 		movq	-8(%rbp), %rcx
 1317 00a3 6448330C 		xorq	%fs:40, %rcx
 1317      25280000 
 1317      00
 1318 00ac 7405     		je	.L93
 1319 00ae E8000000 		call	__stack_chk_fail@PLT
GAS LISTING /tmp/ccgOk6Ic.s 			page 44


 1319      00
 1320              	.L93:
 1321 00b3 C9       		leave
 1322              	.LCFI35:
 1323              		.cfi_def_cfa 7, 8
 1324 00b4 C3       		ret
 1325              		.cfi_endproc
 1326              	.LFE17:
 1328              		.section	.text.SecOutputOneChar,"ax",@progbits
 1330              	SecOutputOneChar:
 1331              	.LFB18:
 509:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 510:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 511:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Write one character to dest buffer
 512:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 513:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static void SecOutputOneChar(SecChar ch, SecPrintfStream *stream, int *counter)
 514:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1332              		.loc 2 514 1
 1333              		.cfi_startproc
 1334 0000 F30F1EFA 		endbr64
 1335 0004 55       		pushq	%rbp
 1336              	.LCFI36:
 1337              		.cfi_def_cfa_offset 16
 1338              		.cfi_offset 6, -16
 1339 0005 4889E5   		movq	%rsp, %rbp
 1340              	.LCFI37:
 1341              		.cfi_def_cfa_register 6
 1342 0008 4883EC30 		subq	$48, %rsp
 1343 000c 897DEC   		movl	%edi, -20(%rbp)
 1344 000f 488975E0 		movq	%rsi, -32(%rbp)
 1345 0013 488955D8 		movq	%rdx, -40(%rbp)
 1346              		.loc 2 514 1
 1347 0017 64488B04 		movq	%fs:40, %rax
 1347      25280000 
 1347      00
 1348 0020 488945F8 		movq	%rax, -8(%rbp)
 1349 0024 31C0     		xorl	%eax, %eax
 515:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* normal state, write character */
 516:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (SECUREC_IS_REST_BUF_ENOUGH(stream, 1)) { /* only one char */
 1350              		.loc 2 516 9
 1351 0026 488B45E0 		movq	-32(%rbp), %rax
 1352 002a 8B00     		movl	(%rax), %eax
 1353              		.loc 2 516 8
 1354 002c 83F803   		cmpl	$3, %eax
 1355 002f 7E41     		jle	.L95
 517:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SECUREC_SAFE_WRITE_CHAR(ch, stream, counter); /* char * cast to wchar * */
 1356              		.loc 2 517 9
 1357 0031 488B45E0 		movq	-32(%rbp), %rax
 1358 0035 488B4008 		movq	8(%rax), %rax
 1359 0039 8B55EC   		movl	-20(%rbp), %edx
 1360 003c 8910     		movl	%edx, (%rax)
 1361 003e 488B45E0 		movq	-32(%rbp), %rax
 1362 0042 488B4008 		movq	8(%rax), %rax
 1363 0046 488D5004 		leaq	4(%rax), %rdx
 1364 004a 488B45E0 		movq	-32(%rbp), %rax
 1365 004e 48895008 		movq	%rdx, 8(%rax)
 1366 0052 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 45


 1367 0056 8B00     		movl	(%rax), %eax
 1368 0058 8D50FC   		leal	-4(%rax), %edx
 1369 005b 488B45E0 		movq	-32(%rbp), %rax
 1370 005f 8910     		movl	%edx, (%rax)
 1371 0061 488B45D8 		movq	-40(%rbp), %rax
 1372 0065 8B00     		movl	(%rax), %eax
 1373 0067 8D5001   		leal	1(%rax), %edx
 1374 006a 488B45D8 		movq	-40(%rbp), %rax
 1375 006e 8910     		movl	%edx, (%rax)
 518:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 519:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 520:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         SecWriteCharW(ch, stream, counter);
 521:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 522:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* optimize function call to code */
 523:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         *counter = -1;
 524:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         stream->count = -1;
 525:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 526:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 527:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1376              		.loc 2 527 1
 1377 0070 EB15     		jmp	.L98
 1378              	.L95:
 520:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 1379              		.loc 2 520 9
 1380 0072 488B55D8 		movq	-40(%rbp), %rdx
 1381 0076 488B4DE0 		movq	-32(%rbp), %rcx
 1382 007a 8B45EC   		movl	-20(%rbp), %eax
 1383 007d 4889CE   		movq	%rcx, %rsi
 1384 0080 89C7     		movl	%eax, %edi
 1385 0082 E8000000 		call	SecWriteCharW
 1385      00
 1386              	.L98:
 1387              		.loc 2 527 1
 1388 0087 90       		nop
 1389 0088 488B45F8 		movq	-8(%rbp), %rax
 1390 008c 64483304 		xorq	%fs:40, %rax
 1390      25280000 
 1390      00
 1391 0095 7405     		je	.L97
 1392 0097 E8000000 		call	__stack_chk_fail@PLT
 1392      00
 1393              	.L97:
 1394 009c C9       		leave
 1395              	.LCFI38:
 1396              		.cfi_def_cfa 7, 8
 1397 009d C3       		ret
 1398              		.cfi_endproc
 1399              	.LFE18:
 1401              		.section	.text.SecDecodePrecision,"ax",@progbits
 1403              	SecDecodePrecision:
 1404              	.LFB19:
 528:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 529:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 530:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Check precison in format
 531:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 532:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodePrecision(SecChar ch, SecFormatAttr *formatAttr)
 533:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
GAS LISTING /tmp/ccgOk6Ic.s 			page 46


 1405              		.loc 2 533 1
 1406              		.cfi_startproc
 1407 0000 F30F1EFA 		endbr64
 1408 0004 55       		pushq	%rbp
 1409              	.LCFI39:
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 6, -16
 1412 0005 4889E5   		movq	%rsp, %rbp
 1413              	.LCFI40:
 1414              		.cfi_def_cfa_register 6
 1415 0008 4883EC20 		subq	$32, %rsp
 1416 000c 897DEC   		movl	%edi, -20(%rbp)
 1417 000f 488975E0 		movq	%rsi, -32(%rbp)
 1418              		.loc 2 533 1
 1419 0013 64488B04 		movq	%fs:40, %rax
 1419      25280000 
 1419      00
 1420 001c 488945F8 		movq	%rax, -8(%rbp)
 1421 0020 31C0     		xorl	%eax, %eax
 534:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynPrecision == 0) {
 1422              		.loc 2 534 19
 1423 0022 488B45E0 		movq	-32(%rbp), %rax
 1424 0026 8B4014   		movl	20(%rax), %eax
 1425              		.loc 2 534 8
 1426 0029 85C0     		testl	%eax, %eax
 1427 002b 7544     		jne	.L100
 535:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* add digit to current precision */
 536:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (SECUREC_MUL_TEN_ADD_BEYOND_MAX(formatAttr->precision)) {
 1428              		.loc 2 536 13
 1429 002d 488B45E0 		movq	-32(%rbp), %rax
 1430 0031 8B4008   		movl	8(%rax), %eax
 1431              		.loc 2 536 12
 1432 0034 3D14AE47 		cmpl	$21474836, %eax
 1432      01
 1433 0039 7E07     		jle	.L101
 537:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1434              		.loc 2 537 20
 1435 003b B8FFFFFF 		movl	$-1, %eax
 1435      FF
 1436 0040 EB5F     		jmp	.L102
 1437              	.L101:
 538:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 539:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatAttr->precision = (int)SECUREC_MUL_TEN((unsigned int)formatAttr->precision) +
 1438              		.loc 2 539 38
 1439 0042 488B45E0 		movq	-32(%rbp), %rax
 1440 0046 8B4008   		movl	8(%rax), %eax
 1441 0049 8D148500 		leal	0(,%rax,4), %edx
 1441      000000
 1442 0050 488B45E0 		movq	-32(%rbp), %rax
 1443 0054 8B4008   		movl	8(%rax), %eax
 1444 0057 01D0     		addl	%edx, %eax
 1445 0059 01C0     		addl	%eax, %eax
 1446              		.loc 2 539 33
 1447 005b 89C2     		movl	%eax, %edx
 540:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1448              		.loc 2 540 13
 1449 005d 8B45EC   		movl	-20(%rbp), %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 47


 1450 0060 83E830   		subl	$48, %eax
 1451 0063 0FB6C0   		movzbl	%al, %eax
 539:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1452              		.loc 2 539 91
 1453 0066 01C2     		addl	%eax, %edx
 539:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1454              		.loc 2 539 31
 1455 0068 488B45E0 		movq	-32(%rbp), %rax
 1456 006c 895008   		movl	%edx, 8(%rax)
 1457 006f EB2B     		jmp	.L103
 1458              	.L100:
 541:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 542:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (formatAttr->precision < 0) {
 1459              		.loc 2 542 23
 1460 0071 488B45E0 		movq	-32(%rbp), %rax
 1461 0075 8B4008   		movl	8(%rax), %eax
 1462              		.loc 2 542 12
 1463 0078 85C0     		testl	%eax, %eax
 1464 007a 790B     		jns	.L104
 543:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->precision = -1;
 1465              		.loc 2 543 35
 1466 007c 488B45E0 		movq	-32(%rbp), %rax
 1467 0080 C74008FF 		movl	$-1, 8(%rax)
 1467      FFFFFF
 1468              	.L104:
 544:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 545:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (formatAttr->precision > SECUREC_MAX_WIDTH_LEN) {
 1469              		.loc 2 545 23
 1470 0087 488B45E0 		movq	-32(%rbp), %rax
 1471 008b 8B4008   		movl	8(%rax), %eax
 1472              		.loc 2 545 12
 1473 008e 3DC8CCCC 		cmpl	$214748360, %eax
 1473      0C
 1474 0093 7E07     		jle	.L103
 546:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1475              		.loc 2 546 20
 1476 0095 B8FFFFFF 		movl	$-1, %eax
 1476      FF
 1477 009a EB05     		jmp	.L102
 1478              	.L103:
 547:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 548:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 549:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 1479              		.loc 2 549 12
 1480 009c B8000000 		movl	$0, %eax
 1480      00
 1481              	.L102:
 550:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1482              		.loc 2 550 1
 1483 00a1 488B4DF8 		movq	-8(%rbp), %rcx
 1484 00a5 6448330C 		xorq	%fs:40, %rcx
 1484      25280000 
 1484      00
 1485 00ae 7405     		je	.L105
 1486 00b0 E8000000 		call	__stack_chk_fail@PLT
 1486      00
 1487              	.L105:
GAS LISTING /tmp/ccgOk6Ic.s 			page 48


 1488 00b5 C9       		leave
 1489              	.LCFI41:
 1490              		.cfi_def_cfa 7, 8
 1491 00b6 C3       		ret
 1492              		.cfi_endproc
 1493              	.LFE19:
 1495              		.section	.text.SecDecodeWidth,"ax",@progbits
 1497              	SecDecodeWidth:
 1498              	.LFB20:
 551:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 552:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 553:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 554:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Check width in format
 555:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 556:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecDecodeWidth(SecChar ch, SecFormatAttr *formatAttr, SecFmtState lastState)
 557:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1499              		.loc 2 557 1
 1500              		.cfi_startproc
 1501 0000 F30F1EFA 		endbr64
 1502 0004 55       		pushq	%rbp
 1503              	.LCFI42:
 1504              		.cfi_def_cfa_offset 16
 1505              		.cfi_offset 6, -16
 1506 0005 4889E5   		movq	%rsp, %rbp
 1507              	.LCFI43:
 1508              		.cfi_def_cfa_register 6
 1509 0008 4883EC20 		subq	$32, %rsp
 1510 000c 897DEC   		movl	%edi, -20(%rbp)
 1511 000f 488975E0 		movq	%rsi, -32(%rbp)
 1512 0013 8955E8   		movl	%edx, -24(%rbp)
 1513              		.loc 2 557 1
 1514 0016 64488B04 		movq	%fs:40, %rax
 1514      25280000 
 1514      00
 1515 001f 488945F8 		movq	%rax, -8(%rbp)
 1516 0023 31C0     		xorl	%eax, %eax
 558:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (formatAttr->dynWidth == 0) {
 1517              		.loc 2 558 19
 1518 0025 488B45E0 		movq	-32(%rbp), %rax
 1519 0029 8B4010   		movl	16(%rax), %eax
 1520              		.loc 2 558 8
 1521 002c 85C0     		testl	%eax, %eax
 1522 002e 7555     		jne	.L107
 559:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (lastState != STAT_WIDTH) {
 1523              		.loc 2 559 12
 1524 0030 837DE803 		cmpl	$3, -24(%rbp)
 1525 0034 740B     		je	.L108
 560:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->fldWidth = 0;
 1526              		.loc 2 560 34
 1527 0036 488B45E0 		movq	-32(%rbp), %rax
 1528 003a C7400400 		movl	$0, 4(%rax)
 1528      000000
 1529              	.L108:
 561:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 562:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (SECUREC_MUL_TEN_ADD_BEYOND_MAX(formatAttr->fldWidth)) {
 1530              		.loc 2 562 13
 1531 0041 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 49


 1532 0045 8B4004   		movl	4(%rax), %eax
 1533              		.loc 2 562 12
 1534 0048 3D14AE47 		cmpl	$21474836, %eax
 1534      01
 1535 004d 7E07     		jle	.L109
 563:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             return -1;
 1536              		.loc 2 563 20
 1537 004f B8FFFFFF 		movl	$-1, %eax
 1537      FF
 1538 0054 EB77     		jmp	.L110
 1539              	.L109:
 564:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 565:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         formatAttr->fldWidth = (int)SECUREC_MUL_TEN((unsigned int)formatAttr->fldWidth) +
 1540              		.loc 2 565 37
 1541 0056 488B45E0 		movq	-32(%rbp), %rax
 1542 005a 8B4004   		movl	4(%rax), %eax
 1543 005d 8D148500 		leal	0(,%rax,4), %edx
 1543      000000
 1544 0064 488B45E0 		movq	-32(%rbp), %rax
 1545 0068 8B4004   		movl	4(%rax), %eax
 1546 006b 01D0     		addl	%edx, %eax
 1547 006d 01C0     		addl	%eax, %eax
 1548              		.loc 2 565 32
 1549 006f 89C2     		movl	%eax, %edx
 566:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1550              		.loc 2 566 13
 1551 0071 8B45EC   		movl	-20(%rbp), %eax
 1552 0074 83E830   		subl	$48, %eax
 1553 0077 0FB6C0   		movzbl	%al, %eax
 565:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1554              		.loc 2 565 89
 1555 007a 01C2     		addl	%eax, %edx
 565:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             (unsigned char)(ch - SECUREC_CHAR('0'));
 1556              		.loc 2 565 30
 1557 007c 488B45E0 		movq	-32(%rbp), %rax
 1558 0080 895004   		movl	%edx, 4(%rax)
 1559 0083 EB43     		jmp	.L111
 1560              	.L107:
 567:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     } else {
 568:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         if (formatAttr->fldWidth < 0) {
 1561              		.loc 2 568 23
 1562 0085 488B45E0 		movq	-32(%rbp), %rax
 1563 0089 8B4004   		movl	4(%rax), %eax
 1564              		.loc 2 568 12
 1565 008c 85C0     		testl	%eax, %eax
 1566 008e 7938     		jns	.L111
 569:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->flags |= SECUREC_FLAG_LEFT;
 1567              		.loc 2 569 31
 1568 0090 488B45E0 		movq	-32(%rbp), %rax
 1569 0094 8B00     		movl	(%rax), %eax
 1570 0096 83C804   		orl	$4, %eax
 1571 0099 89C2     		movl	%eax, %edx
 1572 009b 488B45E0 		movq	-32(%rbp), %rax
 1573 009f 8910     		movl	%edx, (%rax)
 570:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             formatAttr->fldWidth = (-formatAttr->fldWidth);
 1574              		.loc 2 570 48
 1575 00a1 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 50


 1576 00a5 8B4004   		movl	4(%rax), %eax
 1577              		.loc 2 570 37
 1578 00a8 F7D8     		negl	%eax
 1579 00aa 89C2     		movl	%eax, %edx
 1580              		.loc 2 570 34
 1581 00ac 488B45E0 		movq	-32(%rbp), %rax
 1582 00b0 895004   		movl	%edx, 4(%rax)
 571:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             if (formatAttr->fldWidth > SECUREC_MAX_WIDTH_LEN) {
 1583              		.loc 2 571 27
 1584 00b3 488B45E0 		movq	-32(%rbp), %rax
 1585 00b7 8B4004   		movl	4(%rax), %eax
 1586              		.loc 2 571 16
 1587 00ba 3DC8CCCC 		cmpl	$214748360, %eax
 1587      0C
 1588 00bf 7E07     		jle	.L111
 572:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;
 1589              		.loc 2 572 24
 1590 00c1 B8FFFFFF 		movl	$-1, %eax
 1590      FF
 1591 00c6 EB05     		jmp	.L110
 1592              	.L111:
 573:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             }
 574:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
 575:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
 576:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return 0;
 1593              		.loc 2 576 12
 1594 00c8 B8000000 		movl	$0, %eax
 1594      00
 1595              	.L110:
 577:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 1596              		.loc 2 577 1
 1597 00cd 488B4DF8 		movq	-8(%rbp), %rcx
 1598 00d1 6448330C 		xorq	%fs:40, %rcx
 1598      25280000 
 1598      00
 1599 00da 7405     		je	.L112
 1600 00dc E8000000 		call	__stack_chk_fail@PLT
 1600      00
 1601              	.L112:
 1602 00e1 C9       		leave
 1603              	.LCFI44:
 1604              		.cfi_def_cfa 7, 8
 1605 00e2 C3       		ret
 1606              		.cfi_endproc
 1607              	.LFE20:
 1609              		.section	.text.SecOutputSW,"ax",@progbits
 1611              	SecOutputSW:
 1612              	.LFB21:
 578:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 579:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 580:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Formatting output core functions for wchar version.Called by a function such as vswprintf_s
 581:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * argList must not be declare as const
 582:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 583:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecOutputSW(SecPrintfStream *stream, const wchar_t *cFormat, va_list argList)
 584:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 585:/home/xingli/share/1205tiny/secure_c/src/output.inl **** /*
 586:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  * Formatting output core functions for char version.Called by a function such as vsnprintf_s
GAS LISTING /tmp/ccgOk6Ic.s 			page 51


 587:/home/xingli/share/1205tiny/secure_c/src/output.inl ****  */
 588:/home/xingli/share/1205tiny/secure_c/src/output.inl **** static int SecOutputS(SecPrintfStream *stream, const char *cFormat, va_list argList)
 589:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 590:/home/xingli/share/1205tiny/secure_c/src/output.inl **** {
 1613              		.loc 2 590 1
 1614              		.cfi_startproc
 1615 0000 F30F1EFA 		endbr64
 1616 0004 55       		pushq	%rbp
 1617              	.LCFI45:
 1618              		.cfi_def_cfa_offset 16
 1619              		.cfi_offset 6, -16
 1620 0005 4889E5   		movq	%rsp, %rbp
 1621              	.LCFI46:
 1622              		.cfi_def_cfa_register 6
 1623 0008 4881EC50 		subq	$2384, %rsp
 1623      090000
 1624 000f 4889BDC8 		movq	%rdi, -2360(%rbp)
 1624      F6FFFF
 1625 0016 4889B5C0 		movq	%rsi, -2368(%rbp)
 1625      F6FFFF
 1626 001d 488995B8 		movq	%rdx, -2376(%rbp)
 1626      F6FFFF
 1627              		.loc 2 590 1
 1628 0024 64488B04 		movq	%fs:40, %rax
 1628      25280000 
 1628      00
 1629 002d 488945F8 		movq	%rax, -8(%rbp)
 1630 0031 31C0     		xorl	%eax, %eax
 591:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     const SecChar *format = cFormat;
 1631              		.loc 2 591 20
 1632 0033 488B85C0 		movq	-2368(%rbp), %rax
 1632      F6FFFF
 1633 003a 48898530 		movq	%rax, -2256(%rbp)
 1633      F7FFFF
 592:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
 593:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     char *floatBuf = NULL;
 1634              		.loc 2 593 11
 1635 0041 48C78540 		movq	$0, -2240(%rbp)
 1635      F7FFFF00 
 1635      000000
 594:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 595:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFormatBuf formatBuf;
 596:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     static const char *itoaUpperDigits = "0123456789ABCDEFX";
 597:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     static const char *itoaLowerDigits = "0123456789abcdefx";
 598:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     const char *digits = itoaUpperDigits;
 1636              		.loc 2 598 17
 1637 004c 488B0500 		movq	itoaUpperDigits.3798(%rip), %rax
 1637      000000
 1638 0053 48898548 		movq	%rax, -2232(%rbp)
 1638      F7FFFF
 599:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     unsigned int radix = SECUREC_RADIX_DECIMAL;
 1639              		.loc 2 599 18
 1640 005a C785E0F6 		movl	$10, -2336(%rbp)
 1640      FFFF0A00 
 1640      0000
 600:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int charsOut;               /* characters written */
 601:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int prefixLen = 0;  /* Must be initialized or compiler alerts */
GAS LISTING /tmp/ccgOk6Ic.s 			page 52


 1641              		.loc 2 601 9
 1642 0064 C785E4F6 		movl	$0, -2332(%rbp)
 1642      FFFF0000 
 1642      0000
 602:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int padding = 0;
 1643              		.loc 2 602 9
 1644 006e C7851CF7 		movl	$0, -2276(%rbp)
 1644      FFFF0000 
 1644      0000
 603:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int textLen;                /* length of the text */
 604:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     int noOutput = 0; /* Must be initialized or compiler alerts */
 1645              		.loc 2 604 9
 1646 0078 C785ECF6 		movl	$0, -2324(%rbp)
 1646      FFFF0000 
 1646      0000
 605:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFmtState state;
 606:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFmtState lastState;
 607:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecChar prefix[SECUREC_PREFIX_LEN] = { 0 };
 1647              		.loc 2 607 13
 1648 0082 48C785C8 		movq	$0, -2104(%rbp)
 1648      F7FFFF00 
 1648      000000
 608:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecChar ch;                 /* currently read character */
 609:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     static const unsigned char stateTable[SECUREC_STATE_TABLE_SIZE] = {
 610:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* type 0:    nospecial meanin;
 611:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  1:   '%';
 612:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  2:    '.'
 613:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  3:    '*'
 614:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  4:    '0'
 615:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  5:    '1' ... '9'
 616:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  6:    ' ', '+', '-', '#'
 617:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  7:     'h', 'l', 'L', 'F', 'w' , 'N','z','q','t','j'
 618:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  8:     'd','o','u','i','x','X','e','f','g'
 619:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          */
 620:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 621:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 622:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x06, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x06, 0x02, 0
 623:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 624:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0x07, 0
 625:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0
 626:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x08, 0x07, 0x00, 0x07, 0x00, 0x00, 0
 627:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x08, 0x07, 0x00, 0x08, 0x07, 0x08, 0x00, 0x07, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0
 628:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* fill zero  for normal char 128 byte for 0x80 - 0xff */
 629:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 630:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 631:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 632:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 633:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 634:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 635:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 636:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
 637:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         /* state  0: normal
 638:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  1: percent
 639:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  2: flag
 640:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  3: width
 641:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  4: dot
 642:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  5: precis
GAS LISTING /tmp/ccgOk6Ic.s 			page 53


 643:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  6: size
 644:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  7: type
 645:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          *  8: invalid
 646:/home/xingli/share/1205tiny/secure_c/src/output.inl ****          */
 647:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x08, 0x08, 0
 648:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x01, 0x00, 0x00, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x03, 0x03, 0x08, 0
 649:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x08, 0x08, 0x00, 0x00, 0x00, 0x02, 0x02, 0x03, 0x05, 0x05, 0x08, 0x00, 0x00, 0x00, 0x03, 0
 650:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x03, 0x05, 0x05, 0x08, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x08, 0x08, 0x08, 0x00, 0x00, 0
 651:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0
 652:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         0x00
 653:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     };
 654:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 655:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecFormatAttr formatAttr;
 656:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     SecBuffer buffer;
 657:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.flags = 0;
 1649              		.loc 2 657 22
 1650 008d C785B0F7 		movl	$0, -2128(%rbp)
 1650      FFFF0000 
 1650      0000
 658:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.bufferIsWide = 0;    /* flag for buffer contains wide chars */
 1651              		.loc 2 658 29
 1652 0097 C785BCF7 		movl	$0, -2116(%rbp)
 1652      FFFF0000 
 1652      0000
 659:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.fldWidth = 0;
 1653              		.loc 2 659 25
 1654 00a1 C785B4F7 		movl	$0, -2124(%rbp)
 1654      FFFF0000 
 1654      0000
 660:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.precision = 0;
 1655              		.loc 2 660 26
 1656 00ab C785B8F7 		movl	$0, -2120(%rbp)
 1656      FFFF0000 
 1656      0000
 661:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.dynWidth = 0;
 1657              		.loc 2 661 25
 1658 00b5 C785C0F7 		movl	$0, -2112(%rbp)
 1658      FFFF0000 
 1658      0000
 662:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatAttr.dynPrecision = 0;
 1659              		.loc 2 662 29
 1660 00bf C785C4F7 		movl	$0, -2108(%rbp)
 1660      FFFF0000 
 1660      0000
 663:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     charsOut = 0;
 1661              		.loc 2 663 14
 1662 00c9 C785D8F6 		movl	$0, -2344(%rbp)
 1662      FFFF0000 
 1662      0000
 664:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     textLen = 0;
 1663              		.loc 2 664 13
 1664 00d3 C785E8F6 		movl	$0, -2328(%rbp)
 1664      FFFF0000 
 1664      0000
 665:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     state = STAT_NORMAL;        /* starting state */
 1665              		.loc 2 665 11
 1666 00dd C785F0F6 		movl	$0, -2320(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 54


 1666      FFFF0000 
 1666      0000
 666:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     formatBuf.str = NULL;
 1667              		.loc 2 666 19
 1668 00e7 48C78538 		movq	$0, -2248(%rbp)
 1668      F7FFFF00 
 1668      000000
 667:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 668:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* loop each format character */
 669:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     /* remove format != NULL */
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     while ((ch = *format) != SECUREC_CHAR('\0') && charsOut >= 0) {
 1669              		.loc 2 670 11
 1670 00f2 E9831C00 		jmp	.L114
 1670      00
 1671              	.L292:
 671:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 1672              		.loc 2 671 9
 1673 00f7 488B8530 		movq	-2256(%rbp), %rax
 1673      F7FFFF
 1674 00fe 4883C004 		addq	$4, %rax
 1675 0102 48898530 		movq	%rax, -2256(%rbp)
 1675      F7FFFF
 672:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         lastState = state;
 1676              		.loc 2 672 19
 1677 0109 8B85F0F6 		movl	-2320(%rbp), %eax
 1677      FFFF
 1678 010f 898520F7 		movl	%eax, -2272(%rbp)
 1678      FFFF
 673:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         state = SECUREC_DECODE_STATE(ch, stateTable, lastState);
 1679              		.loc 2 673 17
 1680 0115 8B85F4F6 		movl	-2316(%rbp), %eax
 1680      FFFF
 1681 011b 83F87E   		cmpl	$126, %eax
 1682 011e 7722     		ja	.L115
 1683              		.loc 2 673 17 is_stmt 0 discriminator 1
 1684 0120 8B85F4F6 		movl	-2316(%rbp), %eax
 1684      FFFF
 1685 0126 0FB6C0   		movzbl	%al, %eax
 1686 0129 4898     		cltq
 1687 012b 488D1500 		leaq	stateTable.3811(%rip), %rdx
 1687      000000
 1688 0132 0FB60410 		movzbl	(%rax,%rdx), %eax
 1689 0136 0FB6D0   		movzbl	%al, %edx
 1690 0139 89D0     		movl	%edx, %eax
 1691 013b C1E003   		sall	$3, %eax
 1692 013e 01C2     		addl	%eax, %edx
 1693 0140 EB05     		jmp	.L116
 1694              	.L115:
 1695              		.loc 2 673 17 discriminator 2
 1696 0142 BA000000 		movl	$0, %edx
 1696      00
 1697              	.L116:
 1698              		.loc 2 673 17 discriminator 4
 1699 0147 8B8520F7 		movl	-2272(%rbp), %eax
 1699      FFFF
 1700 014d 0FB6C0   		movzbl	%al, %eax
 1701 0150 01D0     		addl	%edx, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 55


 1702 0152 05000100 		addl	$256, %eax
 1702      00
 1703 0157 4898     		cltq
 1704 0159 488D1500 		leaq	stateTable.3811(%rip), %rdx
 1704      000000
 1705 0160 0FB60410 		movzbl	(%rax,%rdx), %eax
 1706              		.loc 2 673 15 is_stmt 1 discriminator 4
 1707 0164 0FB6C0   		movzbl	%al, %eax
 1708 0167 8985F0F6 		movl	%eax, -2320(%rbp)
 1708      FFFF
 1709 016d 83BDF0F6 		cmpl	$8, -2320(%rbp)
 1709      FFFF08
 1710 0174 0F87F91B 		ja	.L117
 1710      0000
 1711 017a 8B85F0F6 		movl	-2320(%rbp), %eax
 1711      FFFF
 1712 0180 488D1485 		leaq	0(,%rax,4), %rdx
 1712      00000000 
 1713 0188 488D0500 		leaq	.L119(%rip), %rax
 1713      000000
 1714 018f 8B0402   		movl	(%rdx,%rax), %eax
 1715 0192 4898     		cltq
 1716 0194 488D1500 		leaq	.L119(%rip), %rdx
 1716      000000
 1717 019b 4801D0   		addq	%rdx, %rax
 1718 019e 3EFFE0   		notrack jmp	*%rax
 1719              		.section	.rodata.SecOutputSW,"a",@progbits
 1720              		.align 4
 1721              		.align 4
 1722              	.L119:
 1723 0000 00000000 		.long	.L127-.L119
 1724 0004 00000000 		.long	.L126-.L119
 1725 0008 00000000 		.long	.L125-.L119
 1726 000c 00000000 		.long	.L124-.L119
 1727 0010 00000000 		.long	.L123-.L119
 1728 0014 00000000 		.long	.L122-.L119
 1729 0018 00000000 		.long	.L121-.L119
 1730 001c 00000000 		.long	.L120-.L119
 1731 0020 00000000 		.long	.L118-.L119
 1732              		.section	.text.SecOutputSW
 1733              	.L127:
 674:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         switch (state) {
 675:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_NORMAL:
 676:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 SecOutputOneChar(ch, stream, &charsOut);
 1734              		.loc 2 676 17
 1735 01a1 488D95D8 		leaq	-2344(%rbp), %rdx
 1735      F6FFFF
 1736 01a8 488B8DC8 		movq	-2360(%rbp), %rcx
 1736      F6FFFF
 1737 01af 8B85F4F6 		movl	-2316(%rbp), %eax
 1737      FFFF
 1738 01b5 4889CE   		movq	%rcx, %rsi
 1739 01b8 89C7     		movl	%eax, %edi
 1740 01ba E8000000 		call	SecOutputOneChar
 1740      00
 677:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 continue;
 1741              		.loc 2 677 17
GAS LISTING /tmp/ccgOk6Ic.s 			page 56


 1742 01bf E9B61B00 		jmp	.L114
 1742      00
 1743              	.L126:
 678:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_PERCENT:
 679:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* set default values */
 680:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 prefixLen = 0;
 1744              		.loc 2 680 27
 1745 01c4 C785E4F6 		movl	$0, -2332(%rbp)
 1745      FFFF0000 
 1745      0000
 681:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 noOutput = 0;
 1746              		.loc 2 681 26
 1747 01ce C785ECF6 		movl	$0, -2324(%rbp)
 1747      FFFF0000 
 1747      0000
 682:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.flags = 0;
 1748              		.loc 2 682 34
 1749 01d8 C785B0F7 		movl	$0, -2128(%rbp)
 1749      FFFF0000 
 1749      0000
 683:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.fldWidth = 0;
 1750              		.loc 2 683 37
 1751 01e2 C785B4F7 		movl	$0, -2124(%rbp)
 1751      FFFF0000 
 1751      0000
 684:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.precision = -1;
 1752              		.loc 2 684 38
 1753 01ec C785B8F7 		movl	$-1, -2120(%rbp)
 1753      FFFFFFFF 
 1753      FFFF
 685:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.bufferIsWide = 0;
 1754              		.loc 2 685 41
 1755 01f6 C785BCF7 		movl	$0, -2116(%rbp)
 1755      FFFF0000 
 1755      0000
 686:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.dynWidth = 0;
 1756              		.loc 2 686 37
 1757 0200 C785C0F7 		movl	$0, -2112(%rbp)
 1757      FFFF0000 
 1757      0000
 687:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.dynPrecision = 0;
 1758              		.loc 2 687 41
 1759 020a C785C4F7 		movl	$0, -2108(%rbp)
 1759      FFFF0000 
 1759      0000
 688:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 1760              		.loc 2 688 17
 1761 0214 E9611B00 		jmp	.L114
 1761      00
 1762              	.L125:
 689:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_FLAG:
 690:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* set flag based on which flag character */
 691:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 SecDecodeFlags(ch, &formatAttr);
 1763              		.loc 2 691 17
 1764 0219 488D95B0 		leaq	-2128(%rbp), %rdx
 1764      F7FFFF
 1765 0220 8B85F4F6 		movl	-2316(%rbp), %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 57


 1765      FFFF
 1766 0226 4889D6   		movq	%rdx, %rsi
 1767 0229 89C7     		movl	%eax, %edi
 1768 022b E8000000 		call	SecDecodeFlags
 1768      00
 692:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 1769              		.loc 2 692 17
 1770 0230 E9451B00 		jmp	.L114
 1770      00
 1771              	.L124:
 693:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_WIDTH:
 694:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* update width value */
 695:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (ch == SECUREC_CHAR('*')) {
 1772              		.loc 2 695 20
 1773 0235 83BDF4F6 		cmpl	$42, -2316(%rbp)
 1773      FFFF2A
 1774 023c 756C     		jne	.L128
 696:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* get width */
 697:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.fldWidth = (int)va_arg(argList, int);
 1775              		.loc 2 697 43
 1776 023e 488B85B8 		movq	-2376(%rbp), %rax
 1776      F6FFFF
 1777 0245 8B00     		movl	(%rax), %eax
 1778 0247 83F82F   		cmpl	$47, %eax
 1779 024a 7730     		ja	.L129
 1780 024c 488B85B8 		movq	-2376(%rbp), %rax
 1780      F6FFFF
 1781 0253 488B5010 		movq	16(%rax), %rdx
 1782 0257 488B85B8 		movq	-2376(%rbp), %rax
 1782      F6FFFF
 1783 025e 8B00     		movl	(%rax), %eax
 1784 0260 89C0     		movl	%eax, %eax
 1785 0262 4801D0   		addq	%rdx, %rax
 1786 0265 488B95B8 		movq	-2376(%rbp), %rdx
 1786      F6FFFF
 1787 026c 8B12     		movl	(%rdx), %edx
 1788 026e 8D4A08   		leal	8(%rdx), %ecx
 1789 0271 488B95B8 		movq	-2376(%rbp), %rdx
 1789      F6FFFF
 1790 0278 890A     		movl	%ecx, (%rdx)
 1791 027a EB1A     		jmp	.L130
 1792              	.L129:
 1793 027c 488B85B8 		movq	-2376(%rbp), %rax
 1793      F6FFFF
 1794 0283 488B4008 		movq	8(%rax), %rax
 1795 0287 488D4808 		leaq	8(%rax), %rcx
 1796 028b 488B95B8 		movq	-2376(%rbp), %rdx
 1796      F6FFFF
 1797 0292 48894A08 		movq	%rcx, 8(%rdx)
 1798              	.L130:
 1799 0296 8B00     		movl	(%rax), %eax
 1800              		.loc 2 697 41
 1801 0298 8985B4F7 		movl	%eax, -2124(%rbp)
 1801      FFFF
 698:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynWidth = 1;
 1802              		.loc 2 698 41
 1803 029e C785C0F7 		movl	$1, -2112(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 58


 1803      FFFF0100 
 1803      0000
 1804 02a8 EB0A     		jmp	.L131
 1805              	.L128:
 699:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 } else {
 700:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynWidth = 0;
 1806              		.loc 2 700 41
 1807 02aa C785C0F7 		movl	$0, -2112(%rbp)
 1807      FFFF0000 
 1807      0000
 1808              	.L131:
 701:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 702:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (SecDecodeWidth(ch, &formatAttr, lastState) != 0) {
 1809              		.loc 2 702 21
 1810 02b4 8B9520F7 		movl	-2272(%rbp), %edx
 1810      FFFF
 1811 02ba 488D8DB0 		leaq	-2128(%rbp), %rcx
 1811      F7FFFF
 1812 02c1 8B85F4F6 		movl	-2316(%rbp), %eax
 1812      FFFF
 1813 02c7 4889CE   		movq	%rcx, %rsi
 1814 02ca 89C7     		movl	%eax, %edi
 1815 02cc E8000000 		call	SecDecodeWidth
 1815      00
 1816              		.loc 2 702 20
 1817 02d1 85C0     		testl	%eax, %eax
 1818 02d3 0F84A11A 		je	.L114
 1818      0000
 703:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     return -1;
 1819              		.loc 2 703 28
 1820 02d9 B8FFFFFF 		movl	$-1, %eax
 1820      FF
 1821 02de E9DC1A00 		jmp	.L294
 1821      00
 1822              	.L123:
 704:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 705:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 706:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_DOT:
 707:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 formatAttr.precision = 0;
 1823              		.loc 2 707 38
 1824 02e3 C785B8F7 		movl	$0, -2120(%rbp)
 1824      FFFF0000 
 1824      0000
 708:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 1825              		.loc 2 708 17
 1826 02ed E9881A00 		jmp	.L114
 1826      00
 1827              	.L122:
 709:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_PRECIS:
 710:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* update precison value */
 711:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (ch == SECUREC_CHAR('*')) {
 1828              		.loc 2 711 20
 1829 02f2 83BDF4F6 		cmpl	$42, -2316(%rbp)
 1829      FFFF2A
 1830 02f9 756C     		jne	.L134
 712:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* get precision from arg list */
 713:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.precision = (int)va_arg(argList, int);
GAS LISTING /tmp/ccgOk6Ic.s 			page 59


 1831              		.loc 2 713 44
 1832 02fb 488B85B8 		movq	-2376(%rbp), %rax
 1832      F6FFFF
 1833 0302 8B00     		movl	(%rax), %eax
 1834 0304 83F82F   		cmpl	$47, %eax
 1835 0307 7730     		ja	.L135
 1836 0309 488B85B8 		movq	-2376(%rbp), %rax
 1836      F6FFFF
 1837 0310 488B5010 		movq	16(%rax), %rdx
 1838 0314 488B85B8 		movq	-2376(%rbp), %rax
 1838      F6FFFF
 1839 031b 8B00     		movl	(%rax), %eax
 1840 031d 89C0     		movl	%eax, %eax
 1841 031f 4801D0   		addq	%rdx, %rax
 1842 0322 488B95B8 		movq	-2376(%rbp), %rdx
 1842      F6FFFF
 1843 0329 8B12     		movl	(%rdx), %edx
 1844 032b 8D4A08   		leal	8(%rdx), %ecx
 1845 032e 488B95B8 		movq	-2376(%rbp), %rdx
 1845      F6FFFF
 1846 0335 890A     		movl	%ecx, (%rdx)
 1847 0337 EB1A     		jmp	.L136
 1848              	.L135:
 1849 0339 488B85B8 		movq	-2376(%rbp), %rax
 1849      F6FFFF
 1850 0340 488B4008 		movq	8(%rax), %rax
 1851 0344 488D4808 		leaq	8(%rax), %rcx
 1852 0348 488B95B8 		movq	-2376(%rbp), %rdx
 1852      F6FFFF
 1853 034f 48894A08 		movq	%rcx, 8(%rdx)
 1854              	.L136:
 1855 0353 8B00     		movl	(%rax), %eax
 1856              		.loc 2 713 42
 1857 0355 8985B8F7 		movl	%eax, -2120(%rbp)
 1857      FFFF
 714:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynPrecision = 1;
 1858              		.loc 2 714 45
 1859 035b C785C4F7 		movl	$1, -2108(%rbp)
 1859      FFFF0100 
 1859      0000
 1860 0365 EB0A     		jmp	.L137
 1861              	.L134:
 715:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 } else {
 716:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     formatAttr.dynPrecision = 0;
 1862              		.loc 2 716 45
 1863 0367 C785C4F7 		movl	$0, -2108(%rbp)
 1863      FFFF0000 
 1863      0000
 1864              	.L137:
 717:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 718:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (SecDecodePrecision(ch, &formatAttr) != 0) {
 1865              		.loc 2 718 21
 1866 0371 488D95B0 		leaq	-2128(%rbp), %rdx
 1866      F7FFFF
 1867 0378 8B85F4F6 		movl	-2316(%rbp), %eax
 1867      FFFF
 1868 037e 4889D6   		movq	%rdx, %rsi
GAS LISTING /tmp/ccgOk6Ic.s 			page 60


 1869 0381 89C7     		movl	%eax, %edi
 1870 0383 E8000000 		call	SecDecodePrecision
 1870      00
 1871              		.loc 2 718 20
 1872 0388 85C0     		testl	%eax, %eax
 1873 038a 0F84EA19 		je	.L114
 1873      0000
 719:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     return -1;
 1874              		.loc 2 719 28
 1875 0390 B8FFFFFF 		movl	$-1, %eax
 1875      FF
 1876 0395 E9251A00 		jmp	.L294
 1876      00
 1877              	.L121:
 720:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 721:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 722:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_SIZE:
 723:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* read a size specifier, set the formatAttr.flags based on it */
 724:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (SecDecodeSize(ch, &formatAttr, &format) != 0) {
 1878              		.loc 2 724 21
 1879 039a 488D9530 		leaq	-2256(%rbp), %rdx
 1879      F7FFFF
 1880 03a1 488D8DB0 		leaq	-2128(%rbp), %rcx
 1880      F7FFFF
 1881 03a8 8B85F4F6 		movl	-2316(%rbp), %eax
 1881      FFFF
 1882 03ae 4889CE   		movq	%rcx, %rsi
 1883 03b1 89C7     		movl	%eax, %edi
 1884 03b3 E8000000 		call	SecDecodeSize
 1884      00
 1885              		.loc 2 724 20
 1886 03b8 85C0     		testl	%eax, %eax
 1887 03ba 0F84BA19 		je	.L114
 1887      0000
 725:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* Compatibility  code for "%I" just print I */
 726:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     SecOutputOneChar(ch, stream, &charsOut);
 1888              		.loc 2 726 21
 1889 03c0 488D95D8 		leaq	-2344(%rbp), %rdx
 1889      F6FFFF
 1890 03c7 488B8DC8 		movq	-2360(%rbp), %rcx
 1890      F6FFFF
 1891 03ce 8B85F4F6 		movl	-2316(%rbp), %eax
 1891      FFFF
 1892 03d4 4889CE   		movq	%rcx, %rsi
 1893 03d7 89C7     		movl	%eax, %edi
 1894 03d9 E8000000 		call	SecOutputOneChar
 1894      00
 727:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     state = STAT_NORMAL;
 1895              		.loc 2 727 27
 1896 03de C785F0F6 		movl	$0, -2320(%rbp)
 1896      FFFF0000 
 1896      0000
 728:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     continue;
 1897              		.loc 2 728 21
 1898 03e8 E98D1900 		jmp	.L114
 1898      00
 1899              	.L120:
GAS LISTING /tmp/ccgOk6Ic.s 			page 61


 1900 03ed 8B85F4F6 		movl	-2316(%rbp), %eax
 1900      FFFF
 1901 03f3 83E841   		subl	$65, %eax
 1902 03f6 83F837   		cmpl	$55, %eax
 1903 03f9 0F871012 		ja	.L296
 1903      0000
 1904 03ff 89C0     		movl	%eax, %eax
 1905 0401 488D1485 		leaq	0(,%rax,4), %rdx
 1905      00000000 
 1906 0409 488D0500 		leaq	.L142(%rip), %rax
 1906      000000
 1907 0410 8B0402   		movl	(%rdx,%rax), %eax
 1908 0413 4898     		cltq
 1909 0415 488D1500 		leaq	.L142(%rip), %rdx
 1909      000000
 1910 041c 4801D0   		addq	%rdx, %rax
 1911 041f 3EFFE0   		notrack jmp	*%rax
 1912              		.section	.rodata.SecOutputSW
 1913              		.align 4
 1914              		.align 4
 1915              	.L142:
 1916 0024 00000000 		.long	.L149-.L142
 1917 0028 00000000 		.long	.L296-.L142
 1918 002c 00000000 		.long	.L150-.L142
 1919 0030 00000000 		.long	.L296-.L142
 1920 0034 00000000 		.long	.L149-.L142
 1921 0038 00000000 		.long	.L149-.L142
 1922 003c 00000000 		.long	.L149-.L142
 1923 0040 00000000 		.long	.L296-.L142
 1924 0044 00000000 		.long	.L296-.L142
 1925 0048 00000000 		.long	.L296-.L142
 1926 004c 00000000 		.long	.L296-.L142
 1927 0050 00000000 		.long	.L296-.L142
 1928 0054 00000000 		.long	.L296-.L142
 1929 0058 00000000 		.long	.L296-.L142
 1930 005c 00000000 		.long	.L296-.L142
 1931 0060 00000000 		.long	.L296-.L142
 1932 0064 00000000 		.long	.L296-.L142
 1933 0068 00000000 		.long	.L296-.L142
 1934 006c 00000000 		.long	.L148-.L142
 1935 0070 00000000 		.long	.L296-.L142
 1936 0074 00000000 		.long	.L296-.L142
 1937 0078 00000000 		.long	.L296-.L142
 1938 007c 00000000 		.long	.L296-.L142
 1939 0080 00000000 		.long	.L141-.L142
 1940 0084 00000000 		.long	.L296-.L142
 1941 0088 00000000 		.long	.L296-.L142
 1942 008c 00000000 		.long	.L296-.L142
 1943 0090 00000000 		.long	.L296-.L142
 1944 0094 00000000 		.long	.L296-.L142
 1945 0098 00000000 		.long	.L296-.L142
 1946 009c 00000000 		.long	.L296-.L142
 1947 00a0 00000000 		.long	.L296-.L142
 1948 00a4 00000000 		.long	.L146-.L142
 1949 00a8 00000000 		.long	.L296-.L142
 1950 00ac 00000000 		.long	.L147-.L142
 1951 00b0 00000000 		.long	.L143-.L142
GAS LISTING /tmp/ccgOk6Ic.s 			page 62


 1952 00b4 00000000 		.long	.L146-.L142
 1953 00b8 00000000 		.long	.L146-.L142
 1954 00bc 00000000 		.long	.L146-.L142
 1955 00c0 00000000 		.long	.L296-.L142
 1956 00c4 00000000 		.long	.L143-.L142
 1957 00c8 00000000 		.long	.L296-.L142
 1958 00cc 00000000 		.long	.L296-.L142
 1959 00d0 00000000 		.long	.L296-.L142
 1960 00d4 00000000 		.long	.L296-.L142
 1961 00d8 00000000 		.long	.L145-.L142
 1962 00dc 00000000 		.long	.L143-.L142
 1963 00e0 00000000 		.long	.L141-.L142
 1964 00e4 00000000 		.long	.L296-.L142
 1965 00e8 00000000 		.long	.L296-.L142
 1966 00ec 00000000 		.long	.L144-.L142
 1967 00f0 00000000 		.long	.L296-.L142
 1968 00f4 00000000 		.long	.L143-.L142
 1969 00f8 00000000 		.long	.L296-.L142
 1970 00fc 00000000 		.long	.L296-.L142
 1971 0100 00000000 		.long	.L141-.L142
 1972              		.section	.text.SecOutputSW
 1973              	.L150:
 729:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
 730:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 731:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_TYPE:
 732:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 switch (ch) {
 733:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('C'):
 734:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* wide char */
 735:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (!(formatAttr.flags & (SECUREC_FLAG_SHORT | SECUREC_FLAG_LONG | SECUREC_
 1974              		.loc 2 735 41
 1975 0422 8B85B0F7 		movl	-2128(%rbp), %eax
 1975      FFFF
 1976              		.loc 2 735 48
 1977 0428 25300800 		andl	$2096, %eax
 1977      00
 1978              		.loc 2 735 28
 1979 042d 85C0     		testl	%eax, %eax
 1980 042f 750F     		jne	.L147
 736:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_FOR_WCHAR
 737:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_SHORT;
 1981              		.loc 2 737 46
 1982 0431 8B85B0F7 		movl	-2128(%rbp), %eax
 1982      FFFF
 1983 0437 83C820   		orl	$32, %eax
 1984 043a 8985B0F7 		movl	%eax, -2128(%rbp)
 1984      FFFF
 1985              	.L147:
 1986              	.LBB5:
 738:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 739:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_WIDECHAR;
 740:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 741:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 742:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */
 743:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* FALLTHRU */
 744:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('c'):
 745:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
 746:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             unsigned int cValue = (unsigned int)va_arg(argList, int);
GAS LISTING /tmp/ccgOk6Ic.s 			page 63


 1987              		.loc 2 746 65
 1988 0440 488B85B8 		movq	-2376(%rbp), %rax
 1988      F6FFFF
 1989 0447 8B00     		movl	(%rax), %eax
 1990 0449 83F82F   		cmpl	$47, %eax
 1991 044c 7730     		ja	.L151
 1992 044e 488B85B8 		movq	-2376(%rbp), %rax
 1992      F6FFFF
 1993 0455 488B5010 		movq	16(%rax), %rdx
 1994 0459 488B85B8 		movq	-2376(%rbp), %rax
 1994      F6FFFF
 1995 0460 8B00     		movl	(%rax), %eax
 1996 0462 89C0     		movl	%eax, %eax
 1997 0464 4801D0   		addq	%rdx, %rax
 1998 0467 488B95B8 		movq	-2376(%rbp), %rdx
 1998      F6FFFF
 1999 046e 8B12     		movl	(%rdx), %edx
 2000 0470 8D4A08   		leal	8(%rdx), %ecx
 2001 0473 488B95B8 		movq	-2376(%rbp), %rdx
 2001      F6FFFF
 2002 047a 890A     		movl	%ecx, (%rdx)
 2003 047c EB1A     		jmp	.L152
 2004              	.L151:
 2005 047e 488B85B8 		movq	-2376(%rbp), %rax
 2005      F6FFFF
 2006 0485 488B4008 		movq	8(%rax), %rax
 2007 0489 488D4808 		leaq	8(%rax), %rcx
 2008 048d 488B95B8 		movq	-2376(%rbp), %rdx
 2008      F6FFFF
 2009 0494 48894A08 		movq	%rcx, 8(%rdx)
 2010              	.L152:
 2011 0498 8B00     		movl	(%rax), %eax
 2012              		.loc 2 746 42
 2013 049a 898524F7 		movl	%eax, -2268(%rbp)
 2013      FFFF
 747:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             textLen = SecDecodeTypeC(&formatAttr, cValue, &formatBuf, &buffer);
 2014              		.loc 2 747 39
 2015 04a0 488D8DD0 		leaq	-2096(%rbp), %rcx
 2015      F7FFFF
 2016 04a7 488D9538 		leaq	-2248(%rbp), %rdx
 2016      F7FFFF
 2017 04ae 8BB524F7 		movl	-2268(%rbp), %esi
 2017      FFFF
 2018 04b4 488D85B0 		leaq	-2128(%rbp), %rax
 2018      F7FFFF
 2019 04bb 4889C7   		movq	%rax, %rdi
 2020 04be E8000000 		call	SecDecodeTypeC
 2020      00
 2021 04c3 8985E8F6 		movl	%eax, -2328(%rbp)
 2021      FFFF
 748:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (textLen < 0) {
 2022              		.loc 2 748 32
 2023 04c9 83BDE8F6 		cmpl	$0, -2328(%rbp)
 2023      FFFF00
 2024 04d0 0F893C11 		jns	.L297
 2024      0000
 749:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 noOutput = 1;
GAS LISTING /tmp/ccgOk6Ic.s 			page 64


 2025              		.loc 2 749 42
 2026 04d6 C785ECF6 		movl	$1, -2324(%rbp)
 2026      FFFF0100 
 2026      0000
 2027              	.LBE5:
 750:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 751:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
 752:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 2028              		.loc 2 752 25
 2029 04e0 E92D1100 		jmp	.L297
 2029      00
 2030              	.L148:
 753:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('S'):    /* wide char string */
 754:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (!(formatAttr.flags & (SECUREC_FLAG_SHORT | SECUREC_FLAG_LONG | SECUREC_
 2031              		.loc 2 754 41
 2032 04e5 8B85B0F7 		movl	-2128(%rbp), %eax
 2032      FFFF
 2033              		.loc 2 754 48
 2034 04eb 25300800 		andl	$2096, %eax
 2034      00
 2035              		.loc 2 754 28
 2036 04f0 85C0     		testl	%eax, %eax
 2037 04f2 750F     		jne	.L144
 755:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifndef SECUREC_FOR_WCHAR
 756:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_WIDECHAR;
 757:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 758:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatAttr.flags |= SECUREC_FLAG_SHORT;
 2038              		.loc 2 758 46
 2039 04f4 8B85B0F7 		movl	-2128(%rbp), %eax
 2039      FFFF
 2040 04fa 83C820   		orl	$32, %eax
 2041 04fd 8985B0F7 		movl	%eax, -2128(%rbp)
 2041      FFFF
 2042              	.L144:
 2043              	.LBB6:
 759:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 760:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 761:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */
 762:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* FALLTHRU */
 763:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('s'):
 764:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
 765:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             char *argPtr = (char *)va_arg(argList, char *);
 2044              		.loc 2 765 35
 2045 0503 488B85B8 		movq	-2376(%rbp), %rax
 2045      F6FFFF
 2046 050a 8B00     		movl	(%rax), %eax
 2047 050c 83F82F   		cmpl	$47, %eax
 2048 050f 7730     		ja	.L155
 2049 0511 488B85B8 		movq	-2376(%rbp), %rax
 2049      F6FFFF
 2050 0518 488B5010 		movq	16(%rax), %rdx
 2051 051c 488B85B8 		movq	-2376(%rbp), %rax
 2051      F6FFFF
 2052 0523 8B00     		movl	(%rax), %eax
 2053 0525 89C0     		movl	%eax, %eax
 2054 0527 4801D0   		addq	%rdx, %rax
 2055 052a 488B95B8 		movq	-2376(%rbp), %rdx
GAS LISTING /tmp/ccgOk6Ic.s 			page 65


 2055      F6FFFF
 2056 0531 8B12     		movl	(%rdx), %edx
 2057 0533 8D4A08   		leal	8(%rdx), %ecx
 2058 0536 488B95B8 		movq	-2376(%rbp), %rdx
 2058      F6FFFF
 2059 053d 890A     		movl	%ecx, (%rdx)
 2060 053f EB1A     		jmp	.L156
 2061              	.L155:
 2062 0541 488B85B8 		movq	-2376(%rbp), %rax
 2062      F6FFFF
 2063 0548 488B4008 		movq	8(%rax), %rax
 2064 054c 488D4808 		leaq	8(%rax), %rcx
 2065 0550 488B95B8 		movq	-2376(%rbp), %rdx
 2065      F6FFFF
 2066 0557 48894A08 		movq	%rcx, 8(%rdx)
 2067              	.L156:
 2068 055b 488B00   		movq	(%rax), %rax
 2069 055e 48898590 		movq	%rax, -2160(%rbp)
 2069      F7FFFF
 766:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             textLen = SecDecodeTypeS(&formatAttr, argPtr, &formatBuf);
 2070              		.loc 2 766 39
 2071 0565 488D9538 		leaq	-2248(%rbp), %rdx
 2071      F7FFFF
 2072 056c 488B8D90 		movq	-2160(%rbp), %rcx
 2072      F7FFFF
 2073 0573 488D85B0 		leaq	-2128(%rbp), %rax
 2073      F7FFFF
 2074 057a 4889CE   		movq	%rcx, %rsi
 2075 057d 4889C7   		movq	%rax, %rdi
 2076 0580 E8000000 		call	SecDecodeTypeS
 2076      00
 2077 0585 8985E8F6 		movl	%eax, -2328(%rbp)
 2077      FFFF
 2078              	.LBE6:
 767:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
 768:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 2079              		.loc 2 768 25
 2080 058b E9861000 		jmp	.L154
 2080      00
 2081              	.L145:
 769:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('n'):
 770:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* higher risk disable it */
 771:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         return -1;
 2082              		.loc 2 771 32
 2083 0590 B8FFFFFF 		movl	$-1, %eax
 2083      FF
 2084 0595 E9251800 		jmp	.L294
 2084      00
 2085              	.L149:
 772:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('E'):    /* fall-through */ /* FALLTHRU */
 773:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('F'):    /* fall-through */ /* FALLTHRU */
 774:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('G'):    /* fall-through */ /* FALLTHRU */
 775:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('A'):    /* fall-through */ /* FALLTHRU */
 776:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* convert format char to lower , use Explicit conversion to clean up compi
 777:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         ch = (SecChar)(ch + ((SecChar)(SECUREC_CHAR('a')) - (SECUREC_CHAR('A'))));
 2086              		.loc 2 777 28
 2087 059a 8385F4F6 		addl	$32, -2316(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 66


 2087      FFFF20
 2088              	.L146:
 2089              	.LBB7:
 778:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */
 779:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* FALLTHRU */
 780:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('e'):    /* fall-through */ /* FALLTHRU */
 781:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('f'):    /* fall-through */ /* FALLTHRU */
 782:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('g'):    /* fall-through */ /* FALLTHRU */
 783:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('a'):
 784:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
 785:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
 786:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             int bufferSize = 0;         /* size of formatBuf.str */
 2090              		.loc 2 786 33
 2091 05a1 C785F8F6 		movl	$0, -2312(%rbp)
 2091      FFFF0000 
 2091      0000
 787:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* floating point conversion */
 788:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatBuf.str = buffer.str; /* output buffer for float string with defa
 2092              		.loc 2 788 43
 2093 05ab 488D85D0 		leaq	-2096(%rbp), %rax
 2093      F7FFFF
 2094 05b2 48898538 		movq	%rax, -2248(%rbp)
 2094      F7FFFF
 789:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 790:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* compute the precision value */
 791:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.precision < 0) {
 2095              		.loc 2 791 43
 2096 05b9 8B85B8F7 		movl	-2120(%rbp), %eax
 2096      FFFF
 2097              		.loc 2 791 32
 2098 05bf 85C0     		testl	%eax, %eax
 2099 05c1 790C     		jns	.L157
 792:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = SECUREC_FLOAT_DEFAULT_PRECISION;
 2100              		.loc 2 792 54
 2101 05c3 C785B8F7 		movl	$6, -2120(%rbp)
 2101      FFFF0600 
 2101      0000
 2102 05cd EB1D     		jmp	.L158
 2103              	.L157:
 793:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.precision == 0 && ch == SECUREC_CHAR('g')) {
 2104              		.loc 2 793 50
 2105 05cf 8B85B8F7 		movl	-2120(%rbp), %eax
 2105      FFFF
 2106              		.loc 2 793 39
 2107 05d5 85C0     		testl	%eax, %eax
 2108 05d7 7513     		jne	.L158
 2109              		.loc 2 793 66 discriminator 1
 2110 05d9 83BDF4F6 		cmpl	$103, -2316(%rbp)
 2110      FFFF67
 2111 05e0 750A     		jne	.L158
 794:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;
 2112              		.loc 2 794 54
 2113 05e2 C785B8F7 		movl	$1, -2120(%rbp)
 2113      FFFF0100 
 2113      0000
 2114              	.L158:
 795:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
GAS LISTING /tmp/ccgOk6Ic.s 			page 67


 796:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 797:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* calc buffer size to store double value
 798:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              * The maximum length of SECUREC_MAX_WIDTH_LEN is enough
 799:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              */
 800:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_LONG_DOUBLE) {
 2115              		.loc 2 800 43
 2116 05ec 8B85B0F7 		movl	-2128(%rbp), %eax
 2116      FFFF
 2117              		.loc 2 800 50
 2118 05f2 25000400 		andl	$1024, %eax
 2118      00
 2119              		.loc 2 800 32
 2120 05f7 85C0     		testl	%eax, %eax
 2121 05f9 742F     		je	.L159
 801:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.precision > (SECUREC_MAX_WIDTH_LEN - SECUREC_FLOAT_B
 2122              		.loc 2 801 47
 2123 05fb 8B85B8F7 		movl	-2120(%rbp), %eax
 2123      FFFF
 2124              		.loc 2 801 36
 2125 0601 3D5CB9CC 		cmpl	$214743388, %eax
 2125      0C
 2126 0606 7E0F     		jle	.L160
 802:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2127              		.loc 2 802 46
 2128 0608 C785ECF6 		movl	$1, -2324(%rbp)
 2128      FFFF0100 
 2128      0000
 803:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2129              		.loc 2 803 37
 2130 0612 E9910300 		jmp	.L161
 2130      00
 2131              	.L160:
 804:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 805:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* Long double needs to meet the basic print length */
 806:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 bufferSize = SECUREC_FLOAT_BUFSIZE_LB + formatAttr.precision + SECU
 2132              		.loc 2 806 83
 2133 0617 8B85B8F7 		movl	-2120(%rbp), %eax
 2133      FFFF
 2134              		.loc 2 806 44
 2135 061d 056E1300 		addl	$4974, %eax
 2135      00
 2136 0622 8985F8F6 		movl	%eax, -2312(%rbp)
 2136      FFFF
 2137 0628 EB2D     		jmp	.L162
 2138              	.L159:
 807:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
 808:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.precision > (SECUREC_MAX_WIDTH_LEN - SECUREC_FLOAT_B
 2139              		.loc 2 808 47
 2140 062a 8B85B8F7 		movl	-2120(%rbp), %eax
 2140      FFFF
 2141              		.loc 2 808 36
 2142 0630 3D6BCBCC 		cmpl	$214748011, %eax
 2142      0C
 2143 0635 7E0F     		jle	.L163
 809:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2144              		.loc 2 809 46
 2145 0637 C785ECF6 		movl	$1, -2324(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 68


 2145      FFFF0100 
 2145      0000
 810:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2146              		.loc 2 810 37
 2147 0641 E9620300 		jmp	.L161
 2147      00
 2148              	.L163:
 811:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 812:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* Double needs to meet the basic print length */
 813:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 bufferSize = SECUREC_FLOAT_BUFSIZE + formatAttr.precision + SECUREC
 2149              		.loc 2 813 80
 2150 0646 8B85B8F7 		movl	-2120(%rbp), %eax
 2150      FFFF
 2151              		.loc 2 813 44
 2152 064c 055F0100 		addl	$351, %eax
 2152      00
 2153 0651 8985F8F6 		movl	%eax, -2312(%rbp)
 2153      FFFF
 2154              	.L162:
 814:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 815:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.fldWidth > bufferSize) {
 2155              		.loc 2 815 43
 2156 0657 8B85B4F7 		movl	-2124(%rbp), %eax
 2156      FFFF
 2157              		.loc 2 815 32
 2158 065d 3985F8F6 		cmpl	%eax, -2312(%rbp)
 2158      FFFF
 2159 0663 7D0F     		jge	.L164
 816:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 bufferSize = formatAttr.fldWidth + SECUREC_FLOAT_BUF_EXT;
 2160              		.loc 2 816 56
 2161 0665 8B85B4F7 		movl	-2124(%rbp), %eax
 2161      FFFF
 2162              		.loc 2 816 44
 2163 066b 83C002   		addl	$2, %eax
 2164 066e 8985F8F6 		movl	%eax, -2312(%rbp)
 2164      FFFF
 2165              	.L164:
 817:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 818:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 819:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (bufferSize > SECUREC_BUFFER_SIZE) {
 2166              		.loc 2 819 32
 2167 0674 81BDF8F6 		cmpl	$512, -2312(%rbp)
 2167      FFFF0002 
 2167      0000
 2168 067e 7E40     		jle	.L165
 820:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* the current vlaue of SECUREC_BUFFER_SIZE could NOT store the
 821:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                  * formatted float string
 822:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                  */
 823:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 floatBuf = (char *)SECUREC_MALLOC(((size_t)(unsigned int)bufferSize
 2169              		.loc 2 823 52
 2170 0680 8B85F8F6 		movl	-2312(%rbp), %eax
 2170      FFFF
 2171 0686 89C0     		movl	%eax, %eax
 2172 0688 4889C7   		movq	%rax, %rdi
 2173 068b E8000000 		call	malloc@PLT
 2173      00
 2174 0690 48898540 		movq	%rax, -2240(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 69


 2174      F7FFFF
 824:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (floatBuf != NULL) {
 2175              		.loc 2 824 36
 2176 0697 4883BD40 		cmpq	$0, -2240(%rbp)
 2176      F7FFFF00 
 2177 069f 7410     		je	.L166
 825:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatBuf.str = floatBuf;
 2178              		.loc 2 825 51
 2179 06a1 488B8540 		movq	-2240(%rbp), %rax
 2179      F7FFFF
 2180 06a8 48898538 		movq	%rax, -2248(%rbp)
 2180      F7FFFF
 2181 06af EB0F     		jmp	.L165
 2182              	.L166:
 826:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
 827:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2183              		.loc 2 827 46
 2184 06b1 C785ECF6 		movl	$1, -2324(%rbp)
 2184      FFFF0100 
 2184      0000
 828:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2185              		.loc 2 828 37
 2186 06bb E9E80200 		jmp	.L161
 2186      00
 2187              	.L165:
 2188              	.LBB8:
 829:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 830:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 831:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 832:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             do {
 833:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* add following code to call system sprintf API for float number *
 834:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 const SecChar *pFloatFmt = format - 2;  /* sub 2 to the position be
 2189              		.loc 2 834 67
 2190 06c0 488B8530 		movq	-2256(%rbp), %rax
 2190      F7FFFF
 2191              		.loc 2 834 48
 2192 06c7 4883E808 		subq	$8, %rax
 2193 06cb 48898550 		movq	%rax, -2224(%rbp)
 2193      F7FFFF
 835:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 int k;
 836:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 int fFmtStrLen;
 837:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 char fFmtBuf[SECUREC_FMT_STR_LEN];
 838:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 char *fFmtStr = fFmtBuf;
 2194              		.loc 2 838 39
 2195 06d2 488D45E0 		leaq	-32(%rbp), %rax
 2196 06d6 48898558 		movq	%rax, -2216(%rbp)
 2196      F7FFFF
 839:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 char *fFmtHeap = NULL;    /* to clear warning */
 2197              		.loc 2 839 39
 2198 06dd 48C78560 		movq	$0, -2208(%rbp)
 2198      F7FFFF00 
 2198      000000
 840:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 841:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 while (SECUREC_CHAR('%') != *pFloatFmt) { /* must meet '%' */
 2199              		.loc 2 841 39
 2200 06e8 EB08     		jmp	.L167
 2201              	.L168:
GAS LISTING /tmp/ccgOk6Ic.s 			page 70


 842:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     --pFloatFmt;
 2202              		.loc 2 842 37
 2203 06ea 4883AD50 		subq	$4, -2224(%rbp)
 2203      F7FFFF04 
 2204              	.L167:
 841:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     --pFloatFmt;
 2205              		.loc 2 841 61
 2206 06f2 488B8550 		movq	-2224(%rbp), %rax
 2206      F7FFFF
 2207 06f9 8B00     		movl	(%rax), %eax
 841:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     --pFloatFmt;
 2208              		.loc 2 841 39
 2209 06fb 83F825   		cmpl	$37, %eax
 2210 06fe 75EA     		jne	.L168
 843:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 844:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 fFmtStrLen = (int)((format - pFloatFmt) + 1);   /* with ending term
 2211              		.loc 2 844 60
 2212 0700 488B8530 		movq	-2256(%rbp), %rax
 2212      F7FFFF
 2213 0707 482B8550 		subq	-2224(%rbp), %rax
 2213      F7FFFF
 2214 070e 48C1F802 		sarq	$2, %rax
 2215              		.loc 2 844 73
 2216 0712 83C001   		addl	$1, %eax
 2217              		.loc 2 844 44
 2218 0715 898528F7 		movl	%eax, -2264(%rbp)
 2218      FFFF
 845:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (fFmtStrLen > SECUREC_FMT_STR_LEN) {
 2219              		.loc 2 845 36
 2220 071b 83BD28F7 		cmpl	$16, -2264(%rbp)
 2220      FFFF10
 2221 0722 0F8EAD00 		jle	.L169
 2221      0000
 846:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* if SECUREC_FMT_STR_LEN is NOT enough, alloc a new buffer */
 847:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     fFmtHeap = (char *)SECUREC_MALLOC((size_t)((unsigned int)fFmtSt
 2222              		.loc 2 847 56
 2223 0728 8B8528F7 		movl	-2264(%rbp), %eax
 2223      FFFF
 2224 072e 89C0     		movl	%eax, %eax
 2225 0730 4889C7   		movq	%rax, %rdi
 2226 0733 E8000000 		call	malloc@PLT
 2226      00
 2227 0738 48898560 		movq	%rax, -2208(%rbp)
 2227      F7FFFF
 848:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     if (fFmtHeap == NULL) {
 2228              		.loc 2 848 40
 2229 073f 4883BD60 		cmpq	$0, -2208(%rbp)
 2229      F7FFFF00 
 2230 0747 750F     		jne	.L170
 849:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         noOutput = 1;
 2231              		.loc 2 849 50
 2232 0749 C785ECF6 		movl	$1, -2324(%rbp)
 2232      FFFF0100 
 2232      0000
 850:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 2233              		.loc 2 850 41
 2234 0753 E9500200 		jmp	.L161
GAS LISTING /tmp/ccgOk6Ic.s 			page 71


 2234      00
 2235              	.L170:
 851:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } else {
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         for (k = 0; k < fFmtStrLen - 1; ++k) {
 2236              		.loc 2 852 48
 2237 0758 C785FCF6 		movl	$0, -2308(%rbp)
 2237      FFFF0000 
 2237      0000
 2238              		.loc 2 852 41
 2239 0762 EB3A     		jmp	.L172
 2240              	.L173:
 853:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 854:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             fFmtHeap[k] = (char)(pFloatFmt[k]); /* copy the format 
 2241              		.loc 2 854 75 discriminator 3
 2242 0764 8B85FCF6 		movl	-2308(%rbp), %eax
 2242      FFFF
 2243 076a 4898     		cltq
 2244 076c 488D1485 		leaq	0(,%rax,4), %rdx
 2244      00000000 
 2245 0774 488B8550 		movq	-2224(%rbp), %rax
 2245      F7FFFF
 2246 077b 4801D0   		addq	%rdx, %rax
 2247 077e 8B08     		movl	(%rax), %ecx
 2248              		.loc 2 854 53 discriminator 3
 2249 0780 8B85FCF6 		movl	-2308(%rbp), %eax
 2249      FFFF
 2250 0786 4863D0   		movslq	%eax, %rdx
 2251 0789 488B8560 		movq	-2208(%rbp), %rax
 2251      F7FFFF
 2252 0790 4801D0   		addq	%rdx, %rax
 2253              		.loc 2 854 59 discriminator 3
 2254 0793 89CA     		movl	%ecx, %edx
 2255              		.loc 2 854 57 discriminator 3
 2256 0795 8810     		movb	%dl, (%rax)
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 2257              		.loc 2 852 73 discriminator 3
 2258 0797 8385FCF6 		addl	$1, -2308(%rbp)
 2258      FFFF01
 2259              	.L172:
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 2260              		.loc 2 852 68 discriminator 1
 2261 079e 8B8528F7 		movl	-2264(%rbp), %eax
 2261      FFFF
 2262 07a4 83E801   		subl	$1, %eax
 852:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             /* convert wchar to char */
 2263              		.loc 2 852 41 discriminator 1
 2264 07a7 3985FCF6 		cmpl	%eax, -2308(%rbp)
 2264      FFFF
 2265 07ad 7CB5     		jl	.L173
 855:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         }
 856:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         fFmtHeap[k] = '\0';
 2266              		.loc 2 856 49
 2267 07af 8B85FCF6 		movl	-2308(%rbp), %eax
 2267      FFFF
 2268 07b5 4863D0   		movslq	%eax, %rdx
 2269 07b8 488B8560 		movq	-2208(%rbp), %rax
 2269      F7FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 72


 2270 07bf 4801D0   		addq	%rdx, %rax
 2271              		.loc 2 856 53
 2272 07c2 C60000   		movb	$0, (%rax)
 857:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 858:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         fFmtStr = fFmtHeap;
 2273              		.loc 2 858 49
 2274 07c5 488B8560 		movq	-2208(%rbp), %rax
 2274      F7FFFF
 2275 07cc 48898558 		movq	%rax, -2216(%rbp)
 2275      F7FFFF
 2276 07d3 EB5B     		jmp	.L174
 2277              	.L169:
 859:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
 860:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
 861:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* purpose of the repeat code is to solve the tool alarm  Redun
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     for (k = 0; k < fFmtStrLen - 1; ++k) {
 2278              		.loc 2 862 44
 2279 07d5 C785FCF6 		movl	$0, -2308(%rbp)
 2279      FFFF0000 
 2279      0000
 2280              		.loc 2 862 37
 2281 07df EB31     		jmp	.L175
 2282              	.L176:
 863:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 864:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         fFmtBuf[k] = (char)(pFloatFmt[k]);  /* copy the format stri
 2283              		.loc 2 864 70 discriminator 3
 2284 07e1 8B85FCF6 		movl	-2308(%rbp), %eax
 2284      FFFF
 2285 07e7 4898     		cltq
 2286 07e9 488D1485 		leaq	0(,%rax,4), %rdx
 2286      00000000 
 2287 07f1 488B8550 		movq	-2224(%rbp), %rax
 2287      F7FFFF
 2288 07f8 4801D0   		addq	%rdx, %rax
 2289 07fb 8B00     		movl	(%rax), %eax
 2290              		.loc 2 864 54 discriminator 3
 2291 07fd 89C2     		movl	%eax, %edx
 2292              		.loc 2 864 52 discriminator 3
 2293 07ff 8B85FCF6 		movl	-2308(%rbp), %eax
 2293      FFFF
 2294 0805 4898     		cltq
 2295 0807 885405E0 		movb	%dl, -32(%rbp,%rax)
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 2296              		.loc 2 862 69 discriminator 3
 2297 080b 8385FCF6 		addl	$1, -2308(%rbp)
 2297      FFFF01
 2298              	.L175:
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 2299              		.loc 2 862 64 discriminator 1
 2300 0812 8B8528F7 		movl	-2264(%rbp), %eax
 2300      FFFF
 2301 0818 83E801   		subl	$1, %eax
 862:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* convert wchar to char */
 2302              		.loc 2 862 37 discriminator 1
 2303 081b 3985FCF6 		cmpl	%eax, -2308(%rbp)
 2303      FFFF
 2304 0821 7CBE     		jl	.L176
GAS LISTING /tmp/ccgOk6Ic.s 			page 73


 865:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
 866:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     fFmtBuf[k] = '\0';
 2305              		.loc 2 866 48
 2306 0823 8B85FCF6 		movl	-2308(%rbp), %eax
 2306      FFFF
 2307 0829 4898     		cltq
 2308 082b C64405E0 		movb	$0, -32(%rbp,%rax)
 2308      00
 2309              	.L174:
 867:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 868:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 869:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_LONG_DOUBLE) {
 2310              		.loc 2 869 47
 2311 0830 8B85B0F7 		movl	-2128(%rbp), %eax
 2311      FFFF
 2312              		.loc 2 869 54
 2313 0836 25000400 		andl	$1024, %eax
 2313      00
 2314              		.loc 2 869 36
 2315 083b 85C0     		testl	%eax, %eax
 2316 083d 7465     		je	.L177
 2317              	.LBB9:
 870:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 871:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     long double tmp = (long double)va_arg(argList, long double);
 2318              		.loc 2 871 49
 2319 083f 488B85B8 		movq	-2376(%rbp), %rax
 2319      F6FFFF
 2320 0846 488B4008 		movq	8(%rax), %rax
 2321 084a 4883C00F 		addq	$15, %rax
 2322 084e 4883E0F0 		andq	$-16, %rax
 2323 0852 488D4810 		leaq	16(%rax), %rcx
 2324 0856 488B95B8 		movq	-2376(%rbp), %rdx
 2324      F6FFFF
 2325 085d 48894A08 		movq	%rcx, 8(%rdx)
 2326 0861 DB28     		fldt	(%rax)
 2327 0863 DBBDA0F7 		fstpt	-2144(%rbp)
 2327      FFFF
 872:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     textLen = SecFormatLongDboule(formatBuf.str, &formatAttr, fFmtS
 2328              		.loc 2 872 47
 2329 0869 488B8538 		movq	-2248(%rbp), %rax
 2329      F7FFFF
 2330 0870 488B9558 		movq	-2216(%rbp), %rdx
 2330      F7FFFF
 2331 0877 488D8DB0 		leaq	-2128(%rbp), %rcx
 2331      F7FFFF
 2332 087e FFB5A8F7 		pushq	-2136(%rbp)
 2332      FFFF
 2333 0884 FFB5A0F7 		pushq	-2144(%rbp)
 2333      FFFF
 2334 088a 4889CE   		movq	%rcx, %rsi
 2335 088d 4889C7   		movq	%rax, %rdi
 2336 0890 E8000000 		call	SecFormatLongDboule
 2336      00
 2337 0895 4883C410 		addq	$16, %rsp
 2338 0899 8985E8F6 		movl	%eax, -2328(%rbp)
 2338      FFFF
 2339              	.LBE9:
GAS LISTING /tmp/ccgOk6Ic.s 			page 74


 2340 089f E99C0000 		jmp	.L178
 2340      00
 2341              	.L177:
 2342              	.LBB10:
 873:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 874:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     double tmp = (double)va_arg(argList, double);
 875:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     textLen = SecFormatDboule(formatBuf.str, &formatAttr, fFmtStr, 
 876:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 877:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
 878:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     double tmp = (double)va_arg(argList, double);
 2343              		.loc 2 878 44
 2344 08a4 488B85B8 		movq	-2376(%rbp), %rax
 2344      F6FFFF
 2345 08ab 8B4004   		movl	4(%rax), %eax
 2346 08ae 3DAF0000 		cmpl	$175, %eax
 2346      00
 2347 08b3 7733     		ja	.L179
 2348 08b5 488B85B8 		movq	-2376(%rbp), %rax
 2348      F6FFFF
 2349 08bc 488B5010 		movq	16(%rax), %rdx
 2350 08c0 488B85B8 		movq	-2376(%rbp), %rax
 2350      F6FFFF
 2351 08c7 8B4004   		movl	4(%rax), %eax
 2352 08ca 89C0     		movl	%eax, %eax
 2353 08cc 4801D0   		addq	%rdx, %rax
 2354 08cf 488B95B8 		movq	-2376(%rbp), %rdx
 2354      F6FFFF
 2355 08d6 8B5204   		movl	4(%rdx), %edx
 2356 08d9 8D4A10   		leal	16(%rdx), %ecx
 2357 08dc 488B95B8 		movq	-2376(%rbp), %rdx
 2357      F6FFFF
 2358 08e3 894A04   		movl	%ecx, 4(%rdx)
 2359 08e6 EB1A     		jmp	.L180
 2360              	.L179:
 2361 08e8 488B85B8 		movq	-2376(%rbp), %rax
 2361      F6FFFF
 2362 08ef 488B4008 		movq	8(%rax), %rax
 2363 08f3 488D4808 		leaq	8(%rax), %rcx
 2364 08f7 488B95B8 		movq	-2376(%rbp), %rdx
 2364      F6FFFF
 2365 08fe 48894A08 		movq	%rcx, 8(%rdx)
 2366              	.L180:
 2367 0902 F20F1000 		movsd	(%rax), %xmm0
 2368 0906 F20F1185 		movsd	%xmm0, -2152(%rbp)
 2368      98F7FFFF 
 879:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     textLen = SecFormatDboule(formatBuf.str, &formatAttr, fFmtStr, 
 2369              		.loc 2 879 47
 2370 090e 488B8538 		movq	-2248(%rbp), %rax
 2370      F7FFFF
 2371 0915 488BB598 		movq	-2152(%rbp), %rsi
 2371      F7FFFF
 2372 091c 488B9558 		movq	-2216(%rbp), %rdx
 2372      F7FFFF
 2373 0923 488D8DB0 		leaq	-2128(%rbp), %rcx
 2373      F7FFFF
 2374 092a 66480F6E 		movq	%rsi, %xmm0
 2374      C6
GAS LISTING /tmp/ccgOk6Ic.s 			page 75


 2375 092f 4889CE   		movq	%rcx, %rsi
 2376 0932 4889C7   		movq	%rax, %rdi
 2377 0935 E8000000 		call	SecFormatDboule
 2377      00
 2378 093a 8985E8F6 		movl	%eax, -2328(%rbp)
 2378      FFFF
 2379              	.L178:
 2380              	.LBE10:
 880:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 881:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 882:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (fFmtHeap != NULL) {
 2381              		.loc 2 882 36
 2382 0940 4883BD60 		cmpq	$0, -2208(%rbp)
 2382      F7FFFF00 
 2383 0948 741A     		je	.L181
 883:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* if buffer is alloced on heap, free it */
 884:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     SECUREC_FREE(fFmtHeap);
 2384              		.loc 2 884 37
 2385 094a 488B8560 		movq	-2208(%rbp), %rax
 2385      F7FFFF
 2386 0951 4889C7   		movq	%rax, %rdi
 2387 0954 E8000000 		call	free@PLT
 2387      00
 885:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     fFmtHeap = NULL;
 2388              		.loc 2 885 46
 2389 0959 48C78560 		movq	$0, -2208(%rbp)
 2389      F7FFFF00 
 2389      000000
 2390              	.L181:
 886:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* to clear e438 last value assigned not used , the compiler wi
 887:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                      * optimize this code
 888:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                      */
 889:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     (void)fFmtHeap;
 890:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 891:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (textLen < 0 || textLen >= bufferSize) {
 2391              		.loc 2 891 36
 2392 0964 83BDE8F6 		cmpl	$0, -2328(%rbp)
 2392      FFFF00
 2393 096b 780E     		js	.L182
 2394              		.loc 2 891 49 discriminator 1
 2395 096d 8B85E8F6 		movl	-2328(%rbp), %eax
 2395      FFFF
 2396 0973 3B85F8F6 		cmpl	-2312(%rbp), %eax
 2396      FFFF
 2397 0979 7C0C     		jl	.L183
 2398              	.L182:
 892:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* bufferSize is large enough, just validation the return value
 893:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     noOutput = 1;
 2399              		.loc 2 893 46
 2400 097b C785ECF6 		movl	$1, -2324(%rbp)
 2400      FFFF0100 
 2400      0000
 894:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     break;
 2401              		.loc 2 894 37
 2402 0985 EB21     		jmp	.L161
 2403              	.L183:
 895:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
GAS LISTING /tmp/ccgOk6Ic.s 			page 76


 896:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 897:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* no padding ,this variable to calculate amount of padding */
 898:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.fldWidth = textLen;
 2404              		.loc 2 898 53
 2405 0987 8B85E8F6 		movl	-2328(%rbp), %eax
 2405      FFFF
 2406 098d 8985B4F7 		movl	%eax, -2124(%rbp)
 2406      FFFF
 899:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = 0;  /* no padding ,this variable to  calculate amount o
 2407              		.loc 2 899 43
 2408 0993 C785E4F6 		movl	$0, -2332(%rbp)
 2408      FFFF0000 
 2408      0000
 900:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags = 0;   /* clear all internal formatAttr.flags */
 2409              		.loc 2 900 50
 2410 099d C785B0F7 		movl	$0, -2128(%rbp)
 2410      FFFF0000 
 2410      0000
 901:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2411              		.loc 2 901 33
 2412 09a7 90       		nop
 2413              	.L161:
 2414              	.LBE8:
 2415              	.LBE7:
 902:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } SECUREC_WHILE_ZERO;
 903:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
 904:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 2416              		.loc 2 904 25 discriminator 3
 2417 09a8 E9690C00 		jmp	.L154
 2417      00
 2418              	.L141:
 905:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 906:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         return -1;
 907:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 908:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('p'): /* fall-through */ /* FALLTHRU */
 909:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('X'): /* fall-through */ /* FALLTHRU */
 910:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('x'):
 911:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* unsigned lower hex output */
 912:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         digits = itoaLowerDigits;
 2419              		.loc 2 912 32 discriminator 1
 2420 09ad 488B0500 		movq	itoaLowerDigits.3799(%rip), %rax
 2420      000000
 2421 09b4 48898548 		movq	%rax, -2232(%rbp)
 2421      F7FFFF
 913:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         radix = SECUREC_RADIX_HEX;
 2422              		.loc 2 913 31 discriminator 1
 2423 09bb C785E0F6 		movl	$16, -2336(%rbp)
 2423      FFFF1000 
 2423      0000
 2424 09c5 83BDF4F6 		cmpl	$88, -2316(%rbp)
 2424      FFFF58
 2425 09cc 7441     		je	.L184
 2426 09ce 83BDF4F6 		cmpl	$112, -2316(%rbp)
 2426      FFFF70
 2427 09d5 7548     		jne	.L298
 914:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         switch (ch) {
 915:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('p'):
GAS LISTING /tmp/ccgOk6Ic.s 			page 77


 916:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* print a pointer */
 917:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT)
 918:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
 919:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 920:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_POINTER;
 2428              		.loc 2 920 50
 2429 09d7 8B85B0F7 		movl	-2128(%rbp), %eax
 2429      FFFF
 2430 09dd 80CC40   		orb	$64, %ah
 2431 09e0 8985B0F7 		movl	%eax, -2128(%rbp)
 2431      FFFF
 921:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 922:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
 923:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_I64;   /* converting an int64 */
 2432              		.loc 2 923 50
 2433 09e6 8B85B0F7 		movl	-2128(%rbp), %eax
 2433      FFFF
 2434 09ec 80CC80   		orb	$-128, %ah
 2435 09ef 8985B0F7 		movl	%eax, -2128(%rbp)
 2435      FFFF
 924:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 925:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_LONG;  /* converting a long */
 926:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 927:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 928:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT) || defined(SECUREC_VXWORKS_PLATFORM)) && (!defined(SE
 929:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_VXWORKS_PLATFORM)
 930:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;
 931:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 932:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 0;
 2436              		.loc 2 932 54
 2437 09f5 C785B8F7 		movl	$0, -2120(%rbp)
 2437      FFFF0000 
 2437      0000
 933:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 934:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_ALTERNATE; /* "0x" is not default 
 2438              		.loc 2 934 50
 2439 09ff 8B85B0F7 		movl	-2128(%rbp), %eax
 2439      FFFF
 2440 0a05 0C80     		orb	$-128, %al
 2441 0a07 8985B0F7 		movl	%eax, -2128(%rbp)
 2441      FFFF
 935:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2442              		.loc 2 935 33
 2443 0a0d EB11     		jmp	.L186
 2444              	.L184:
 936:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 937:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 /* not linux vxwoks */
 938:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(_AIX) || defined(SECUREC_ON_SOLARIS)
 939:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;
 940:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 941:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 2 * sizeof(void *);  /* 2 precision of diffe
 942:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 943:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 944:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 945:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_ON_UNIX)
 946:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 947:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
GAS LISTING /tmp/ccgOk6Ic.s 			page 78


 948:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* fall-through */ /* FALLTHRU */
 949:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('X'): /* fall-through */ /* FALLTHRU */
 950:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* unsigned upper hex output */
 951:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 digits = itoaUpperDigits;
 2445              		.loc 2 951 40
 2446 0a0f 488B0500 		movq	itoaUpperDigits.3798(%rip), %rax
 2446      000000
 2447 0a16 48898548 		movq	%rax, -2232(%rbp)
 2447      F7FFFF
 952:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2448              		.loc 2 952 33
 2449 0a1d EB01     		jmp	.L186
 2450              	.L298:
 953:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             default:
 954:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2451              		.loc 2 954 33
 2452 0a1f 90       		nop
 2453              	.L186:
 955:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 956:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 957:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (formatAttr.flags & SECUREC_FLAG_ALTERNATE) {
 2454              		.loc 2 957 39
 2455 0a20 8B85B0F7 		movl	-2128(%rbp), %eax
 2455      FFFF
 2456              		.loc 2 957 46
 2457 0a26 25800000 		andl	$128, %eax
 2457      00
 2458              		.loc 2 957 28
 2459 0a2b 85C0     		testl	%eax, %eax
 2460 0a2d 743E     		je	.L143
 958:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* alternate form means '0x' prefix */
 959:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR('0');
 2461              		.loc 2 959 39
 2462 0a2f C785C8F7 		movl	$48, -2104(%rbp)
 2462      FFFF3000 
 2462      0000
 960:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[1] = (SecChar)(digits[16]); /* 16 for 'x' or 'X' */
 2463              		.loc 2 960 57
 2464 0a39 488B8548 		movq	-2232(%rbp), %rax
 2464      F7FFFF
 2465 0a40 4883C010 		addq	$16, %rax
 2466 0a44 0FB600   		movzbl	(%rax), %eax
 2467              		.loc 2 960 41
 2468 0a47 0FBEC0   		movsbl	%al, %eax
 2469              		.loc 2 960 39
 2470 0a4a 8985CCF7 		movl	%eax, -2100(%rbp)
 2470      FFFF
 961:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 962:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if (defined(SECUREC_COMPATIBLE_LINUX_FORMAT) || defined(SECUREC_VXWORKS_PLATFORM))
 963:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (ch == 'p') {
 2471              		.loc 2 963 32
 2472 0a50 83BDF4F6 		cmpl	$112, -2316(%rbp)
 2472      FFFF70
 2473 0a57 750A     		jne	.L187
 964:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefix[1] = SECUREC_CHAR('x');
 2474              		.loc 2 964 43
 2475 0a59 C785CCF7 		movl	$120, -2100(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 79


 2475      FFFF7800 
 2475      0000
 2476              	.L187:
 965:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 966:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 967:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(_AIX) || defined(SECUREC_ON_SOLARIS)
 968:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (ch == 'p') {
 969:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = 0;
 970:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
 971:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = SECUREC_PREFIX_LEN;
 972:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 973:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
 974:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = SECUREC_PREFIX_LEN;
 2477              		.loc 2 974 39
 2478 0a63 C785E4F6 		movl	$2, -2332(%rbp)
 2478      FFFF0200 
 2478      0000
 2479              	.L143:
 2480 0a6d 83BDF4F6 		cmpl	$117, -2316(%rbp)
 2480      FFFF75
 2481 0a74 743C     		je	.L188
 2482 0a76 83BDF4F6 		cmpl	$117, -2316(%rbp)
 2482      FFFF75
 2483 0a7d 7F69     		jg	.L299
 2484 0a7f 83BDF4F6 		cmpl	$111, -2316(%rbp)
 2484      FFFF6F
 2485 0a86 7436     		je	.L190
 2486 0a88 83BDF4F6 		cmpl	$111, -2316(%rbp)
 2486      FFFF6F
 2487 0a8f 7F57     		jg	.L299
 2488 0a91 83BDF4F6 		cmpl	$100, -2316(%rbp)
 2488      FFFF64
 2489 0a98 7409     		je	.L191
 2490 0a9a 83BDF4F6 		cmpl	$105, -2316(%rbp)
 2490      FFFF69
 2491 0aa1 7545     		jne	.L299
 2492              	.L191:
 975:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 976:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
 977:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 978:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* fall-through */ /* FALLTHRU */
 979:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('i'):    /* fall-through */ /* FALLTHRU */
 980:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('d'):    /* fall-through */ /* FALLTHRU */
 981:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('u'):    /* fall-through */ /* FALLTHRU */
 982:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('o'):    /* fall-through */ /* FALLTHRU */
 983:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         switch (ch) {
 984:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('i'): /* fall-through */ /* FALLTHRU */
 985:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('d'): /* fall-through */ /* FALLTHRU */
 986:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* signed decimal output */
 987:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_SIGNED;
 2493              		.loc 2 987 50
 2494 0aa3 8B85B0F7 		movl	-2128(%rbp), %eax
 2494      FFFF
 2495 0aa9 83C840   		orl	$64, %eax
 2496 0aac 8985B0F7 		movl	%eax, -2128(%rbp)
 2496      FFFF
 2497              	.L188:
GAS LISTING /tmp/ccgOk6Ic.s 			page 80


 988:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* fall-through */ /* FALLTHRU */
 989:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('u'):
 990:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 radix = SECUREC_RADIX_DECIMAL;
 2498              		.loc 2 990 39
 2499 0ab2 C785E0F6 		movl	$10, -2336(%rbp)
 2499      FFFF0A00 
 2499      0000
 991:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2500              		.loc 2 991 33
 2501 0abc EB2E     		jmp	.L192
 2502              	.L190:
 992:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             case SECUREC_CHAR('o'):
 993:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 /* unsigned octal output */
 994:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 radix = SECUREC_RADIX_OCTAL;
 2503              		.loc 2 994 39
 2504 0abe C785E0F6 		movl	$8, -2336(%rbp)
 2504      FFFF0800 
 2504      0000
 995:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_ALTERNATE) {
 2505              		.loc 2 995 47
 2506 0ac8 8B85B0F7 		movl	-2128(%rbp), %eax
 2506      FFFF
 2507              		.loc 2 995 54
 2508 0ace 25800000 		andl	$128, %eax
 2508      00
 2509              		.loc 2 995 36
 2510 0ad3 85C0     		testl	%eax, %eax
 2511 0ad5 7414     		je	.L300
 996:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* alternate form means force a leading 0 */
 997:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatAttr.flags |= SECUREC_FLAG_FORCE_OCTAL;
 2512              		.loc 2 997 54
 2513 0ad7 8B85B0F7 		movl	-2128(%rbp), %eax
 2513      FFFF
 2514 0add 80CC02   		orb	$2, %ah
 2515 0ae0 8985B0F7 		movl	%eax, -2128(%rbp)
 2515      FFFF
 998:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 999:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2516              		.loc 2 999 33
 2517 0ae6 EB03     		jmp	.L300
 2518              	.L299:
1000:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             default:
1001:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
 2519              		.loc 2 1001 33
 2520 0ae8 90       		nop
 2521 0ae9 EB01     		jmp	.L192
 2522              	.L300:
 999:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             default:
 2523              		.loc 2 999 33
 2524 0aeb 90       		nop
 2525              	.L192:
 2526              	.LBB11:
1002:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1003:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1004:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         do {
1005:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1006:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SecUnsignedInt64 number = 0;    /* number to convert */
GAS LISTING /tmp/ccgOk6Ic.s 			page 81


 2527              		.loc 2 1006 46
 2528 0aec 48C78568 		movq	$0, -2200(%rbp)
 2528      F7FFFF00 
 2528      000000
1007:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SecInt64 l; /* temp long value */
1008:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1009:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* read argument into variable l */
1010:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_I64) {
 2529              		.loc 2 1010 43
 2530 0af7 8B85B0F7 		movl	-2128(%rbp), %eax
 2530      FFFF
 2531              		.loc 2 1010 50
 2532 0afd 25008000 		andl	$32768, %eax
 2532      00
 2533              		.loc 2 1010 32
 2534 0b02 85C0     		testl	%eax, %eax
 2535 0b04 7467     		je	.L194
1011:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (SecInt64)va_arg(argList, SecInt64);
 2536              		.loc 2 1011 35
 2537 0b06 488B85B8 		movq	-2376(%rbp), %rax
 2537      F6FFFF
 2538 0b0d 8B00     		movl	(%rax), %eax
 2539 0b0f 83F82F   		cmpl	$47, %eax
 2540 0b12 7730     		ja	.L195
 2541 0b14 488B85B8 		movq	-2376(%rbp), %rax
 2541      F6FFFF
 2542 0b1b 488B5010 		movq	16(%rax), %rdx
 2543 0b1f 488B85B8 		movq	-2376(%rbp), %rax
 2543      F6FFFF
 2544 0b26 8B00     		movl	(%rax), %eax
 2545 0b28 89C0     		movl	%eax, %eax
 2546 0b2a 4801D0   		addq	%rdx, %rax
 2547 0b2d 488B95B8 		movq	-2376(%rbp), %rdx
 2547      F6FFFF
 2548 0b34 8B12     		movl	(%rdx), %edx
 2549 0b36 8D4A08   		leal	8(%rdx), %ecx
 2550 0b39 488B95B8 		movq	-2376(%rbp), %rdx
 2550      F6FFFF
 2551 0b40 890A     		movl	%ecx, (%rdx)
 2552 0b42 EB1A     		jmp	.L196
 2553              	.L195:
 2554 0b44 488B85B8 		movq	-2376(%rbp), %rax
 2554      F6FFFF
 2555 0b4b 488B4008 		movq	8(%rax), %rax
 2556 0b4f 488D4808 		leaq	8(%rax), %rcx
 2557 0b53 488B95B8 		movq	-2376(%rbp), %rdx
 2557      F6FFFF
 2558 0b5a 48894A08 		movq	%rcx, 8(%rdx)
 2559              	.L196:
 2560 0b5e 488B00   		movq	(%rax), %rax
 2561 0b61 48898570 		movq	%rax, -2192(%rbp)
 2561      F7FFFF
 2562 0b68 E93F0700 		jmp	.L197
 2562      00
 2563              	.L194:
1012:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_LONGLONG) {
 2564              		.loc 2 1012 50
GAS LISTING /tmp/ccgOk6Ic.s 			page 82


 2565 0b6d 8B85B0F7 		movl	-2128(%rbp), %eax
 2565      FFFF
 2566              		.loc 2 1012 57
 2567 0b73 25001000 		andl	$4096, %eax
 2567      00
 2568              		.loc 2 1012 39
 2569 0b78 85C0     		testl	%eax, %eax
 2570 0b7a 7467     		je	.L198
1013:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (SecInt64)va_arg(argList, SecInt64);
 2571              		.loc 2 1013 35
 2572 0b7c 488B85B8 		movq	-2376(%rbp), %rax
 2572      F6FFFF
 2573 0b83 8B00     		movl	(%rax), %eax
 2574 0b85 83F82F   		cmpl	$47, %eax
 2575 0b88 7730     		ja	.L199
 2576 0b8a 488B85B8 		movq	-2376(%rbp), %rax
 2576      F6FFFF
 2577 0b91 488B5010 		movq	16(%rax), %rdx
 2578 0b95 488B85B8 		movq	-2376(%rbp), %rax
 2578      F6FFFF
 2579 0b9c 8B00     		movl	(%rax), %eax
 2580 0b9e 89C0     		movl	%eax, %eax
 2581 0ba0 4801D0   		addq	%rdx, %rax
 2582 0ba3 488B95B8 		movq	-2376(%rbp), %rdx
 2582      F6FFFF
 2583 0baa 8B12     		movl	(%rdx), %edx
 2584 0bac 8D4A08   		leal	8(%rdx), %ecx
 2585 0baf 488B95B8 		movq	-2376(%rbp), %rdx
 2585      F6FFFF
 2586 0bb6 890A     		movl	%ecx, (%rdx)
 2587 0bb8 EB1A     		jmp	.L200
 2588              	.L199:
 2589 0bba 488B85B8 		movq	-2376(%rbp), %rax
 2589      F6FFFF
 2590 0bc1 488B4008 		movq	8(%rax), %rax
 2591 0bc5 488D4808 		leaq	8(%rax), %rcx
 2592 0bc9 488B95B8 		movq	-2376(%rbp), %rdx
 2592      F6FFFF
 2593 0bd0 48894A08 		movq	%rcx, 8(%rdx)
 2594              	.L200:
 2595 0bd4 488B00   		movq	(%rax), %rax
 2596 0bd7 48898570 		movq	%rax, -2192(%rbp)
 2596      F7FFFF
 2597 0bde E9C90600 		jmp	.L197
 2597      00
 2598              	.L198:
1014:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else
1015:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
1016:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_LONG) {
 2599              		.loc 2 1016 43
 2600 0be3 8B85B0F7 		movl	-2128(%rbp), %eax
 2600      FFFF
 2601              		.loc 2 1016 50
 2602 0be9 83E010   		andl	$16, %eax
 2603              		.loc 2 1016 32
 2604 0bec 85C0     		testl	%eax, %eax
 2605 0bee 7467     		je	.L201
GAS LISTING /tmp/ccgOk6Ic.s 			page 83


1017:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (long)va_arg(argList, long);
 2606              		.loc 2 1017 35
 2607 0bf0 488B85B8 		movq	-2376(%rbp), %rax
 2607      F6FFFF
 2608 0bf7 8B00     		movl	(%rax), %eax
 2609 0bf9 83F82F   		cmpl	$47, %eax
 2610 0bfc 7730     		ja	.L202
 2611 0bfe 488B85B8 		movq	-2376(%rbp), %rax
 2611      F6FFFF
 2612 0c05 488B5010 		movq	16(%rax), %rdx
 2613 0c09 488B85B8 		movq	-2376(%rbp), %rax
 2613      F6FFFF
 2614 0c10 8B00     		movl	(%rax), %eax
 2615 0c12 89C0     		movl	%eax, %eax
 2616 0c14 4801D0   		addq	%rdx, %rax
 2617 0c17 488B95B8 		movq	-2376(%rbp), %rdx
 2617      F6FFFF
 2618 0c1e 8B12     		movl	(%rdx), %edx
 2619 0c20 8D4A08   		leal	8(%rdx), %ecx
 2620 0c23 488B95B8 		movq	-2376(%rbp), %rdx
 2620      F6FFFF
 2621 0c2a 890A     		movl	%ecx, (%rdx)
 2622 0c2c EB1A     		jmp	.L203
 2623              	.L202:
 2624 0c2e 488B85B8 		movq	-2376(%rbp), %rax
 2624      F6FFFF
 2625 0c35 488B4008 		movq	8(%rax), %rax
 2626 0c39 488D4808 		leaq	8(%rax), %rcx
 2627 0c3d 488B95B8 		movq	-2376(%rbp), %rdx
 2627      F6FFFF
 2628 0c44 48894A08 		movq	%rcx, 8(%rdx)
 2629              	.L203:
 2630 0c48 488B00   		movq	(%rax), %rax
 2631 0c4b 48898570 		movq	%rax, -2192(%rbp)
 2631      F7FFFF
 2632 0c52 E9550600 		jmp	.L197
 2632      00
 2633              	.L201:
1018:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else
1019:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif /* SECUREC_ON_64BITS */
1020:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.flags & SECUREC_FLAG_CHAR) {
 2634              		.loc 2 1020 43
 2635 0c57 8B85B0F7 		movl	-2128(%rbp), %eax
 2635      FFFF
 2636              		.loc 2 1020 50
 2637 0c5d 25002000 		andl	$8192, %eax
 2637      00
 2638              		.loc 2 1020 32
 2639 0c62 85C0     		testl	%eax, %eax
 2640 0c64 0F843101 		je	.L204
 2640      0000
1021:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2641              		.loc 2 1021 47
 2642 0c6a 8B85B0F7 		movl	-2128(%rbp), %eax
 2642      FFFF
 2643              		.loc 2 1021 54
 2644 0c70 83E040   		andl	$64, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 84


 2645              		.loc 2 1021 36
 2646 0c73 85C0     		testl	%eax, %eax
 2647 0c75 0F84B700 		je	.L205
 2647      0000
1022:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (char)va_arg(argList, int); /* sign extend */
 2648              		.loc 2 1022 47
 2649 0c7b 488B85B8 		movq	-2376(%rbp), %rax
 2649      F6FFFF
 2650 0c82 8B00     		movl	(%rax), %eax
 2651 0c84 83F82F   		cmpl	$47, %eax
 2652 0c87 7730     		ja	.L206
 2653 0c89 488B85B8 		movq	-2376(%rbp), %rax
 2653      F6FFFF
 2654 0c90 488B5010 		movq	16(%rax), %rdx
 2655 0c94 488B85B8 		movq	-2376(%rbp), %rax
 2655      F6FFFF
 2656 0c9b 8B00     		movl	(%rax), %eax
 2657 0c9d 89C0     		movl	%eax, %eax
 2658 0c9f 4801D0   		addq	%rdx, %rax
 2659 0ca2 488B95B8 		movq	-2376(%rbp), %rdx
 2659      F6FFFF
 2660 0ca9 8B12     		movl	(%rdx), %edx
 2661 0cab 8D4A08   		leal	8(%rdx), %ecx
 2662 0cae 488B95B8 		movq	-2376(%rbp), %rdx
 2662      F6FFFF
 2663 0cb5 890A     		movl	%ecx, (%rdx)
 2664 0cb7 EB1A     		jmp	.L207
 2665              	.L206:
 2666 0cb9 488B85B8 		movq	-2376(%rbp), %rax
 2666      F6FFFF
 2667 0cc0 488B4008 		movq	8(%rax), %rax
 2668 0cc4 488D4808 		leaq	8(%rax), %rcx
 2669 0cc8 488B95B8 		movq	-2376(%rbp), %rdx
 2669      F6FFFF
 2670 0ccf 48894A08 		movq	%rcx, 8(%rdx)
 2671              	.L207:
 2672 0cd3 8B00     		movl	(%rax), %eax
 2673              		.loc 2 1022 39
 2674 0cd5 480FBEC0 		movsbq	%al, %rax
 2675 0cd9 48898570 		movq	%rax, -2192(%rbp)
 2675      F7FFFF
1023:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     if (l >= 128) { /* 128 on some platform, char is always unsigne
 2676              		.loc 2 1023 40
 2677 0ce0 4883BD70 		cmpq	$127, -2192(%rbp)
 2677      F7FFFF7F 
 2678 0ce8 0F8EBE05 		jle	.L197
 2678      0000
 2679              	.LBB12:
1024:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SecUnsignedInt64 tmpL = (SecUnsignedInt64)l;
 2680              		.loc 2 1024 58
 2681 0cee 488B8570 		movq	-2192(%rbp), %rax
 2681      F7FFFF
 2682 0cf5 48898588 		movq	%rax, -2168(%rbp)
 2682      F7FFFF
1025:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         unsigned char tmpCh = (unsigned char)(~(tmpL));
 2683              		.loc 2 1025 63
 2684 0cfc 488B8588 		movq	-2168(%rbp), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 85


 2684      F7FFFF
 2685              		.loc 2 1025 55
 2686 0d03 F7D0     		notl	%eax
 2687 0d05 8885D7F6 		movb	%al, -2345(%rbp)
 2687      FFFF
1026:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = tmpCh + 1;
 2688              		.loc 2 1026 51
 2689 0d0b 0FB685D7 		movzbl	-2345(%rbp), %eax
 2689      F6FFFF
 2690 0d12 83C001   		addl	$1, %eax
 2691              		.loc 2 1026 43
 2692 0d15 4898     		cltq
 2693 0d17 48898570 		movq	%rax, -2192(%rbp)
 2693      F7FFFF
1027:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         formatAttr.flags |= SECUREC_FLAG_NEGATIVE;
 2694              		.loc 2 1027 58
 2695 0d1e 8B85B0F7 		movl	-2128(%rbp), %eax
 2695      FFFF
 2696 0d24 80CC01   		orb	$1, %ah
 2697 0d27 8985B0F7 		movl	%eax, -2128(%rbp)
 2697      FFFF
 2698 0d2d E97A0500 		jmp	.L197
 2698      00
 2699              	.L205:
 2700              	.LBE12:
1028:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
1029:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1030:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (unsigned char)va_arg(argList, int);    /* zero-extend */
 2701              		.loc 2 1030 56
 2702 0d32 488B85B8 		movq	-2376(%rbp), %rax
 2702      F6FFFF
 2703 0d39 8B00     		movl	(%rax), %eax
 2704 0d3b 83F82F   		cmpl	$47, %eax
 2705 0d3e 7730     		ja	.L208
 2706 0d40 488B85B8 		movq	-2376(%rbp), %rax
 2706      F6FFFF
 2707 0d47 488B5010 		movq	16(%rax), %rdx
 2708 0d4b 488B85B8 		movq	-2376(%rbp), %rax
 2708      F6FFFF
 2709 0d52 8B00     		movl	(%rax), %eax
 2710 0d54 89C0     		movl	%eax, %eax
 2711 0d56 4801D0   		addq	%rdx, %rax
 2712 0d59 488B95B8 		movq	-2376(%rbp), %rdx
 2712      F6FFFF
 2713 0d60 8B12     		movl	(%rdx), %edx
 2714 0d62 8D4A08   		leal	8(%rdx), %ecx
 2715 0d65 488B95B8 		movq	-2376(%rbp), %rdx
 2715      F6FFFF
 2716 0d6c 890A     		movl	%ecx, (%rdx)
 2717 0d6e EB1A     		jmp	.L209
 2718              	.L208:
 2719 0d70 488B85B8 		movq	-2376(%rbp), %rax
 2719      F6FFFF
 2720 0d77 488B4008 		movq	8(%rax), %rax
 2721 0d7b 488D4808 		leaq	8(%rax), %rcx
 2722 0d7f 488B95B8 		movq	-2376(%rbp), %rdx
 2722      F6FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 86


 2723 0d86 48894A08 		movq	%rcx, 8(%rdx)
 2724              	.L209:
 2725 0d8a 8B00     		movl	(%rax), %eax
 2726              		.loc 2 1030 39
 2727 0d8c 0FB6C0   		movzbl	%al, %eax
 2728 0d8f 48898570 		movq	%rax, -2192(%rbp)
 2728      F7FFFF
 2729 0d96 E9110500 		jmp	.L197
 2729      00
 2730              	.L204:
1031:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1032:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1033:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_SHORT) {
 2731              		.loc 2 1033 50
 2732 0d9b 8B85B0F7 		movl	-2128(%rbp), %eax
 2732      FFFF
 2733              		.loc 2 1033 57
 2734 0da1 83E020   		andl	$32, %eax
 2735              		.loc 2 1033 39
 2736 0da4 85C0     		testl	%eax, %eax
 2737 0da6 0F84E000 		je	.L210
 2737      0000
1034:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2738              		.loc 2 1034 47
 2739 0dac 8B85B0F7 		movl	-2128(%rbp), %eax
 2739      FFFF
 2740              		.loc 2 1034 54
 2741 0db2 83E040   		andl	$64, %eax
 2742              		.loc 2 1034 36
 2743 0db5 85C0     		testl	%eax, %eax
 2744 0db7 746A     		je	.L211
1035:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (short)va_arg(argList, int);    /* sign extend */
 2745              		.loc 2 1035 48
 2746 0db9 488B85B8 		movq	-2376(%rbp), %rax
 2746      F6FFFF
 2747 0dc0 8B00     		movl	(%rax), %eax
 2748 0dc2 83F82F   		cmpl	$47, %eax
 2749 0dc5 7730     		ja	.L212
 2750 0dc7 488B85B8 		movq	-2376(%rbp), %rax
 2750      F6FFFF
 2751 0dce 488B5010 		movq	16(%rax), %rdx
 2752 0dd2 488B85B8 		movq	-2376(%rbp), %rax
 2752      F6FFFF
 2753 0dd9 8B00     		movl	(%rax), %eax
 2754 0ddb 89C0     		movl	%eax, %eax
 2755 0ddd 4801D0   		addq	%rdx, %rax
 2756 0de0 488B95B8 		movq	-2376(%rbp), %rdx
 2756      F6FFFF
 2757 0de7 8B12     		movl	(%rdx), %edx
 2758 0de9 8D4A08   		leal	8(%rdx), %ecx
 2759 0dec 488B95B8 		movq	-2376(%rbp), %rdx
 2759      F6FFFF
 2760 0df3 890A     		movl	%ecx, (%rdx)
 2761 0df5 EB1A     		jmp	.L213
 2762              	.L212:
 2763 0df7 488B85B8 		movq	-2376(%rbp), %rax
 2763      F6FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 87


 2764 0dfe 488B4008 		movq	8(%rax), %rax
 2765 0e02 488D4808 		leaq	8(%rax), %rcx
 2766 0e06 488B95B8 		movq	-2376(%rbp), %rdx
 2766      F6FFFF
 2767 0e0d 48894A08 		movq	%rcx, 8(%rdx)
 2768              	.L213:
 2769 0e11 8B00     		movl	(%rax), %eax
 2770              		.loc 2 1035 39
 2771 0e13 480FBFC0 		movswq	%ax, %rax
 2772 0e17 48898570 		movq	%rax, -2192(%rbp)
 2772      F7FFFF
 2773 0e1e E9890400 		jmp	.L197
 2773      00
 2774              	.L211:
1036:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1037:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (unsigned short)va_arg(argList, int);   /* zero-extend */
 2775              		.loc 2 1037 57
 2776 0e23 488B85B8 		movq	-2376(%rbp), %rax
 2776      F6FFFF
 2777 0e2a 8B00     		movl	(%rax), %eax
 2778 0e2c 83F82F   		cmpl	$47, %eax
 2779 0e2f 7730     		ja	.L214
 2780 0e31 488B85B8 		movq	-2376(%rbp), %rax
 2780      F6FFFF
 2781 0e38 488B5010 		movq	16(%rax), %rdx
 2782 0e3c 488B85B8 		movq	-2376(%rbp), %rax
 2782      F6FFFF
 2783 0e43 8B00     		movl	(%rax), %eax
 2784 0e45 89C0     		movl	%eax, %eax
 2785 0e47 4801D0   		addq	%rdx, %rax
 2786 0e4a 488B95B8 		movq	-2376(%rbp), %rdx
 2786      F6FFFF
 2787 0e51 8B12     		movl	(%rdx), %edx
 2788 0e53 8D4A08   		leal	8(%rdx), %ecx
 2789 0e56 488B95B8 		movq	-2376(%rbp), %rdx
 2789      F6FFFF
 2790 0e5d 890A     		movl	%ecx, (%rdx)
 2791 0e5f EB1A     		jmp	.L215
 2792              	.L214:
 2793 0e61 488B85B8 		movq	-2376(%rbp), %rax
 2793      F6FFFF
 2794 0e68 488B4008 		movq	8(%rax), %rax
 2795 0e6c 488D4808 		leaq	8(%rax), %rcx
 2796 0e70 488B95B8 		movq	-2376(%rbp), %rdx
 2796      F6FFFF
 2797 0e77 48894A08 		movq	%rcx, 8(%rdx)
 2798              	.L215:
 2799 0e7b 8B00     		movl	(%rax), %eax
 2800              		.loc 2 1037 39
 2801 0e7d 0FB7C0   		movzwl	%ax, %eax
 2802 0e80 48898570 		movq	%rax, -2192(%rbp)
 2802      F7FFFF
 2803 0e87 E9200400 		jmp	.L197
 2803      00
 2804              	.L210:
1038:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1039:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
GAS LISTING /tmp/ccgOk6Ic.s 			page 88


1040:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1041:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
1042:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             else if (formatAttr.flags & SECUREC_FLAG_PTRDIFF) {
 2805              		.loc 2 1042 48
 2806 0e8c 8B85B0F7 		movl	-2128(%rbp), %eax
 2806      FFFF
 2807              		.loc 2 1042 55
 2808 0e92 25000001 		andl	$65536, %eax
 2808      00
 2809              		.loc 2 1042 37
 2810 0e97 85C0     		testl	%eax, %eax
 2811 0e99 7467     		je	.L216
1043:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 l = (ptrdiff_t)va_arg(argList, ptrdiff_t);  /* sign extend */
 2812              		.loc 2 1043 35
 2813 0e9b 488B85B8 		movq	-2376(%rbp), %rax
 2813      F6FFFF
 2814 0ea2 8B00     		movl	(%rax), %eax
 2815 0ea4 83F82F   		cmpl	$47, %eax
 2816 0ea7 7730     		ja	.L217
 2817 0ea9 488B85B8 		movq	-2376(%rbp), %rax
 2817      F6FFFF
 2818 0eb0 488B5010 		movq	16(%rax), %rdx
 2819 0eb4 488B85B8 		movq	-2376(%rbp), %rax
 2819      F6FFFF
 2820 0ebb 8B00     		movl	(%rax), %eax
 2821 0ebd 89C0     		movl	%eax, %eax
 2822 0ebf 4801D0   		addq	%rdx, %rax
 2823 0ec2 488B95B8 		movq	-2376(%rbp), %rdx
 2823      F6FFFF
 2824 0ec9 8B12     		movl	(%rdx), %edx
 2825 0ecb 8D4A08   		leal	8(%rdx), %ecx
 2826 0ece 488B95B8 		movq	-2376(%rbp), %rdx
 2826      F6FFFF
 2827 0ed5 890A     		movl	%ecx, (%rdx)
 2828 0ed7 EB1A     		jmp	.L218
 2829              	.L217:
 2830 0ed9 488B85B8 		movq	-2376(%rbp), %rax
 2830      F6FFFF
 2831 0ee0 488B4008 		movq	8(%rax), %rax
 2832 0ee4 488D4808 		leaq	8(%rax), %rcx
 2833 0ee8 488B95B8 		movq	-2376(%rbp), %rdx
 2833      F6FFFF
 2834 0eef 48894A08 		movq	%rcx, 8(%rdx)
 2835              	.L218:
 2836 0ef3 488B00   		movq	(%rax), %rax
 2837 0ef6 48898570 		movq	%rax, -2192(%rbp)
 2837      F7FFFF
 2838 0efd E9AA0300 		jmp	.L197
 2838      00
 2839              	.L216:
1044:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_SIZE) {
 2840              		.loc 2 1044 50
 2841 0f02 8B85B0F7 		movl	-2128(%rbp), %eax
 2841      FFFF
 2842              		.loc 2 1044 57
 2843 0f08 25000002 		andl	$131072, %eax
 2843      00
GAS LISTING /tmp/ccgOk6Ic.s 			page 89


 2844              		.loc 2 1044 39
 2845 0f0d 85C0     		testl	%eax, %eax
 2846 0f0f 0F84D401 		je	.L219
 2846      0000
1045:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2847              		.loc 2 1045 47
 2848 0f15 8B85B0F7 		movl	-2128(%rbp), %eax
 2848      FFFF
 2849              		.loc 2 1045 54
 2850 0f1b 83E040   		andl	$64, %eax
 2851              		.loc 2 1045 36
 2852 0f1e 85C0     		testl	%eax, %eax
 2853 0f20 0F845C01 		je	.L220
 2853      0000
1046:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* No suitable macros were found to handle the branch */
1047:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     if (SecIsSameSize(sizeof(size_t), sizeof(long))) {
 2854              		.loc 2 1047 41
 2855 0f26 BE080000 		movl	$8, %esi
 2855      00
 2856 0f2b BF080000 		movl	$8, %edi
 2856      00
 2857 0f30 E8000000 		call	SecIsSameSize
 2857      00
 2858              		.loc 2 1047 40
 2859 0f35 85C0     		testl	%eax, %eax
 2860 0f37 7467     		je	.L221
1048:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = va_arg(argList, long);  /* sign extend */
 2861              		.loc 2 1048 43
 2862 0f39 488B85B8 		movq	-2376(%rbp), %rax
 2862      F6FFFF
 2863 0f40 8B00     		movl	(%rax), %eax
 2864 0f42 83F82F   		cmpl	$47, %eax
 2865 0f45 7730     		ja	.L222
 2866 0f47 488B85B8 		movq	-2376(%rbp), %rax
 2866      F6FFFF
 2867 0f4e 488B5010 		movq	16(%rax), %rdx
 2868 0f52 488B85B8 		movq	-2376(%rbp), %rax
 2868      F6FFFF
 2869 0f59 8B00     		movl	(%rax), %eax
 2870 0f5b 89C0     		movl	%eax, %eax
 2871 0f5d 4801D0   		addq	%rdx, %rax
 2872 0f60 488B95B8 		movq	-2376(%rbp), %rdx
 2872      F6FFFF
 2873 0f67 8B12     		movl	(%rdx), %edx
 2874 0f69 8D4A08   		leal	8(%rdx), %ecx
 2875 0f6c 488B95B8 		movq	-2376(%rbp), %rdx
 2875      F6FFFF
 2876 0f73 890A     		movl	%ecx, (%rdx)
 2877 0f75 EB1A     		jmp	.L223
 2878              	.L222:
 2879 0f77 488B85B8 		movq	-2376(%rbp), %rax
 2879      F6FFFF
 2880 0f7e 488B4008 		movq	8(%rax), %rax
 2881 0f82 488D4808 		leaq	8(%rax), %rcx
 2882 0f86 488B95B8 		movq	-2376(%rbp), %rdx
 2882      F6FFFF
 2883 0f8d 48894A08 		movq	%rcx, 8(%rdx)
GAS LISTING /tmp/ccgOk6Ic.s 			page 90


 2884              	.L223:
 2885 0f91 488B00   		movq	(%rax), %rax
 2886 0f94 48898570 		movq	%rax, -2192(%rbp)
 2886      F7FFFF
 2887 0f9b E90C0300 		jmp	.L197
 2887      00
 2888              	.L221:
1049:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } else if (SecIsSameSize(sizeof(size_t), sizeof(long long))) {
 2889              		.loc 2 1049 48
 2890 0fa0 BE080000 		movl	$8, %esi
 2890      00
 2891 0fa5 BF080000 		movl	$8, %edi
 2891      00
 2892 0faa E8000000 		call	SecIsSameSize
 2892      00
 2893              		.loc 2 1049 47
 2894 0faf 85C0     		testl	%eax, %eax
 2895 0fb1 7467     		je	.L224
1050:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = va_arg(argList, long long); /* sign extend */
 2896              		.loc 2 1050 43
 2897 0fb3 488B85B8 		movq	-2376(%rbp), %rax
 2897      F6FFFF
 2898 0fba 8B00     		movl	(%rax), %eax
 2899 0fbc 83F82F   		cmpl	$47, %eax
 2900 0fbf 7730     		ja	.L225
 2901 0fc1 488B85B8 		movq	-2376(%rbp), %rax
 2901      F6FFFF
 2902 0fc8 488B5010 		movq	16(%rax), %rdx
 2903 0fcc 488B85B8 		movq	-2376(%rbp), %rax
 2903      F6FFFF
 2904 0fd3 8B00     		movl	(%rax), %eax
 2905 0fd5 89C0     		movl	%eax, %eax
 2906 0fd7 4801D0   		addq	%rdx, %rax
 2907 0fda 488B95B8 		movq	-2376(%rbp), %rdx
 2907      F6FFFF
 2908 0fe1 8B12     		movl	(%rdx), %edx
 2909 0fe3 8D4A08   		leal	8(%rdx), %ecx
 2910 0fe6 488B95B8 		movq	-2376(%rbp), %rdx
 2910      F6FFFF
 2911 0fed 890A     		movl	%ecx, (%rdx)
 2912 0fef EB1A     		jmp	.L226
 2913              	.L225:
 2914 0ff1 488B85B8 		movq	-2376(%rbp), %rax
 2914      F6FFFF
 2915 0ff8 488B4008 		movq	8(%rax), %rax
 2916 0ffc 488D4808 		leaq	8(%rax), %rcx
 2917 1000 488B95B8 		movq	-2376(%rbp), %rdx
 2917      F6FFFF
 2918 1007 48894A08 		movq	%rcx, 8(%rdx)
 2919              	.L226:
 2920 100b 488B00   		movq	(%rax), %rax
 2921 100e 48898570 		movq	%rax, -2192(%rbp)
 2921      F7FFFF
 2922 1015 E9920200 		jmp	.L197
 2922      00
 2923              	.L224:
1051:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } else {
GAS LISTING /tmp/ccgOk6Ic.s 			page 91


1052:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         l = va_arg(argList, int);   /* sign extend */
 2924              		.loc 2 1052 45
 2925 101a 488B85B8 		movq	-2376(%rbp), %rax
 2925      F6FFFF
 2926 1021 8B00     		movl	(%rax), %eax
 2927 1023 83F82F   		cmpl	$47, %eax
 2928 1026 7730     		ja	.L227
 2929 1028 488B85B8 		movq	-2376(%rbp), %rax
 2929      F6FFFF
 2930 102f 488B5010 		movq	16(%rax), %rdx
 2931 1033 488B85B8 		movq	-2376(%rbp), %rax
 2931      F6FFFF
 2932 103a 8B00     		movl	(%rax), %eax
 2933 103c 89C0     		movl	%eax, %eax
 2934 103e 4801D0   		addq	%rdx, %rax
 2935 1041 488B95B8 		movq	-2376(%rbp), %rdx
 2935      F6FFFF
 2936 1048 8B12     		movl	(%rdx), %edx
 2937 104a 8D4A08   		leal	8(%rdx), %ecx
 2938 104d 488B95B8 		movq	-2376(%rbp), %rdx
 2938      F6FFFF
 2939 1054 890A     		movl	%ecx, (%rdx)
 2940 1056 EB1A     		jmp	.L228
 2941              	.L227:
 2942 1058 488B85B8 		movq	-2376(%rbp), %rax
 2942      F6FFFF
 2943 105f 488B4008 		movq	8(%rax), %rax
 2944 1063 488D4808 		leaq	8(%rax), %rcx
 2945 1067 488B95B8 		movq	-2376(%rbp), %rdx
 2945      F6FFFF
 2946 106e 48894A08 		movq	%rcx, 8(%rdx)
 2947              	.L228:
 2948 1072 8B00     		movl	(%rax), %eax
 2949              		.loc 2 1052 43
 2950 1074 4898     		cltq
 2951 1076 48898570 		movq	%rax, -2192(%rbp)
 2951      F7FFFF
 2952 107d E92A0200 		jmp	.L197
 2952      00
 2953              	.L220:
1053:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
1054:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1055:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (SecInt64)(size_t)va_arg(argList, size_t);  /* sign extend 
 2954              		.loc 2 1055 59
 2955 1082 488B85B8 		movq	-2376(%rbp), %rax
 2955      F6FFFF
 2956 1089 8B00     		movl	(%rax), %eax
 2957 108b 83F82F   		cmpl	$47, %eax
 2958 108e 7730     		ja	.L229
 2959 1090 488B85B8 		movq	-2376(%rbp), %rax
 2959      F6FFFF
 2960 1097 488B5010 		movq	16(%rax), %rdx
 2961 109b 488B85B8 		movq	-2376(%rbp), %rax
 2961      F6FFFF
 2962 10a2 8B00     		movl	(%rax), %eax
 2963 10a4 89C0     		movl	%eax, %eax
 2964 10a6 4801D0   		addq	%rdx, %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 92


 2965 10a9 488B95B8 		movq	-2376(%rbp), %rdx
 2965      F6FFFF
 2966 10b0 8B12     		movl	(%rdx), %edx
 2967 10b2 8D4A08   		leal	8(%rdx), %ecx
 2968 10b5 488B95B8 		movq	-2376(%rbp), %rdx
 2968      F6FFFF
 2969 10bc 890A     		movl	%ecx, (%rdx)
 2970 10be EB1A     		jmp	.L230
 2971              	.L229:
 2972 10c0 488B85B8 		movq	-2376(%rbp), %rax
 2972      F6FFFF
 2973 10c7 488B4008 		movq	8(%rax), %rax
 2974 10cb 488D4808 		leaq	8(%rax), %rcx
 2975 10cf 488B95B8 		movq	-2376(%rbp), %rdx
 2975      F6FFFF
 2976 10d6 48894A08 		movq	%rcx, 8(%rdx)
 2977              	.L230:
 2978 10da 488B00   		movq	(%rax), %rax
 2979              		.loc 2 1055 39
 2980 10dd 48898570 		movq	%rax, -2192(%rbp)
 2980      F7FFFF
 2981 10e4 E9C30100 		jmp	.L197
 2981      00
 2982              	.L219:
1056:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1057:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else if (formatAttr.flags & SECUREC_FLAG_INTMAX) {
 2983              		.loc 2 1057 50
 2984 10e9 8B85B0F7 		movl	-2128(%rbp), %eax
 2984      FFFF
 2985              		.loc 2 1057 57
 2986 10ef 25000004 		andl	$262144, %eax
 2986      00
 2987              		.loc 2 1057 39
 2988 10f4 85C0     		testl	%eax, %eax
 2989 10f6 0F84DB00 		je	.L231
 2989      0000
1058:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 2990              		.loc 2 1058 47
 2991 10fc 8B85B0F7 		movl	-2128(%rbp), %eax
 2991      FFFF
 2992              		.loc 2 1058 54
 2993 1102 83E040   		andl	$64, %eax
 2994              		.loc 2 1058 36
 2995 1105 85C0     		testl	%eax, %eax
 2996 1107 7467     		je	.L232
1059:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = va_arg(argList, SecInt64);  /* sign extend */
 2997              		.loc 2 1059 39
 2998 1109 488B85B8 		movq	-2376(%rbp), %rax
 2998      F6FFFF
 2999 1110 8B00     		movl	(%rax), %eax
 3000 1112 83F82F   		cmpl	$47, %eax
 3001 1115 7730     		ja	.L233
 3002 1117 488B85B8 		movq	-2376(%rbp), %rax
 3002      F6FFFF
 3003 111e 488B5010 		movq	16(%rax), %rdx
 3004 1122 488B85B8 		movq	-2376(%rbp), %rax
 3004      F6FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 93


 3005 1129 8B00     		movl	(%rax), %eax
 3006 112b 89C0     		movl	%eax, %eax
 3007 112d 4801D0   		addq	%rdx, %rax
 3008 1130 488B95B8 		movq	-2376(%rbp), %rdx
 3008      F6FFFF
 3009 1137 8B12     		movl	(%rdx), %edx
 3010 1139 8D4A08   		leal	8(%rdx), %ecx
 3011 113c 488B95B8 		movq	-2376(%rbp), %rdx
 3011      F6FFFF
 3012 1143 890A     		movl	%ecx, (%rdx)
 3013 1145 EB1A     		jmp	.L234
 3014              	.L233:
 3015 1147 488B85B8 		movq	-2376(%rbp), %rax
 3015      F6FFFF
 3016 114e 488B4008 		movq	8(%rax), %rax
 3017 1152 488D4808 		leaq	8(%rax), %rcx
 3018 1156 488B95B8 		movq	-2376(%rbp), %rdx
 3018      F6FFFF
 3019 115d 48894A08 		movq	%rcx, 8(%rdx)
 3020              	.L234:
 3021 1161 488B00   		movq	(%rax), %rax
 3022 1164 48898570 		movq	%rax, -2192(%rbp)
 3022      F7FFFF
 3023 116b E93C0100 		jmp	.L197
 3023      00
 3024              	.L232:
1060:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1061:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* sign extend */
1062:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (SecInt64)(SecUnsignedInt64)va_arg(argList, SecUnsignedInt6
 3025              		.loc 2 1062 69
 3026 1170 488B85B8 		movq	-2376(%rbp), %rax
 3026      F6FFFF
 3027 1177 8B00     		movl	(%rax), %eax
 3028 1179 83F82F   		cmpl	$47, %eax
 3029 117c 7730     		ja	.L235
 3030 117e 488B85B8 		movq	-2376(%rbp), %rax
 3030      F6FFFF
 3031 1185 488B5010 		movq	16(%rax), %rdx
 3032 1189 488B85B8 		movq	-2376(%rbp), %rax
 3032      F6FFFF
 3033 1190 8B00     		movl	(%rax), %eax
 3034 1192 89C0     		movl	%eax, %eax
 3035 1194 4801D0   		addq	%rdx, %rax
 3036 1197 488B95B8 		movq	-2376(%rbp), %rdx
 3036      F6FFFF
 3037 119e 8B12     		movl	(%rdx), %edx
 3038 11a0 8D4A08   		leal	8(%rdx), %ecx
 3039 11a3 488B95B8 		movq	-2376(%rbp), %rdx
 3039      F6FFFF
 3040 11aa 890A     		movl	%ecx, (%rdx)
 3041 11ac EB1A     		jmp	.L236
 3042              	.L235:
 3043 11ae 488B85B8 		movq	-2376(%rbp), %rax
 3043      F6FFFF
 3044 11b5 488B4008 		movq	8(%rax), %rax
 3045 11b9 488D4808 		leaq	8(%rax), %rcx
 3046 11bd 488B95B8 		movq	-2376(%rbp), %rdx
GAS LISTING /tmp/ccgOk6Ic.s 			page 94


 3046      F6FFFF
 3047 11c4 48894A08 		movq	%rcx, 8(%rdx)
 3048              	.L236:
 3049 11c8 488B00   		movq	(%rax), %rax
 3050              		.loc 2 1062 39
 3051 11cb 48898570 		movq	%rax, -2192(%rbp)
 3051      F7FFFF
 3052 11d2 E9D50000 		jmp	.L197
 3052      00
 3053              	.L231:
1063:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1064:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1065:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1066:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             else {
1067:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 3054              		.loc 2 1067 47
 3055 11d7 8B85B0F7 		movl	-2128(%rbp), %eax
 3055      FFFF
 3056              		.loc 2 1067 54
 3057 11dd 83E040   		andl	$64, %eax
 3058              		.loc 2 1067 36
 3059 11e0 85C0     		testl	%eax, %eax
 3060 11e2 7465     		je	.L237
1068:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = va_arg(argList, int);   /* sign extend */
 3061              		.loc 2 1068 41
 3062 11e4 488B85B8 		movq	-2376(%rbp), %rax
 3062      F6FFFF
 3063 11eb 8B00     		movl	(%rax), %eax
 3064 11ed 83F82F   		cmpl	$47, %eax
 3065 11f0 7730     		ja	.L238
 3066 11f2 488B85B8 		movq	-2376(%rbp), %rax
 3066      F6FFFF
 3067 11f9 488B5010 		movq	16(%rax), %rdx
 3068 11fd 488B85B8 		movq	-2376(%rbp), %rax
 3068      F6FFFF
 3069 1204 8B00     		movl	(%rax), %eax
 3070 1206 89C0     		movl	%eax, %eax
 3071 1208 4801D0   		addq	%rdx, %rax
 3072 120b 488B95B8 		movq	-2376(%rbp), %rdx
 3072      F6FFFF
 3073 1212 8B12     		movl	(%rdx), %edx
 3074 1214 8D4A08   		leal	8(%rdx), %ecx
 3075 1217 488B95B8 		movq	-2376(%rbp), %rdx
 3075      F6FFFF
 3076 121e 890A     		movl	%ecx, (%rdx)
 3077 1220 EB1A     		jmp	.L239
 3078              	.L238:
 3079 1222 488B85B8 		movq	-2376(%rbp), %rax
 3079      F6FFFF
 3080 1229 488B4008 		movq	8(%rax), %rax
 3081 122d 488D4808 		leaq	8(%rax), %rcx
 3082 1231 488B95B8 		movq	-2376(%rbp), %rdx
 3082      F6FFFF
 3083 1238 48894A08 		movq	%rcx, 8(%rdx)
 3084              	.L239:
 3085 123c 8B00     		movl	(%rax), %eax
 3086              		.loc 2 1068 39
GAS LISTING /tmp/ccgOk6Ic.s 			page 95


 3087 123e 4898     		cltq
 3088 1240 48898570 		movq	%rax, -2192(%rbp)
 3088      F7FFFF
 3089 1247 EB63     		jmp	.L197
 3090              	.L237:
1069:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1070:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     l = (unsigned int)va_arg(argList, int); /* zero-extend */
 3091              		.loc 2 1070 55
 3092 1249 488B85B8 		movq	-2376(%rbp), %rax
 3092      F6FFFF
 3093 1250 8B00     		movl	(%rax), %eax
 3094 1252 83F82F   		cmpl	$47, %eax
 3095 1255 7730     		ja	.L240
 3096 1257 488B85B8 		movq	-2376(%rbp), %rax
 3096      F6FFFF
 3097 125e 488B5010 		movq	16(%rax), %rdx
 3098 1262 488B85B8 		movq	-2376(%rbp), %rax
 3098      F6FFFF
 3099 1269 8B00     		movl	(%rax), %eax
 3100 126b 89C0     		movl	%eax, %eax
 3101 126d 4801D0   		addq	%rdx, %rax
 3102 1270 488B95B8 		movq	-2376(%rbp), %rdx
 3102      F6FFFF
 3103 1277 8B12     		movl	(%rdx), %edx
 3104 1279 8D4A08   		leal	8(%rdx), %ecx
 3105 127c 488B95B8 		movq	-2376(%rbp), %rdx
 3105      F6FFFF
 3106 1283 890A     		movl	%ecx, (%rdx)
 3107 1285 EB1A     		jmp	.L241
 3108              	.L240:
 3109 1287 488B85B8 		movq	-2376(%rbp), %rax
 3109      F6FFFF
 3110 128e 488B4008 		movq	8(%rax), %rax
 3111 1292 488D4808 		leaq	8(%rax), %rcx
 3112 1296 488B95B8 		movq	-2376(%rbp), %rdx
 3112      F6FFFF
 3113 129d 48894A08 		movq	%rcx, 8(%rdx)
 3114              	.L241:
 3115 12a1 8B00     		movl	(%rax), %eax
 3116              		.loc 2 1070 39
 3117 12a3 89C0     		movl	%eax, %eax
 3118 12a5 48898570 		movq	%rax, -2192(%rbp)
 3118      F7FFFF
 3119              	.L197:
1071:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1072:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1073:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1074:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1075:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* check for negative; copy into number */
1076:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if ((formatAttr.flags & SECUREC_FLAG_SIGNED) && l < 0) {
 3120              		.loc 2 1076 44
 3121 12ac 8B85B0F7 		movl	-2128(%rbp), %eax
 3121      FFFF
 3122              		.loc 2 1076 51
 3123 12b2 83E040   		andl	$64, %eax
 3124              		.loc 2 1076 32
 3125 12b5 85C0     		testl	%eax, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 96


 3126 12b7 742C     		je	.L242
 3127              		.loc 2 1076 74 discriminator 1
 3128 12b9 4883BD70 		cmpq	$0, -2192(%rbp)
 3128      F7FFFF00 
 3129 12c1 7922     		jns	.L242
1077:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 number = (SecUnsignedInt64)(-l);
 3130              		.loc 2 1077 61
 3131 12c3 488B8570 		movq	-2192(%rbp), %rax
 3131      F7FFFF
 3132 12ca 48F7D8   		negq	%rax
 3133              		.loc 2 1077 40
 3134 12cd 48898568 		movq	%rax, -2200(%rbp)
 3134      F7FFFF
1078:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags |= SECUREC_FLAG_NEGATIVE;
 3135              		.loc 2 1078 50
 3136 12d4 8B85B0F7 		movl	-2128(%rbp), %eax
 3136      FFFF
 3137 12da 80CC01   		orb	$1, %ah
 3138 12dd 8985B0F7 		movl	%eax, -2128(%rbp)
 3138      FFFF
 3139 12e3 EB0E     		jmp	.L243
 3140              	.L242:
1079:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
1080:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 number = (SecUnsignedInt64)l;
 3141              		.loc 2 1080 40
 3142 12e5 488B8570 		movq	-2192(%rbp), %rax
 3142      F7FFFF
 3143 12ec 48898568 		movq	%rax, -2200(%rbp)
 3143      F7FFFF
 3144              	.L243:
1081:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1082:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1083:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (((formatAttr.flags & SECUREC_FLAG_I64) == 0) &&
 3145              		.loc 2 1083 45
 3146 12f3 8B85B0F7 		movl	-2128(%rbp), %eax
 3146      FFFF
 3147              		.loc 2 1083 52
 3148 12f9 25008000 		andl	$32768, %eax
 3148      00
 3149              		.loc 2 1083 32
 3150 12fe 85C0     		testl	%eax, %eax
 3151 1300 7555     		jne	.L244
1084:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
1085:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_INTMAX) == 0) &&
 3152              		.loc 2 1085 45 discriminator 1
 3153 1302 8B85B0F7 		movl	-2128(%rbp), %eax
 3153      FFFF
 3154              		.loc 2 1085 52 discriminator 1
 3155 1308 25000004 		andl	$262144, %eax
 3155      00
1083:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_COMPATIBLE_LINUX_FORMAT
 3156              		.loc 2 1083 78 discriminator 1
 3157 130d 85C0     		testl	%eax, %eax
 3158 130f 7546     		jne	.L244
1086:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1087:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
1088:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_PTRDIFF) == 0) &&
GAS LISTING /tmp/ccgOk6Ic.s 			page 97


 3159              		.loc 2 1088 45
 3160 1311 8B85B0F7 		movl	-2128(%rbp), %eax
 3160      FFFF
 3161              		.loc 2 1088 52
 3162 1317 25000001 		andl	$65536, %eax
 3162      00
1085:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 3163              		.loc 2 1085 81
 3164 131c 85C0     		testl	%eax, %eax
 3165 131e 7537     		jne	.L244
1089:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_SIZE) == 0) &&
 3166              		.loc 2 1089 45
 3167 1320 8B85B0F7 		movl	-2128(%rbp), %eax
 3167      FFFF
 3168              		.loc 2 1089 52
 3169 1326 25000002 		andl	$131072, %eax
 3169      00
1088:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_SIZE) == 0) &&
 3170              		.loc 2 1088 82
 3171 132b 85C0     		testl	%eax, %eax
 3172 132d 7528     		jne	.L244
1090:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if !defined(SECUREC_COMPATIBLE_WIN_FORMAT)  /* on window 64 system sizeof long is 32bit */
1091:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_LONG) == 0) &&
 3173              		.loc 2 1091 45
 3174 132f 8B85B0F7 		movl	-2128(%rbp), %eax
 3174      FFFF
 3175              		.loc 2 1091 52
 3176 1335 83E010   		andl	$16, %eax
1089:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if !defined(SECUREC_COMPATIBLE_WIN_FORMAT)  /* on window 64 system sizeof long is 32bit */
 3177              		.loc 2 1089 79
 3178 1338 85C0     		testl	%eax, %eax
 3179 133a 751B     		jne	.L244
1092:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1093:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1094:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ((formatAttr.flags & SECUREC_FLAG_LONGLONG) == 0)) {
 3180              		.loc 2 1094 45
 3181 133c 8B85B0F7 		movl	-2128(%rbp), %eax
 3181      FFFF
 3182              		.loc 2 1094 52
 3183 1342 25001000 		andl	$4096, %eax
 3183      00
1091:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
 3184              		.loc 2 1091 79
 3185 1347 85C0     		testl	%eax, %eax
 3186 1349 750C     		jne	.L244
1095:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1096:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     number &= 0xffffffff;  /* use 0xffffffff as 32 bit mask */
 3187              		.loc 2 1096 44
 3188 134b B8FFFFFF 		movl	$4294967295, %eax
 3188      FF
 3189 1350 48218568 		andq	%rax, -2200(%rbp)
 3189      F7FFFF
 3190              	.L244:
1097:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1098:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1099:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* check precision value for default */
1100:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.precision < 0) {
GAS LISTING /tmp/ccgOk6Ic.s 			page 98


 3191              		.loc 2 1100 43
 3192 1357 8B85B8F7 		movl	-2120(%rbp), %eax
 3192      FFFF
 3193              		.loc 2 1100 32
 3194 135d 85C0     		testl	%eax, %eax
 3195 135f 790C     		jns	.L245
1101:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.precision = 1;   /* default precision */
 3196              		.loc 2 1101 54
 3197 1361 C785B8F7 		movl	$1, -2120(%rbp)
 3197      FFFF0100 
 3197      0000
 3198 136b EB35     		jmp	.L246
 3199              	.L245:
1102:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             } else {
1103:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_WIN_FORMAT)
1104:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
1105:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1106:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (!(formatAttr.flags & SECUREC_FLAG_POINTER)) {
 3200              		.loc 2 1106 49
 3201 136d 8B85B0F7 		movl	-2128(%rbp), %eax
 3201      FFFF
 3202              		.loc 2 1106 56
 3203 1373 25004000 		andl	$16384, %eax
 3203      00
 3204              		.loc 2 1106 36
 3205 1378 85C0     		testl	%eax, %eax
 3206 137a 750F     		jne	.L247
1107:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
 3207              		.loc 2 1107 54
 3208 137c 8B85B0F7 		movl	-2128(%rbp), %eax
 3208      FFFF
 3209 1382 83E0F7   		andl	$-9, %eax
 3210 1385 8985B0F7 		movl	%eax, -2128(%rbp)
 3210      FFFF
 3211              	.L247:
1108:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1109:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1110:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (formatAttr.precision > SECUREC_MAX_PRECISION) {
 3212              		.loc 2 1110 47
 3213 138b 8B85B8F7 		movl	-2120(%rbp), %eax
 3213      FFFF
 3214              		.loc 2 1110 36
 3215 1391 3D000200 		cmpl	$512, %eax
 3215      00
 3216 1396 7E0A     		jle	.L246
1111:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     formatAttr.precision = SECUREC_MAX_PRECISION;
 3217              		.loc 2 1111 58
 3218 1398 C785B8F7 		movl	$512, -2120(%rbp)
 3218      FFFF0002 
 3218      0000
 3219              	.L246:
1112:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1113:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1114:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1115:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* Check if data is 0; if so, turn off hex prefix,
1116:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              * 'p' add 0x prefix, otherwise not add prefix
1117:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                              */
GAS LISTING /tmp/ccgOk6Ic.s 			page 99


1118:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (number == 0) {
 3220              		.loc 2 1118 32
 3221 13a2 4883BD68 		cmpq	$0, -2200(%rbp)
 3221      F7FFFF00 
 3222 13aa 750A     		jne	.L248
1119:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if !(defined(SECUREC_VXWORKS_PLATFORM) || defined(__hpux))
1120:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 prefixLen = 0;
 3223              		.loc 2 1120 43
 3224 13ac C785E4F6 		movl	$0, -2332(%rbp)
 3224      FFFF0000 
 3224      0000
 3225              	.L248:
1121:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1122:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if ((ch == 'p') && (formatAttr.flags & SECUREC_FLAG_ALTERNATE)) {
1123:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     prefixLen = SECUREC_PREFIX_LEN;
1124:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1125:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     prefixLen = 0;
1126:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1127:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1128:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1129:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1130:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* Convert data to ASCII */
1131:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             formatBuf.str = &buffer.str[SECUREC_BUFFER_SIZE];
 3226              		.loc 2 1131 43
 3227 13b6 488D85D0 		leaq	-2096(%rbp), %rax
 3227      F7FFFF
 3228 13bd 48050002 		addq	$512, %rax
 3228      0000
 3229 13c3 48898538 		movq	%rax, -2248(%rbp)
 3229      F7FFFF
1132:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1133:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (number > 0) {
 3230              		.loc 2 1133 32
 3231 13ca 4883BD68 		cmpq	$0, -2200(%rbp)
 3231      F7FFFF00 
 3232 13d2 0F846A01 		je	.L301
 3232      0000
 3233 13d8 83BDE0F6 		cmpl	$16, -2336(%rbp)
 3233      FFFF10
 3234 13df 0F84B600 		je	.L250
 3234      0000
 3235 13e5 83BDE0F6 		cmpl	$16, -2336(%rbp)
 3235      FFFF10
 3236 13ec 0F875301 		ja	.L302
 3236      0000
 3237 13f2 83BDE0F6 		cmpl	$8, -2336(%rbp)
 3237      FFFF08
 3238 13f9 0F84F000 		je	.L252
 3238      0000
 3239 13ff 83BDE0F6 		cmpl	$10, -2336(%rbp)
 3239      FFFF0A
 3240 1406 0F853901 		jne	.L302
 3240      0000
 3241 140c EB01     		jmp	.L253
 3242              	.L303:
1134:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef SECUREC_ON_64BITS
1135:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 switch (radix) {
GAS LISTING /tmp/ccgOk6Ic.s 			page 100


1136:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* the compiler will optimize each one */
1137:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     case SECUREC_RADIX_DECIMAL:
 3243              		.loc 2 1137 37
 3244 140e 90       		nop
 3245              	.L253:
1138:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SECUREC_SPECIAL_QWORD_BASE10(number);
 3246              		.loc 2 1138 41 discriminator 1
 3247 140f 488B8538 		movq	-2248(%rbp), %rax
 3247      F7FFFF
 3248 1416 4883E801 		subq	$1, %rax
 3249 141a 48898538 		movq	%rax, -2248(%rbp)
 3249      F7FFFF
 3250 1421 488B8D68 		movq	-2200(%rbp), %rcx
 3250      F7FFFF
 3251 1428 48BACDCC 		movabsq	$-3689348814741910323, %rdx
 3251      CCCCCCCC 
 3251      CCCC
 3252 1432 4889C8   		movq	%rcx, %rax
 3253 1435 48F7E2   		mulq	%rdx
 3254 1438 48C1EA03 		shrq	$3, %rdx
 3255 143c 4889D0   		movq	%rdx, %rax
 3256 143f 48C1E002 		salq	$2, %rax
 3257 1443 4801D0   		addq	%rdx, %rax
 3258 1446 4801C0   		addq	%rax, %rax
 3259 1449 4829C1   		subq	%rax, %rcx
 3260 144c 4889CA   		movq	%rcx, %rdx
 3261 144f 488B8548 		movq	-2232(%rbp), %rax
 3261      F7FFFF
 3262 1456 4801C2   		addq	%rax, %rdx
 3263 1459 488B8538 		movq	-2248(%rbp), %rax
 3263      F7FFFF
 3264 1460 0FB612   		movzbl	(%rdx), %edx
 3265 1463 8810     		movb	%dl, (%rax)
 3266 1465 488B8568 		movq	-2200(%rbp), %rax
 3266      F7FFFF
 3267 146c 48BACDCC 		movabsq	$-3689348814741910323, %rdx
 3267      CCCCCCCC 
 3267      CCCC
 3268 1476 48F7E2   		mulq	%rdx
 3269 1479 4889D0   		movq	%rdx, %rax
 3270 147c 48C1E803 		shrq	$3, %rax
 3271 1480 48898568 		movq	%rax, -2200(%rbp)
 3271      F7FFFF
 3272 1487 4883BD68 		cmpq	$0, -2200(%rbp)
 3272      F7FFFF00 
 3273 148f 0F8579FF 		jne	.L303
 3273      FFFF
1139:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 3274              		.loc 2 1139 41
 3275 1495 E9AC0000 		jmp	.L249
 3275      00
 3276              	.L304:
1140:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     case SECUREC_RADIX_HEX:
 3277              		.loc 2 1140 37
 3278 149a 90       		nop
 3279              	.L250:
1141:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_HEX);
GAS LISTING /tmp/ccgOk6Ic.s 			page 101


 3280              		.loc 2 1141 41 discriminator 1
 3281 149b 488B8538 		movq	-2248(%rbp), %rax
 3281      F7FFFF
 3282 14a2 4883E801 		subq	$1, %rax
 3283 14a6 48898538 		movq	%rax, -2248(%rbp)
 3283      F7FFFF
 3284 14ad 488B8568 		movq	-2200(%rbp), %rax
 3284      F7FFFF
 3285 14b4 83E00F   		andl	$15, %eax
 3286 14b7 4889C2   		movq	%rax, %rdx
 3287 14ba 488B8548 		movq	-2232(%rbp), %rax
 3287      F7FFFF
 3288 14c1 4801C2   		addq	%rax, %rdx
 3289 14c4 488B8538 		movq	-2248(%rbp), %rax
 3289      F7FFFF
 3290 14cb 0FB612   		movzbl	(%rdx), %edx
 3291 14ce 8810     		movb	%dl, (%rax)
 3292 14d0 488B8568 		movq	-2200(%rbp), %rax
 3292      F7FFFF
 3293 14d7 48C1E804 		shrq	$4, %rax
 3294 14db 48898568 		movq	%rax, -2200(%rbp)
 3294      F7FFFF
 3295 14e2 4883BD68 		cmpq	$0, -2200(%rbp)
 3295      F7FFFF00 
 3296 14ea 75AE     		jne	.L304
1142:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 3297              		.loc 2 1142 41
 3298 14ec EB58     		jmp	.L249
 3299              	.L305:
1143:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     case SECUREC_RADIX_OCTAL:
 3300              		.loc 2 1143 37
 3301 14ee 90       		nop
 3302              	.L252:
1144:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_OCTAL);
 3303              		.loc 2 1144 41 discriminator 1
 3304 14ef 488B8538 		movq	-2248(%rbp), %rax
 3304      F7FFFF
 3305 14f6 4883E801 		subq	$1, %rax
 3306 14fa 48898538 		movq	%rax, -2248(%rbp)
 3306      F7FFFF
 3307 1501 488B8568 		movq	-2200(%rbp), %rax
 3307      F7FFFF
 3308 1508 83E007   		andl	$7, %eax
 3309 150b 4889C2   		movq	%rax, %rdx
 3310 150e 488B8548 		movq	-2232(%rbp), %rax
 3310      F7FFFF
 3311 1515 4801C2   		addq	%rax, %rdx
 3312 1518 488B8538 		movq	-2248(%rbp), %rax
 3312      F7FFFF
 3313 151f 0FB612   		movzbl	(%rdx), %edx
 3314 1522 8810     		movb	%dl, (%rax)
 3315 1524 488B8568 		movq	-2200(%rbp), %rax
 3315      F7FFFF
 3316 152b 48C1E803 		shrq	$3, %rax
 3317 152f 48898568 		movq	%rax, -2200(%rbp)
 3317      F7FFFF
 3318 1536 4883BD68 		cmpq	$0, -2200(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 102


 3318      F7FFFF00 
 3319 153e 75AE     		jne	.L305
1145:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
 3320              		.loc 2 1145 41
 3321 1540 EB04     		jmp	.L249
 3322              	.L301:
1146:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     default:
1147:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         break;
1148:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1149:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* for 32 bits system */
1150:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 if (number <= 0xFFFFFFFFUL) {
1151:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* in most case, the value to be converted is small value */
1152:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     SecUnsignedInt32 n32Tmp = (SecUnsignedInt32)number;
1153:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     switch (radix) {
1154:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_HEX:
1155:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_DWORD(n32Tmp, SECUREC_RADIX_HEX);
1156:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1157:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_OCTAL:
1158:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_DWORD(n32Tmp, SECUREC_RADIX_OCTAL);
1159:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1160:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1161:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifdef _AIX
1162:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* the compiler will optimize div 10 */
1163:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_DECIMAL:
1164:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_DWORD(n32Tmp, SECUREC_RADIX_DECIMAL);
1165:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1166:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1167:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_DECIMAL:
1168:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             do {
1169:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 /* fast div 10 */
1170:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 SecUnsignedInt32 q;
1171:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 SecUnsignedInt32 r;
1172:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 do {
1173:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     *--formatBuf.str = digits[n32Tmp % SECUREC_RADI
1174:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = (n32Tmp >> 1) + (n32Tmp >> 2); /* fast div 
1175:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q + (q >> 4); /* fast div  magic 4 */
1176:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q + (q >> 8); /* fast div  magic 8 */
1177:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q + (q >> 16); /* fast div  magic 16 */
1178:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     q = q >> 3; /* fast div  magic 3 */
1179:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     r = n32Tmp - SECUREC_MUL_TEN(q);
1180:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                     n32Tmp = (r > 9) ? (q + 1) : q; /* fast div  ma
1181:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                                 } while (n32Tmp != 0);
1182:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             } SECUREC_WHILE_ZERO;
1183:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1184:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1185:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         default:
1186:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1187:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }   /* end switch */
1188:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 } else {
1189:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     /* the value to be converted is greater than 4G */
1190:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_VXWORKS_VERSION_5_4)
1191:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     do {
1192:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SecUnsignedInt32 digit = 0; /* ascii value of digit */
1193:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         SecUnsignedInt64 quotient = 0;
1194:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         if (SecU64Div32(number,(SecUnsignedInt32)radix, &quotient, 
1195:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             noOutput = 1;
1196:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
GAS LISTING /tmp/ccgOk6Ic.s 			page 103


1197:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         }
1198:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         *--formatBuf.str = digits[digit];
1199:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         number = quotient;
1200:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     } while (number != 0);
1201:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1202:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     switch (radix) {
1203:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         /* the compiler will optimize div 10 */
1204:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_DECIMAL:
1205:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_QWORD_BASE10(number);
1206:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1207:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_OCTAL:
1208:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_OCTAL);
1209:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1210:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         case SECUREC_RADIX_HEX:
1211:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             SECUREC_SPECIAL_QWORD(number, SECUREC_RADIX_HEX);
1212:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1213:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                         default:
1214:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                             break;
1215:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     }
1216:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1217:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1218:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1219:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1220:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
 3323              		.loc 2 1220 29
 3324 1542 90       		nop
 3325 1543 EB01     		jmp	.L249
 3326              	.L302:
1147:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
 3327              		.loc 2 1147 41
 3328 1545 90       		nop
 3329              	.L249:
1221:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* compute length of number,.if textLen > 0, then formatBuf.str must be
1222:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             textLen = (int)(size_t)((char *)&buffer.str[SECUREC_BUFFER_SIZE] - form
 3330              		.loc 2 1222 105
 3331 1546 488B8538 		movq	-2248(%rbp), %rax
 3331      F7FFFF
 3332              		.loc 2 1222 94
 3333 154d 488D95D0 		leaq	-2096(%rbp), %rdx
 3333      F7FFFF
 3334 1554 4881C200 		addq	$512, %rdx
 3334      020000
 3335 155b 4829C2   		subq	%rax, %rdx
 3336 155e 4889D0   		movq	%rdx, %rax
 3337              		.loc 2 1222 37
 3338 1561 8985E8F6 		movl	%eax, -2328(%rbp)
 3338      FFFF
1223:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (formatAttr.precision > textLen) {
 3339              		.loc 2 1223 43
 3340 1567 8B85B8F7 		movl	-2120(%rbp), %eax
 3340      FFFF
 3341              		.loc 2 1223 32
 3342 156d 3985E8F6 		cmpl	%eax, -2328(%rbp)
 3342      FFFF
 3343 1573 7D4F     		jge	.L254
 3344              	.LBB13:
1224:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 int ii;
GAS LISTING /tmp/ccgOk6Ic.s 			page 104


1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 for (ii = 0; ii < formatAttr.precision - textLen; ++ii) {
 3345              		.loc 2 1225 41
 3346 1575 C78500F7 		movl	$0, -2304(%rbp)
 3346      FFFF0000 
 3346      0000
 3347              		.loc 2 1225 33
 3348 157f EB23     		jmp	.L255
 3349              	.L256:
1226:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3350              		.loc 2 1226 49 discriminator 3
 3351 1581 488B8538 		movq	-2248(%rbp), %rax
 3351      F7FFFF
 3352              		.loc 2 1226 38 discriminator 3
 3353 1588 4883E801 		subq	$1, %rax
 3354              		.loc 2 1226 54 discriminator 3
 3355 158c 48898538 		movq	%rax, -2248(%rbp)
 3355      F7FFFF
 3356              		.loc 2 1226 49 discriminator 3
 3357 1593 488B8538 		movq	-2248(%rbp), %rax
 3357      F7FFFF
 3358              		.loc 2 1226 54 discriminator 3
 3359 159a C60030   		movb	$48, (%rax)
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3360              		.loc 2 1225 83 discriminator 3
 3361 159d 838500F7 		addl	$1, -2304(%rbp)
 3361      FFFF01
 3362              	.L255:
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3363              		.loc 2 1225 61 discriminator 1
 3364 15a4 8B85B8F7 		movl	-2120(%rbp), %eax
 3364      FFFF
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3365              		.loc 2 1225 72 discriminator 1
 3366 15aa 2B85E8F6 		subl	-2328(%rbp), %eax
 3366      FFFF
1225:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                     *--formatBuf.str = '0';
 3367              		.loc 2 1225 33 discriminator 1
 3368 15b0 398500F7 		cmpl	%eax, -2304(%rbp)
 3368      FFFF
 3369 15b6 7CC9     		jl	.L256
1227:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 }
1228:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 textLen = formatAttr.precision;
 3370              		.loc 2 1228 41
 3371 15b8 8B85B8F7 		movl	-2120(%rbp), %eax
 3371      FFFF
 3372 15be 8985E8F6 		movl	%eax, -2328(%rbp)
 3372      FFFF
 3373              	.L254:
 3374              	.LBE13:
1229:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1230:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1231:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* Force a leading zero if FORCEOCTAL flag set */
1232:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if ((formatAttr.flags & SECUREC_FLAG_FORCE_OCTAL) &&
 3375              		.loc 2 1232 44
 3376 15c4 8B85B0F7 		movl	-2128(%rbp), %eax
 3376      FFFF
 3377              		.loc 2 1232 51
GAS LISTING /tmp/ccgOk6Ic.s 			page 105


 3378 15ca 25000200 		andl	$512, %eax
 3378      00
 3379              		.loc 2 1232 32
 3380 15cf 85C0     		testl	%eax, %eax
 3381 15d1 7442     		je	.L306
 3382              		.loc 2 1232 79 discriminator 1
 3383 15d3 83BDE8F6 		cmpl	$0, -2328(%rbp)
 3383      FFFF00
 3384 15da 740E     		je	.L258
1233:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 (textLen == 0 || formatBuf.str[0] != '0')) {
 3385              		.loc 2 1233 59
 3386 15dc 488B8538 		movq	-2248(%rbp), %rax
 3386      F7FFFF
 3387              		.loc 2 1233 63
 3388 15e3 0FB600   		movzbl	(%rax), %eax
 3389              		.loc 2 1233 47
 3390 15e6 3C30     		cmpb	$48, %al
 3391 15e8 742B     		je	.L306
 3392              	.L258:
1234:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 *--formatBuf.str = '0';
 3393              		.loc 2 1234 45
 3394 15ea 488B8538 		movq	-2248(%rbp), %rax
 3394      F7FFFF
 3395              		.loc 2 1234 34
 3396 15f1 4883E801 		subq	$1, %rax
 3397              		.loc 2 1234 50
 3398 15f5 48898538 		movq	%rax, -2248(%rbp)
 3398      F7FFFF
 3399              		.loc 2 1234 45
 3400 15fc 488B8538 		movq	-2248(%rbp), %rax
 3400      F7FFFF
 3401              		.loc 2 1234 50
 3402 1603 C60030   		movb	$48, (%rax)
1235:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 ++textLen;  /* add a zero */
 3403              		.loc 2 1235 33
 3404 1606 8385E8F6 		addl	$1, -2328(%rbp)
 3404      FFFF01
 3405              	.LBE11:
1236:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1237:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } SECUREC_WHILE_ZERO;
1238:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 3406              		.loc 2 1238 25
 3407 160d EB06     		jmp	.L306
 3408              	.L296:
1239:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     default:
1240:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
 3409              		.loc 2 1240 25
 3410 160f 90       		nop
 3411 1610 EB04     		jmp	.L154
 3412              	.L297:
 752:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     case SECUREC_CHAR('S'):    /* wide char string */
 3413              		.loc 2 752 25
 3414 1612 90       		nop
 3415 1613 EB01     		jmp	.L154
 3416              	.L306:
1238:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     default:
 3417              		.loc 2 1238 25
GAS LISTING /tmp/ccgOk6Ic.s 			page 106


 3418 1615 90       		nop
 3419              	.L154:
1241:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
1242:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1243:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 while (noOutput < 1) {
 3420              		.loc 2 1243 23
 3421 1616 83BDECF6 		cmpl	$0, -2324(%rbp)
 3421      FFFF00
 3422 161d 0F8F2307 		jg	.L259
 3422      0000
1244:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (formatAttr.flags & SECUREC_FLAG_SIGNED) {
 3423              		.loc 2 1244 35
 3424 1623 8B85B0F7 		movl	-2128(%rbp), %eax
 3424      FFFF
 3425              		.loc 2 1244 42
 3426 1629 83E040   		andl	$64, %eax
 3427              		.loc 2 1244 24
 3428 162c 85C0     		testl	%eax, %eax
 3429 162e 7469     		je	.L260
1245:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (formatAttr.flags & SECUREC_FLAG_NEGATIVE) {
 3430              		.loc 2 1245 39
 3431 1630 8B85B0F7 		movl	-2128(%rbp), %eax
 3431      FFFF
 3432              		.loc 2 1245 46
 3433 1636 25000100 		andl	$256, %eax
 3433      00
 3434              		.loc 2 1245 28
 3435 163b 85C0     		testl	%eax, %eax
 3436 163d 7416     		je	.L261
1246:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* prefix is a '-' */
1247:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR('-');
 3437              		.loc 2 1247 39
 3438 163f C785C8F7 		movl	$45, -2104(%rbp)
 3438      FFFF2D00 
 3438      0000
1248:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = 1;
 3439              		.loc 2 1248 39
 3440 1649 C785E4F6 		movl	$1, -2332(%rbp)
 3440      FFFF0100 
 3440      0000
 3441 1653 EB44     		jmp	.L260
 3442              	.L261:
1249:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else if (formatAttr.flags & SECUREC_FLAG_SIGN) {
 3443              		.loc 2 1249 46
 3444 1655 8B85B0F7 		movl	-2128(%rbp), %eax
 3444      FFFF
 3445              		.loc 2 1249 53
 3446 165b 83E001   		andl	$1, %eax
 3447              		.loc 2 1249 35
 3448 165e 85C0     		testl	%eax, %eax
 3449 1660 7416     		je	.L262
1250:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* prefix is '+' */
1251:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR('+');
 3450              		.loc 2 1251 39
 3451 1662 C785C8F7 		movl	$43, -2104(%rbp)
 3451      FFFF2B00 
 3451      0000
GAS LISTING /tmp/ccgOk6Ic.s 			page 107


1252:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = 1;
 3452              		.loc 2 1252 39
 3453 166c C785E4F6 		movl	$1, -2332(%rbp)
 3453      FFFF0100 
 3453      0000
 3454 1676 EB21     		jmp	.L260
 3455              	.L262:
1253:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else if (formatAttr.flags & SECUREC_FLAG_SIGN_SPACE) {
 3456              		.loc 2 1253 46
 3457 1678 8B85B0F7 		movl	-2128(%rbp), %eax
 3457      FFFF
 3458              		.loc 2 1253 53
 3459 167e 83E002   		andl	$2, %eax
 3460              		.loc 2 1253 35
 3461 1681 85C0     		testl	%eax, %eax
 3462 1683 7414     		je	.L260
1254:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* prefix is ' ' */
1255:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefix[0] = SECUREC_CHAR(' ');
 3463              		.loc 2 1255 39
 3464 1685 C785C8F7 		movl	$32, -2104(%rbp)
 3464      FFFF2000 
 3464      0000
1256:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             prefixLen = 1;
 3465              		.loc 2 1256 39
 3466 168f C785E4F6 		movl	$1, -2332(%rbp)
 3466      FFFF0100 
 3466      0000
 3467              	.L260:
1257:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1258:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1259:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1260:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if defined(SECUREC_COMPATIBLE_LINUX_FORMAT) && (!defined(SECUREC_ON_UNIX))
1261:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if ((formatAttr.flags & SECUREC_FLAG_POINTER) && (textLen == 0)) {
 3468              		.loc 2 1261 36
 3469 1699 8B85B0F7 		movl	-2128(%rbp), %eax
 3469      FFFF
 3470              		.loc 2 1261 43
 3471 169f 25004000 		andl	$16384, %eax
 3471      00
 3472              		.loc 2 1261 24
 3473 16a4 85C0     		testl	%eax, %eax
 3474 16a6 0F84AD00 		je	.L263
 3474      0000
 3475              		.loc 2 1261 67 discriminator 1
 3476 16ac 83BDE8F6 		cmpl	$0, -2328(%rbp)
 3476      FFFF00
 3477 16b3 0F85A000 		jne	.L263
 3477      0000
1262:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         formatAttr.flags &= ~SECUREC_FLAG_LEADZERO;
 3478              		.loc 2 1262 42
 3479 16b9 8B85B0F7 		movl	-2128(%rbp), %eax
 3479      FFFF
 3480 16bf 83E0F7   		andl	$-9, %eax
 3481 16c2 8985B0F7 		movl	%eax, -2128(%rbp)
 3481      FFFF
1263:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         formatBuf.str = &buffer.str[SECUREC_BUFFER_SIZE - 1];
 3482              		.loc 2 1263 39
GAS LISTING /tmp/ccgOk6Ic.s 			page 108


 3483 16c8 488D85D0 		leaq	-2096(%rbp), %rax
 3483      F7FFFF
 3484 16cf 4805FF01 		addq	$511, %rax
 3484      0000
 3485 16d5 48898538 		movq	%rax, -2248(%rbp)
 3485      F7FFFF
1264:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = '\0';
 3486              		.loc 2 1264 35
 3487 16dc 488B8538 		movq	-2248(%rbp), %rax
 3487      F7FFFF
 3488              		.loc 2 1264 39
 3489 16e3 488D50FF 		leaq	-1(%rax), %rdx
 3490 16e7 48899538 		movq	%rdx, -2248(%rbp)
 3490      F7FFFF
 3491              		.loc 2 1264 42
 3492 16ee C60000   		movb	$0, (%rax)
1265:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = ')';
 3493              		.loc 2 1265 35
 3494 16f1 488B8538 		movq	-2248(%rbp), %rax
 3494      F7FFFF
 3495              		.loc 2 1265 39
 3496 16f8 488D50FF 		leaq	-1(%rax), %rdx
 3497 16fc 48899538 		movq	%rdx, -2248(%rbp)
 3497      F7FFFF
 3498              		.loc 2 1265 42
 3499 1703 C60029   		movb	$41, (%rax)
1266:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = 'l';
 3500              		.loc 2 1266 35
 3501 1706 488B8538 		movq	-2248(%rbp), %rax
 3501      F7FFFF
 3502              		.loc 2 1266 39
 3503 170d 488D50FF 		leaq	-1(%rax), %rdx
 3504 1711 48899538 		movq	%rdx, -2248(%rbp)
 3504      F7FFFF
 3505              		.loc 2 1266 42
 3506 1718 C6006C   		movb	$108, (%rax)
1267:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = 'i';
 3507              		.loc 2 1267 35
 3508 171b 488B8538 		movq	-2248(%rbp), %rax
 3508      F7FFFF
 3509              		.loc 2 1267 39
 3510 1722 488D50FF 		leaq	-1(%rax), %rdx
 3511 1726 48899538 		movq	%rdx, -2248(%rbp)
 3511      F7FFFF
 3512              		.loc 2 1267 42
 3513 172d C60069   		movb	$105, (%rax)
1268:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str-- = 'n';
 3514              		.loc 2 1268 35
 3515 1730 488B8538 		movq	-2248(%rbp), %rax
 3515      F7FFFF
 3516              		.loc 2 1268 39
 3517 1737 488D50FF 		leaq	-1(%rax), %rdx
 3518 173b 48899538 		movq	%rdx, -2248(%rbp)
 3518      F7FFFF
 3519              		.loc 2 1268 42
 3520 1742 C6006E   		movb	$110, (%rax)
1269:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         *formatBuf.str = '(';
GAS LISTING /tmp/ccgOk6Ic.s 			page 109


 3521              		.loc 2 1269 35
 3522 1745 488B8538 		movq	-2248(%rbp), %rax
 3522      F7FFFF
 3523              		.loc 2 1269 40
 3524 174c C60028   		movb	$40, (%rax)
1270:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         textLen = 5; /* length of (nil) is 5 */
 3525              		.loc 2 1270 33
 3526 174f C785E8F6 		movl	$5, -2328(%rbp)
 3526      FFFF0500 
 3526      0000
 3527              	.L263:
1271:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1272:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1273:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1274:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* calculate amount of padding */
1275:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     padding = (formatAttr.fldWidth - textLen) - prefixLen;
 3528              		.loc 2 1275 42
 3529 1759 8B85B4F7 		movl	-2124(%rbp), %eax
 3529      FFFF
 3530              		.loc 2 1275 52
 3531 175f 2B85E8F6 		subl	-2328(%rbp), %eax
 3531      FFFF
 3532              		.loc 2 1275 29
 3533 1765 2B85E4F6 		subl	-2332(%rbp), %eax
 3533      FFFF
 3534 176b 89851CF7 		movl	%eax, -2276(%rbp)
 3534      FFFF
1276:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1277:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* put out the padding, prefix, and text, in the correct order */
1278:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1279:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (!(formatAttr.flags & (SECUREC_FLAG_LEFT | SECUREC_FLAG_LEADZERO)) && paddin
 3535              		.loc 2 1279 37
 3536 1771 8B85B0F7 		movl	-2128(%rbp), %eax
 3536      FFFF
 3537              		.loc 2 1279 44
 3538 1777 83E00C   		andl	$12, %eax
 3539              		.loc 2 1279 24
 3540 177a 85C0     		testl	%eax, %eax
 3541 177c 0F85CA00 		jne	.L264
 3541      0000
 3542              		.loc 2 1279 91 discriminator 1
 3543 1782 83BD1CF7 		cmpl	$0, -2276(%rbp)
 3543      FFFF00
 3544 1789 0F8EBD00 		jle	.L264
 3544      0000
1280:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* pad on left with blanks */
1281:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, padding)) {
 3545              		.loc 2 1281 29
 3546 178f 488B85C8 		movq	-2360(%rbp), %rax
 3546      F6FFFF
 3547 1796 8B00     		movl	(%rax), %eax
 3548 1798 8B951CF7 		movl	-2276(%rbp), %edx
 3548      FFFF
 3549 179e C1E202   		sall	$2, %edx
 3550 17a1 29D0     		subl	%edx, %eax
 3551              		.loc 2 1281 28
 3552 17a3 85C0     		testl	%eax, %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 110


 3553 17a5 0F888100 		js	.L265
 3553      0000
 3554              	.LBB14:
1282:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1283:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_PADDING(SECUREC_CHAR(' '), padding, stream, &charsOut);
 3555              		.loc 2 1283 29
 3556 17ab C78504F7 		movl	$0, -2300(%rbp)
 3556      FFFF0000 
 3556      0000
 3557 17b5 EB32     		jmp	.L266
 3558              	.L267:
 3559              		.loc 2 1283 29 is_stmt 0 discriminator 3
 3560 17b7 488B85C8 		movq	-2360(%rbp), %rax
 3560      F6FFFF
 3561 17be 488B4008 		movq	8(%rax), %rax
 3562 17c2 C7002000 		movl	$32, (%rax)
 3562      0000
 3563 17c8 488B85C8 		movq	-2360(%rbp), %rax
 3563      F6FFFF
 3564 17cf 488B4008 		movq	8(%rax), %rax
 3565 17d3 488D5004 		leaq	4(%rax), %rdx
 3566 17d7 488B85C8 		movq	-2360(%rbp), %rax
 3566      F6FFFF
 3567 17de 48895008 		movq	%rdx, 8(%rax)
 3568 17e2 838504F7 		addl	$1, -2300(%rbp)
 3568      FFFF01
 3569              	.L266:
 3570              		.loc 2 1283 29 discriminator 1
 3571 17e9 8B8504F7 		movl	-2300(%rbp), %eax
 3571      FFFF
 3572 17ef 3B851CF7 		cmpl	-2276(%rbp), %eax
 3572      FFFF
 3573 17f5 7CC0     		jl	.L267
 3574              		.loc 2 1283 29 discriminator 4
 3575 17f7 488B85C8 		movq	-2360(%rbp), %rax
 3575      F6FFFF
 3576 17fe 8B00     		movl	(%rax), %eax
 3577 1800 8B951CF7 		movl	-2276(%rbp), %edx
 3577      FFFF
 3578 1806 C1E202   		sall	$2, %edx
 3579 1809 29D0     		subl	%edx, %eax
 3580 180b 89C2     		movl	%eax, %edx
 3581 180d 488B85C8 		movq	-2360(%rbp), %rax
 3581      F6FFFF
 3582 1814 8910     		movl	%edx, (%rax)
 3583 1816 8B95D8F6 		movl	-2344(%rbp), %edx
 3583      FFFF
 3584 181c 8B851CF7 		movl	-2276(%rbp), %eax
 3584      FFFF
 3585 1822 01D0     		addl	%edx, %eax
 3586 1824 8985D8F6 		movl	%eax, -2344(%rbp)
 3586      FFFF
 3587              	.LBE14:
 3588 182a EB20     		jmp	.L264
 3589              	.L265:
1284:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1285:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_MULTI_CHAR(SECUREC_CHAR(' '), padding, stream, &charsOut)
GAS LISTING /tmp/ccgOk6Ic.s 			page 111


 3590              		.loc 2 1285 29 is_stmt 1
 3591 182c 488D8DD8 		leaq	-2344(%rbp), %rcx
 3591      F6FFFF
 3592 1833 488B95C8 		movq	-2360(%rbp), %rdx
 3592      F6FFFF
 3593 183a 8B851CF7 		movl	-2276(%rbp), %eax
 3593      FFFF
 3594 1840 89C6     		movl	%eax, %esi
 3595 1842 BF200000 		movl	$32, %edi
 3595      00
 3596 1847 E8000000 		call	SecWriteMultiCharW
 3596      00
 3597              	.L264:
1286:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1287:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1288:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1289:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* write prefix */
1290:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (prefixLen > 0) {
 3598              		.loc 2 1290 24
 3599 184c 83BDE4F6 		cmpl	$0, -2332(%rbp)
 3599      FFFF00
 3600 1853 0F8EDB00 		jle	.L268
 3600      0000
 3601              	.LBB15:
1291:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         SecChar *pPrefix = prefix;
 3602              		.loc 2 1291 34
 3603 1859 488D85C8 		leaq	-2104(%rbp), %rax
 3603      F7FFFF
 3604 1860 48898578 		movq	%rax, -2184(%rbp)
 3604      F7FFFF
1292:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, prefixLen)) {
 3605              		.loc 2 1292 29
 3606 1867 488B85C8 		movq	-2360(%rbp), %rax
 3606      F6FFFF
 3607 186e 8B00     		movl	(%rax), %eax
 3608 1870 8B95E4F6 		movl	-2332(%rbp), %edx
 3608      FFFF
 3609 1876 C1E202   		sall	$2, %edx
 3610 1879 29D0     		subl	%edx, %eax
 3611              		.loc 2 1292 28
 3612 187b 85C0     		testl	%eax, %eax
 3613 187d 0F888E00 		js	.L269
 3613      0000
 3614              	.LBB16:
1293:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* max prefix len is 2, use loop copy */ /* char * cast to wchar * in W
1294:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_WRITE_STR_OPT(pPrefix, prefixLen, stream, &charsOut);
 3615              		.loc 2 1294 29
 3616 1883 C78508F7 		movl	$0, -2296(%rbp)
 3616      FFFF0000 
 3616      0000
 3617 188d EB3F     		jmp	.L270
 3618              	.L271:
 3619              		.loc 2 1294 29 is_stmt 0 discriminator 3
 3620 188f 488B85C8 		movq	-2360(%rbp), %rax
 3620      F6FFFF
 3621 1896 488B4008 		movq	8(%rax), %rax
 3622 189a 488B9578 		movq	-2184(%rbp), %rdx
GAS LISTING /tmp/ccgOk6Ic.s 			page 112


 3622      F7FFFF
 3623 18a1 8B12     		movl	(%rdx), %edx
 3624 18a3 8910     		movl	%edx, (%rax)
 3625 18a5 488B85C8 		movq	-2360(%rbp), %rax
 3625      F6FFFF
 3626 18ac 488B4008 		movq	8(%rax), %rax
 3627 18b0 488D5004 		leaq	4(%rax), %rdx
 3628 18b4 488B85C8 		movq	-2360(%rbp), %rax
 3628      F6FFFF
 3629 18bb 48895008 		movq	%rdx, 8(%rax)
 3630 18bf 48838578 		addq	$4, -2184(%rbp)
 3630      F7FFFF04 
 3631 18c7 838508F7 		addl	$1, -2296(%rbp)
 3631      FFFF01
 3632              	.L270:
 3633              		.loc 2 1294 29 discriminator 1
 3634 18ce 8B8508F7 		movl	-2296(%rbp), %eax
 3634      FFFF
 3635 18d4 3B85E4F6 		cmpl	-2332(%rbp), %eax
 3635      FFFF
 3636 18da 7CB3     		jl	.L271
 3637              		.loc 2 1294 29 discriminator 4
 3638 18dc 488B85C8 		movq	-2360(%rbp), %rax
 3638      F6FFFF
 3639 18e3 8B00     		movl	(%rax), %eax
 3640 18e5 8B95E4F6 		movl	-2332(%rbp), %edx
 3640      FFFF
 3641 18eb C1E202   		sall	$2, %edx
 3642 18ee 29D0     		subl	%edx, %eax
 3643 18f0 89C2     		movl	%eax, %edx
 3644 18f2 488B85C8 		movq	-2360(%rbp), %rax
 3644      F6FFFF
 3645 18f9 8910     		movl	%edx, (%rax)
 3646 18fb 8B95D8F6 		movl	-2344(%rbp), %edx
 3646      FFFF
 3647 1901 8B85E4F6 		movl	-2332(%rbp), %eax
 3647      FFFF
 3648 1907 01D0     		addl	%edx, %eax
 3649 1909 8985D8F6 		movl	%eax, -2344(%rbp)
 3649      FFFF
 3650              	.LBE16:
 3651 190f EB23     		jmp	.L268
 3652              	.L269:
1295:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1296:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(prefix, prefixLen, stream, &charsOut);
 3653              		.loc 2 1296 29 is_stmt 1
 3654 1911 488D8DD8 		leaq	-2344(%rbp), %rcx
 3654      F6FFFF
 3655 1918 488B95C8 		movq	-2360(%rbp), %rdx
 3655      F6FFFF
 3656 191f 8BB5E4F6 		movl	-2332(%rbp), %esi
 3656      FFFF
 3657 1925 488D85C8 		leaq	-2104(%rbp), %rax
 3657      F7FFFF
 3658 192c 4889C7   		movq	%rax, %rdi
 3659 192f E8000000 		call	SecWriteStringW
 3659      00
GAS LISTING /tmp/ccgOk6Ic.s 			page 113


 3660              	.L268:
 3661              	.LBE15:
1297:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1298:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1299:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1300:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if ((formatAttr.flags & SECUREC_FLAG_LEADZERO) && !(formatAttr.flags & SECUREC_
 3662              		.loc 2 1300 36
 3663 1934 8B85B0F7 		movl	-2128(%rbp), %eax
 3663      FFFF
 3664              		.loc 2 1300 43
 3665 193a 83E008   		andl	$8, %eax
 3666              		.loc 2 1300 24
 3667 193d 85C0     		testl	%eax, %eax
 3668 193f 0F84DB00 		je	.L272
 3668      0000
 3669              		.loc 2 1300 83 discriminator 1
 3670 1945 8B85B0F7 		movl	-2128(%rbp), %eax
 3670      FFFF
 3671              		.loc 2 1300 90 discriminator 1
 3672 194b 83E004   		andl	$4, %eax
 3673              		.loc 2 1300 68 discriminator 1
 3674 194e 85C0     		testl	%eax, %eax
 3675 1950 0F85CA00 		jne	.L272
 3675      0000
1301:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         && padding > 0) {
 3676              		.loc 2 1301 25
 3677 1956 83BD1CF7 		cmpl	$0, -2276(%rbp)
 3677      FFFF00
 3678 195d 0F8EBD00 		jle	.L272
 3678      0000
1302:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* write leading zeros */
1303:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, padding)) {
 3679              		.loc 2 1303 29
 3680 1963 488B85C8 		movq	-2360(%rbp), %rax
 3680      F6FFFF
 3681 196a 8B00     		movl	(%rax), %eax
 3682 196c 8B951CF7 		movl	-2276(%rbp), %edx
 3682      FFFF
 3683 1972 C1E202   		sall	$2, %edx
 3684 1975 29D0     		subl	%edx, %eax
 3685              		.loc 2 1303 28
 3686 1977 85C0     		testl	%eax, %eax
 3687 1979 0F888100 		js	.L273
 3687      0000
 3688              	.LBB17:
1304:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1305:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_PADDING(SECUREC_CHAR('0'), padding, stream, &charsOut);
 3689              		.loc 2 1305 29
 3690 197f C7850CF7 		movl	$0, -2292(%rbp)
 3690      FFFF0000 
 3690      0000
 3691 1989 EB32     		jmp	.L274
 3692              	.L275:
 3693              		.loc 2 1305 29 is_stmt 0 discriminator 3
 3694 198b 488B85C8 		movq	-2360(%rbp), %rax
 3694      F6FFFF
 3695 1992 488B4008 		movq	8(%rax), %rax
GAS LISTING /tmp/ccgOk6Ic.s 			page 114


 3696 1996 C7003000 		movl	$48, (%rax)
 3696      0000
 3697 199c 488B85C8 		movq	-2360(%rbp), %rax
 3697      F6FFFF
 3698 19a3 488B4008 		movq	8(%rax), %rax
 3699 19a7 488D5004 		leaq	4(%rax), %rdx
 3700 19ab 488B85C8 		movq	-2360(%rbp), %rax
 3700      F6FFFF
 3701 19b2 48895008 		movq	%rdx, 8(%rax)
 3702 19b6 83850CF7 		addl	$1, -2292(%rbp)
 3702      FFFF01
 3703              	.L274:
 3704              		.loc 2 1305 29 discriminator 1
 3705 19bd 8B850CF7 		movl	-2292(%rbp), %eax
 3705      FFFF
 3706 19c3 3B851CF7 		cmpl	-2276(%rbp), %eax
 3706      FFFF
 3707 19c9 7CC0     		jl	.L275
 3708              		.loc 2 1305 29 discriminator 4
 3709 19cb 488B85C8 		movq	-2360(%rbp), %rax
 3709      F6FFFF
 3710 19d2 8B00     		movl	(%rax), %eax
 3711 19d4 8B951CF7 		movl	-2276(%rbp), %edx
 3711      FFFF
 3712 19da C1E202   		sall	$2, %edx
 3713 19dd 29D0     		subl	%edx, %eax
 3714 19df 89C2     		movl	%eax, %edx
 3715 19e1 488B85C8 		movq	-2360(%rbp), %rax
 3715      F6FFFF
 3716 19e8 8910     		movl	%edx, (%rax)
 3717 19ea 8B95D8F6 		movl	-2344(%rbp), %edx
 3717      FFFF
 3718 19f0 8B851CF7 		movl	-2276(%rbp), %eax
 3718      FFFF
 3719 19f6 01D0     		addl	%edx, %eax
 3720 19f8 8985D8F6 		movl	%eax, -2344(%rbp)
 3720      FFFF
 3721              	.LBE17:
 3722 19fe EB20     		jmp	.L272
 3723              	.L273:
1306:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1307:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_MULTI_CHAR(SECUREC_CHAR('0'), padding, stream, &charsOut)
 3724              		.loc 2 1307 29 is_stmt 1
 3725 1a00 488D8DD8 		leaq	-2344(%rbp), %rcx
 3725      F6FFFF
 3726 1a07 488B95C8 		movq	-2360(%rbp), %rdx
 3726      F6FFFF
 3727 1a0e 8B851CF7 		movl	-2276(%rbp), %eax
 3727      FFFF
 3728 1a14 89C6     		movl	%eax, %esi
 3729 1a16 BF300000 		movl	$48, %edi
 3729      00
 3730 1a1b E8000000 		call	SecWriteMultiCharW
 3730      00
 3731              	.L272:
1308:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1309:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
GAS LISTING /tmp/ccgOk6Ic.s 			page 115


1310:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1311:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     /* write text */
1312:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #ifndef SECUREC_FOR_WCHAR
1313:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (formatAttr.bufferIsWide != 0 && (textLen > 0)) {
1314:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_WCTOMB
1315:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         wchar_t *p = formatBuf.wStr;
1316:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         int count = textLen;
1317:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         while (count > 0) {
1318:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             char tmpBuf[SECUREC_MB_LEN + 1];
1319:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_MASK_MSVC_CRT_WARNING
1320:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             int retVal = wctomb(tmpBuf, *p);
1321:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_END_MASK_MSVC_CRT_WARNING
1322:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (retVal <= 0) {
1323:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 charsOut = -1;
1324:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
1325:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1326:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(tmpBuf, retVal, stream, &charsOut);
1327:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             --count;
1328:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             ++p;
1329:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1330:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1331:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         charsOut = -1;
1332:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
1333:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1334:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     } else {
1335:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, textLen)) {
1336:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_WRITE_STR(formatBuf.str, textLen, stream, &charsOut);
1337:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1338:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(formatBuf.str, textLen, stream, &charsOut);
1339:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1340:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1341:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else /* SECUREC_FOR_WCHAR */
1342:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (formatAttr.bufferIsWide == 0 && textLen > 0) {
 3732              		.loc 2 1342 35
 3733 1a20 8B85BCF7 		movl	-2116(%rbp), %eax
 3733      FFFF
 3734              		.loc 2 1342 24
 3735 1a26 85C0     		testl	%eax, %eax
 3736 1a28 0F85C000 		jne	.L276
 3736      0000
 3737              		.loc 2 1342 54 discriminator 1
 3738 1a2e 83BDE8F6 		cmpl	$0, -2328(%rbp)
 3738      FFFF00
 3739 1a35 0F8EB300 		jle	.L276
 3739      0000
 3740              	.LBB18:
1343:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_MBTOWC
1344:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         int count = textLen;
 3741              		.loc 2 1344 29
 3742 1a3b 8B85E8F6 		movl	-2328(%rbp), %eax
 3742      FFFF
 3743 1a41 898510F7 		movl	%eax, -2288(%rbp)
 3743      FFFF
1345:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         char *p = formatBuf.str;
 3744              		.loc 2 1345 31
 3745 1a47 488B8538 		movq	-2248(%rbp), %rax
 3745      F7FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 116


 3746 1a4e 48898580 		movq	%rax, -2176(%rbp)
 3746      F7FFFF
1346:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1347:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         while (count > 0) {
 3747              		.loc 2 1347 31
 3748 1a55 E9820000 		jmp	.L277
 3748      00
 3749              	.L280:
 3750              	.LBB19:
1348:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             wchar_t wChar = L'\0';
 3751              		.loc 2 1348 37
 3752 1a5a C785DCF6 		movl	$0, -2340(%rbp)
 3752      FFFF0000 
 3752      0000
1349:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             int retVal = mbtowc(&wChar, p, (size_t)MB_CUR_MAX);
 3753              		.loc 2 1349 68
 3754 1a64 E8000000 		call	__ctype_get_mb_cur_max@PLT
 3754      00
 3755 1a69 4889C2   		movq	%rax, %rdx
 3756              		.loc 2 1349 42
 3757 1a6c 488B8D80 		movq	-2176(%rbp), %rcx
 3757      F7FFFF
 3758 1a73 488D85DC 		leaq	-2340(%rbp), %rax
 3758      F6FFFF
 3759 1a7a 4889CE   		movq	%rcx, %rsi
 3760 1a7d 4889C7   		movq	%rax, %rdi
 3761 1a80 E8000000 		call	mbtowc@PLT
 3761      00
 3762 1a85 89852CF7 		movl	%eax, -2260(%rbp)
 3762      FFFF
1350:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             if (retVal <= 0) {
 3763              		.loc 2 1350 32
 3764 1a8b 83BD2CF7 		cmpl	$0, -2260(%rbp)
 3764      FFFF00
 3765 1a92 7F0F     		jg	.L278
1351:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 charsOut = -1;
 3766              		.loc 2 1351 42
 3767 1a94 C785D8F6 		movl	$-1, -2344(%rbp)
 3767      FFFFFFFF 
 3767      FFFF
 3768              	.LBE19:
 3769              	.LBE18:
1342:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_MBTOWC
 3770              		.loc 2 1342 70
 3771 1a9e E9B90100 		jmp	.L281
 3771      00
 3772              	.L278:
 3773              	.LBB21:
 3774              	.LBB20:
1352:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                                 break;
1353:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             }
1354:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SecWriteCharW(wChar, stream, &charsOut);
 3775              		.loc 2 1354 29
 3776 1aa3 8B85DCF6 		movl	-2340(%rbp), %eax
 3776      FFFF
 3777 1aa9 488D95D8 		leaq	-2344(%rbp), %rdx
 3777      F6FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 117


 3778 1ab0 488B8DC8 		movq	-2360(%rbp), %rcx
 3778      F6FFFF
 3779 1ab7 4889CE   		movq	%rcx, %rsi
 3780 1aba 89C7     		movl	%eax, %edi
 3781 1abc E8000000 		call	SecWriteCharW
 3781      00
1355:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             p += retVal;
 3782              		.loc 2 1355 31
 3783 1ac1 8B852CF7 		movl	-2260(%rbp), %eax
 3783      FFFF
 3784 1ac7 4898     		cltq
 3785 1ac9 48018580 		addq	%rax, -2176(%rbp)
 3785      F7FFFF
1356:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             count -= retVal;
 3786              		.loc 2 1356 35
 3787 1ad0 8B852CF7 		movl	-2260(%rbp), %eax
 3787      FFFF
 3788 1ad6 298510F7 		subl	%eax, -2288(%rbp)
 3788      FFFF
 3789              	.L277:
 3790              	.LBE20:
1347:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             wchar_t wChar = L'\0';
 3791              		.loc 2 1347 31
 3792 1adc 83BD10F7 		cmpl	$0, -2288(%rbp)
 3792      FFFF00
 3793 1ae3 0F8F71FF 		jg	.L280
 3793      FFFF
 3794              	.LBE21:
1342:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_HAVE_MBTOWC
 3795              		.loc 2 1342 70
 3796 1ae9 E96E0100 		jmp	.L281
 3796      00
 3797              	.L276:
1357:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1358:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #else
1359:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         charsOut = -1;
1360:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         break;
1361:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1362:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     } else {
1363:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, textLen)) {
 3798              		.loc 2 1363 29
 3799 1aee 488B85C8 		movq	-2360(%rbp), %rax
 3799      F6FFFF
 3800 1af5 8B00     		movl	(%rax), %eax
 3801 1af7 8B95E8F6 		movl	-2328(%rbp), %edx
 3801      FFFF
 3802 1afd C1E202   		sall	$2, %edx
 3803 1b00 29D0     		subl	%edx, %eax
 3804              		.loc 2 1363 28
 3805 1b02 85C0     		testl	%eax, %eax
 3806 1b04 0F882F01 		js	.L282
 3806      0000
1364:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1365:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_WRITE_STR(formatBuf.wStr, textLen, stream, &charsOut);
 3807              		.loc 2 1365 29
 3808 1b0a 83BDE8F6 		cmpl	$11, -2328(%rbp)
 3808      FFFF0B
GAS LISTING /tmp/ccgOk6Ic.s 			page 118


 3809 1b11 0F8F9B00 		jg	.L283
 3809      0000
 3810              	.LBB22:
 3811              		.loc 2 1365 29 is_stmt 0 discriminator 1
 3812 1b17 C78514F7 		movl	$0, -2284(%rbp)
 3812      FFFF0000 
 3812      0000
 3813 1b21 EB49     		jmp	.L284
 3814              	.L285:
 3815              		.loc 2 1365 29 discriminator 5
 3816 1b23 488B9538 		movq	-2248(%rbp), %rdx
 3816      F7FFFF
 3817 1b2a 488B85C8 		movq	-2360(%rbp), %rax
 3817      F6FFFF
 3818 1b31 488B4008 		movq	8(%rax), %rax
 3819 1b35 8B12     		movl	(%rdx), %edx
 3820 1b37 8910     		movl	%edx, (%rax)
 3821 1b39 488B85C8 		movq	-2360(%rbp), %rax
 3821      F6FFFF
 3822 1b40 488B4008 		movq	8(%rax), %rax
 3823 1b44 488D5004 		leaq	4(%rax), %rdx
 3824 1b48 488B85C8 		movq	-2360(%rbp), %rax
 3824      F6FFFF
 3825 1b4f 48895008 		movq	%rdx, 8(%rax)
 3826 1b53 488B8538 		movq	-2248(%rbp), %rax
 3826      F7FFFF
 3827 1b5a 4883C004 		addq	$4, %rax
 3828 1b5e 48898538 		movq	%rax, -2248(%rbp)
 3828      F7FFFF
 3829 1b65 838514F7 		addl	$1, -2284(%rbp)
 3829      FFFF01
 3830              	.L284:
 3831              		.loc 2 1365 29 discriminator 3
 3832 1b6c 8B8514F7 		movl	-2284(%rbp), %eax
 3832      FFFF
 3833 1b72 3B85E8F6 		cmpl	-2328(%rbp), %eax
 3833      FFFF
 3834 1b78 7CA9     		jl	.L285
 3835              		.loc 2 1365 29 discriminator 6
 3836 1b7a 488B85C8 		movq	-2360(%rbp), %rax
 3836      F6FFFF
 3837 1b81 8B00     		movl	(%rax), %eax
 3838 1b83 8B95E8F6 		movl	-2328(%rbp), %edx
 3838      FFFF
 3839 1b89 C1E202   		sall	$2, %edx
 3840 1b8c 29D0     		subl	%edx, %eax
 3841 1b8e 89C2     		movl	%eax, %edx
 3842 1b90 488B85C8 		movq	-2360(%rbp), %rax
 3842      F6FFFF
 3843 1b97 8910     		movl	%edx, (%rax)
 3844 1b99 8B95D8F6 		movl	-2344(%rbp), %edx
 3844      FFFF
 3845 1b9f 8B85E8F6 		movl	-2328(%rbp), %eax
 3845      FFFF
 3846 1ba5 01D0     		addl	%edx, %eax
 3847 1ba7 8985D8F6 		movl	%eax, -2344(%rbp)
 3847      FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 119


 3848              	.LBE22:
 3849 1bad E9AA0000 		jmp	.L281
 3849      00
 3850              	.L283:
 3851              		.loc 2 1365 29 discriminator 2
 3852 1bb2 8B85E8F6 		movl	-2328(%rbp), %eax
 3852      FFFF
 3853 1bb8 89C0     		movl	%eax, %eax
 3854 1bba 488D1485 		leaq	0(,%rax,4), %rdx
 3854      00000000 
 3855 1bc2 488B8D38 		movq	-2248(%rbp), %rcx
 3855      F7FFFF
 3856 1bc9 488B85C8 		movq	-2360(%rbp), %rax
 3856      F6FFFF
 3857 1bd0 488B4008 		movq	8(%rax), %rax
 3858 1bd4 4889CE   		movq	%rcx, %rsi
 3859 1bd7 4889C7   		movq	%rax, %rdi
 3860 1bda E8000000 		call	SecDoMemcpy
 3860      00
 3861 1bdf 488B85C8 		movq	-2360(%rbp), %rax
 3861      F6FFFF
 3862 1be6 488B4008 		movq	8(%rax), %rax
 3863 1bea 8B95E8F6 		movl	-2328(%rbp), %edx
 3863      FFFF
 3864 1bf0 89D2     		movl	%edx, %edx
 3865 1bf2 48C1E202 		salq	$2, %rdx
 3866 1bf6 4801C2   		addq	%rax, %rdx
 3867 1bf9 488B85C8 		movq	-2360(%rbp), %rax
 3867      F6FFFF
 3868 1c00 48895008 		movq	%rdx, 8(%rax)
 3869 1c04 488B85C8 		movq	-2360(%rbp), %rax
 3869      F6FFFF
 3870 1c0b 8B00     		movl	(%rax), %eax
 3871 1c0d 8B95E8F6 		movl	-2328(%rbp), %edx
 3871      FFFF
 3872 1c13 C1E202   		sall	$2, %edx
 3873 1c16 29D0     		subl	%edx, %eax
 3874 1c18 89C2     		movl	%eax, %edx
 3875 1c1a 488B85C8 		movq	-2360(%rbp), %rax
 3875      F6FFFF
 3876 1c21 8910     		movl	%edx, (%rax)
 3877 1c23 8B95D8F6 		movl	-2344(%rbp), %edx
 3877      FFFF
 3878 1c29 8B85E8F6 		movl	-2328(%rbp), %eax
 3878      FFFF
 3879 1c2f 01D0     		addl	%edx, %eax
 3880 1c31 8985D8F6 		movl	%eax, -2344(%rbp)
 3880      FFFF
 3881 1c37 EB23     		jmp	.L281
 3882              	.L282:
1366:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1367:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_STRING(formatBuf.wStr, textLen, stream, &charsOut);
 3883              		.loc 2 1367 59 is_stmt 1
 3884 1c39 488B8538 		movq	-2248(%rbp), %rax
 3884      F7FFFF
 3885              		.loc 2 1367 29
 3886 1c40 488D8DD8 		leaq	-2344(%rbp), %rcx
GAS LISTING /tmp/ccgOk6Ic.s 			page 120


 3886      F6FFFF
 3887 1c47 488B95C8 		movq	-2360(%rbp), %rdx
 3887      F6FFFF
 3888 1c4e 8BB5E8F6 		movl	-2328(%rbp), %esi
 3888      FFFF
 3889 1c54 4889C7   		movq	%rax, %rdi
 3890 1c57 E8000000 		call	SecWriteStringW
 3890      00
 3891              	.L281:
1368:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1369:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1370:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif /* SECUREC_FOR_WCHAR */
1371:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1372:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     if (charsOut >= 0 && (formatAttr.flags & SECUREC_FLAG_LEFT) && padding > 0) {
 3892              		.loc 2 1372 34
 3893 1c5c 8B85D8F6 		movl	-2344(%rbp), %eax
 3893      FFFF
 3894              		.loc 2 1372 24
 3895 1c62 85C0     		testl	%eax, %eax
 3896 1c64 0F88DB00 		js	.L307
 3896      0000
 3897              		.loc 2 1372 53 discriminator 1
 3898 1c6a 8B85B0F7 		movl	-2128(%rbp), %eax
 3898      FFFF
 3899              		.loc 2 1372 60 discriminator 1
 3900 1c70 83E004   		andl	$4, %eax
 3901              		.loc 2 1372 39 discriminator 1
 3902 1c73 85C0     		testl	%eax, %eax
 3903 1c75 0F84CA00 		je	.L307
 3903      0000
 3904              		.loc 2 1372 81 discriminator 2
 3905 1c7b 83BD1CF7 		cmpl	$0, -2276(%rbp)
 3905      FFFF00
 3906 1c82 0F8EBD00 		jle	.L307
 3906      0000
1373:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         /* pad on right with blanks */
1374:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         if (SECUREC_IS_REST_BUF_ENOUGH(stream, padding)) {
 3907              		.loc 2 1374 29
 3908 1c88 488B85C8 		movq	-2360(%rbp), %rax
 3908      F6FFFF
 3909 1c8f 8B00     		movl	(%rax), %eax
 3910 1c91 8B951CF7 		movl	-2276(%rbp), %edx
 3910      FFFF
 3911 1c97 C1E202   		sall	$2, %edx
 3912 1c9a 29D0     		subl	%edx, %eax
 3913              		.loc 2 1374 28
 3914 1c9c 85C0     		testl	%eax, %eax
 3915 1c9e 0F888100 		js	.L287
 3915      0000
 3916              	.LBB23:
1375:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             /* char * cast to wchar * */
1376:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_SAFE_PADDING(SECUREC_CHAR(' '), padding, stream, &charsOut);
 3917              		.loc 2 1376 29
 3918 1ca4 C78518F7 		movl	$0, -2280(%rbp)
 3918      FFFF0000 
 3918      0000
 3919 1cae EB32     		jmp	.L288
GAS LISTING /tmp/ccgOk6Ic.s 			page 121


 3920              	.L289:
 3921              		.loc 2 1376 29 is_stmt 0 discriminator 3
 3922 1cb0 488B85C8 		movq	-2360(%rbp), %rax
 3922      F6FFFF
 3923 1cb7 488B4008 		movq	8(%rax), %rax
 3924 1cbb C7002000 		movl	$32, (%rax)
 3924      0000
 3925 1cc1 488B85C8 		movq	-2360(%rbp), %rax
 3925      F6FFFF
 3926 1cc8 488B4008 		movq	8(%rax), %rax
 3927 1ccc 488D5004 		leaq	4(%rax), %rdx
 3928 1cd0 488B85C8 		movq	-2360(%rbp), %rax
 3928      F6FFFF
 3929 1cd7 48895008 		movq	%rdx, 8(%rax)
 3930 1cdb 838518F7 		addl	$1, -2280(%rbp)
 3930      FFFF01
 3931              	.L288:
 3932              		.loc 2 1376 29 discriminator 1
 3933 1ce2 8B8518F7 		movl	-2280(%rbp), %eax
 3933      FFFF
 3934 1ce8 3B851CF7 		cmpl	-2276(%rbp), %eax
 3934      FFFF
 3935 1cee 7CC0     		jl	.L289
 3936              		.loc 2 1376 29 discriminator 4
 3937 1cf0 488B85C8 		movq	-2360(%rbp), %rax
 3937      F6FFFF
 3938 1cf7 8B00     		movl	(%rax), %eax
 3939 1cf9 8B951CF7 		movl	-2276(%rbp), %edx
 3939      FFFF
 3940 1cff C1E202   		sall	$2, %edx
 3941 1d02 29D0     		subl	%edx, %eax
 3942 1d04 89C2     		movl	%eax, %edx
 3943 1d06 488B85C8 		movq	-2360(%rbp), %rax
 3943      F6FFFF
 3944 1d0d 8910     		movl	%edx, (%rax)
 3945 1d0f 8B95D8F6 		movl	-2344(%rbp), %edx
 3945      FFFF
 3946 1d15 8B851CF7 		movl	-2276(%rbp), %eax
 3946      FFFF
 3947 1d1b 01D0     		addl	%edx, %eax
 3948 1d1d 8985D8F6 		movl	%eax, -2344(%rbp)
 3948      FFFF
 3949              	.LBE23:
1377:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         } else {
1378:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                             SECUREC_WRITE_MULTI_CHAR(SECUREC_CHAR(' '), padding, stream, &charsOut)
1379:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
1380:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     }
1381:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     break;
 3950              		.loc 2 1381 21 is_stmt 1 discriminator 4
 3951 1d23 EB20     		jmp	.L307
 3952              	.L287:
1378:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                         }
 3953              		.loc 2 1378 29
 3954 1d25 488D8DD8 		leaq	-2344(%rbp), %rcx
 3954      F6FFFF
 3955 1d2c 488B95C8 		movq	-2360(%rbp), %rdx
 3955      F6FFFF
GAS LISTING /tmp/ccgOk6Ic.s 			page 122


 3956 1d33 8B851CF7 		movl	-2276(%rbp), %eax
 3956      FFFF
 3957 1d39 89C6     		movl	%eax, %esi
 3958 1d3b BF200000 		movl	$32, %edi
 3958      00
 3959 1d40 E8000000 		call	SecWriteMultiCharW
 3959      00
 3960              	.L307:
 3961              		.loc 2 1381 21
 3962 1d45 90       		nop
 3963              	.L259:
1382:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
1383:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #if SECUREC_ENABLE_SPRINTF_FLOAT
1384:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 if (floatBuf != NULL) {
 3964              		.loc 2 1384 20
 3965 1d46 4883BD40 		cmpq	$0, -2240(%rbp)
 3965      F7FFFF00 
 3966 1d4e 742A     		je	.L114
1385:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     SECUREC_FREE(floatBuf);
 3967              		.loc 2 1385 21
 3968 1d50 488B8540 		movq	-2240(%rbp), %rax
 3968      F7FFFF
 3969 1d57 4889C7   		movq	%rax, %rdi
 3970 1d5a E8000000 		call	free@PLT
 3970      00
1386:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                     floatBuf = NULL;
 3971              		.loc 2 1386 30
 3972 1d5f 48C78540 		movq	$0, -2240(%rbp)
 3972      F7FFFF00 
 3972      000000
1387:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 }
1388:/home/xingli/share/1205tiny/secure_c/src/output.inl **** #endif
1389:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 break;
 3973              		.loc 2 1389 17
 3974 1d6a EB0E     		jmp	.L114
 3975              	.L118:
1390:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             case STAT_INVALID:
1391:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;
 3976              		.loc 2 1391 24
 3977 1d6c B8FFFFFF 		movl	$-1, %eax
 3977      FF
 3978 1d71 EB4C     		jmp	.L294
 3979              	.L117:
1392:/home/xingli/share/1205tiny/secure_c/src/output.inl ****             default:
1393:/home/xingli/share/1205tiny/secure_c/src/output.inl ****                 return -1;          /* input format is wrong, directly return */
 3980              		.loc 2 1393 24
 3981 1d73 B8FFFFFF 		movl	$-1, %eax
 3981      FF
 3982 1d78 EB45     		jmp	.L294
 3983              	.L114:
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3984              		.loc 2 670 18
 3985 1d7a 488B8530 		movq	-2256(%rbp), %rax
 3985      F7FFFF
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3986              		.loc 2 670 16
 3987 1d81 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 123


 3988 1d83 8985F4F6 		movl	%eax, -2316(%rbp)
 3988      FFFF
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3989              		.loc 2 670 11
 3990 1d89 83BDF4F6 		cmpl	$0, -2316(%rbp)
 3990      FFFF00
 3991 1d90 740E     		je	.L291
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3992              		.loc 2 670 61 discriminator 1
 3993 1d92 8B85D8F6 		movl	-2344(%rbp), %eax
 3993      FFFF
 670:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         ++format;
 3994              		.loc 2 670 49 discriminator 1
 3995 1d98 85C0     		testl	%eax, %eax
 3996 1d9a 0F8957E3 		jns	.L292
 3996      FFFF
 3997              	.L291:
1394:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         }
1395:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
1396:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1397:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     if (state != STAT_NORMAL && state != STAT_TYPE) {
 3998              		.loc 2 1397 8
 3999 1da0 83BDF0F6 		cmpl	$0, -2320(%rbp)
 3999      FFFF00
 4000 1da7 7410     		je	.L293
 4001              		.loc 2 1397 30 discriminator 1
 4002 1da9 83BDF0F6 		cmpl	$7, -2320(%rbp)
 4002      FFFF07
 4003 1db0 7407     		je	.L293
1398:/home/xingli/share/1205tiny/secure_c/src/output.inl ****         return -1;
 4004              		.loc 2 1398 16
 4005 1db2 B8FFFFFF 		movl	$-1, %eax
 4005      FF
 4006 1db7 EB06     		jmp	.L294
 4007              	.L293:
1399:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     }
1400:/home/xingli/share/1205tiny/secure_c/src/output.inl **** 
1401:/home/xingli/share/1205tiny/secure_c/src/output.inl ****     return charsOut;            /* the number of characters written */
 4008              		.loc 2 1401 12
 4009 1db9 8B85D8F6 		movl	-2344(%rbp), %eax
 4009      FFFF
 4010              	.L294:
1402:/home/xingli/share/1205tiny/secure_c/src/output.inl **** }
 4011              		.loc 2 1402 1 discriminator 6
 4012 1dbf 488B7DF8 		movq	-8(%rbp), %rdi
 4013 1dc3 6448333C 		xorq	%fs:40, %rdi
 4013      25280000 
 4013      00
 4014 1dcc 7405     		je	.L295
 4015              		.loc 2 1402 1 is_stmt 0
 4016 1dce E8000000 		call	__stack_chk_fail@PLT
 4016      00
 4017              	.L295:
 4018 1dd3 C9       		leave
 4019              	.LCFI47:
 4020              		.cfi_def_cfa 7, 8
 4021 1dd4 C3       		ret
GAS LISTING /tmp/ccgOk6Ic.s 			page 124


 4022              		.cfi_endproc
 4023              	.LFE21:
 4025              		.section	.text.SecVswprintfImpl,"ax",@progbits
 4026              		.globl	SecVswprintfImpl
 4028              	SecVswprintfImpl:
 4029              	.LFB22:
 4030              		.file 3 "/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c"
   1:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
   2:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Copyright (c) [2019] Huawei Technologies Co.,Ltd.All rights reserved.
   3:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  *
   4:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * OpenArkCompiler is licensed under the Mulan PSL v1. 
   5:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * You can use this software according to the terms and conditions of the Mulan PSL v1.
   6:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * You may obtain a copy of Mulan PSL v1 at:
   7:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  *
   8:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * 	http://license.coscl.org.cn/MulanPSL 
   9:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  *
  10:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER 
  11:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
  12:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * FIT FOR A PARTICULAR PURPOSE.  
  13:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * See the Mulan PSL v1 for more details.  
  14:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
  15:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  16:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /* if some platforms don't have wchar.h, dont't include it */
  17:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #if !(defined(SECUREC_VXWORKS_PLATFORM))
  18:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /* This header file is placed below secinput.h, which will cause tool alarm,
  19:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * but if there is no macro above, it will cause compiling alarm
  20:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
  21:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #if defined(_MSC_VER) && (_MSC_VER >= 1400)
  22:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #ifndef _CRTIMP_ALTERNATIVE
  23:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define _CRTIMP_ALTERNATIVE     /* comment microsoft *_s function */
  24:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #endif
  25:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #ifndef __STDC_WANT_SECURE_LIB__
  26:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define __STDC_WANT_SECURE_LIB__ 0
  27:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #endif
  28:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #endif
  29:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #include <wchar.h>
  30:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #endif
  31:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  32:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_ENABLE_WCHAR_FUNC   0
  33:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_INLINE_DO_MEMCPY    1
  34:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_FORMAT_OUTPUT_INPUT 1
  35:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #ifndef SECUREC_FOR_WCHAR
  36:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_FOR_WCHAR
  37:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #endif
  38:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  39:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #include "secureprintoutput.h"
  40:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  41:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #ifndef WEOF
  42:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define WEOF ((wchar_t)(-1))
  43:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #endif
  44:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  45:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_CHAR(x) L ## x
  46:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_WRITE_MULTI_CHAR SecWriteMultiCharW
  47:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #define SECUREC_WRITE_STRING     SecWriteStringW
  48:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  49:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static void SecWriteCharW(wchar_t ch, SecPrintfStream *f, int *pnumwritten);
  50:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static void SecWriteMultiCharW(wchar_t ch, int num, SecPrintfStream *f, int *pnumwritten);
GAS LISTING /tmp/ccgOk6Ic.s 			page 125


  51:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static void SecWriteStringW(const wchar_t *string, int len, SecPrintfStream *f, int *pnumwritten);
  52:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static int SecPutWcharStrEndingZero(SecPrintfStream *str, int zeroCount);
  53:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  54:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  55:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** #include "output.inl"
  56:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  57:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
  58:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Wide character formatted output implementation
  59:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
  60:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** int SecVswprintfImpl(wchar_t *string, size_t sizeInWchar, const wchar_t *format, va_list argList)
  61:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4031              		.loc 3 61 1 is_stmt 1
 4032              		.cfi_startproc
 4033 0000 F30F1EFA 		endbr64
 4034 0004 55       		pushq	%rbp
 4035              	.LCFI48:
 4036              		.cfi_def_cfa_offset 16
 4037              		.cfi_offset 6, -16
 4038 0005 4889E5   		movq	%rsp, %rbp
 4039              	.LCFI49:
 4040              		.cfi_def_cfa_register 6
 4041 0008 4883EC50 		subq	$80, %rsp
 4042 000c 48897DC8 		movq	%rdi, -56(%rbp)
 4043 0010 488975C0 		movq	%rsi, -64(%rbp)
 4044 0014 488955B8 		movq	%rdx, -72(%rbp)
 4045 0018 48894DB0 		movq	%rcx, -80(%rbp)
 4046              		.loc 3 61 1
 4047 001c 64488B04 		movq	%fs:40, %rax
 4047      25280000 
 4047      00
 4048 0025 488945F8 		movq	%rax, -8(%rbp)
 4049 0029 31C0     		xorl	%eax, %eax
  62:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     SecPrintfStream str;
  63:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     int retVal; /* If initialization causes  e838 */
  64:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  65:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     str.cur = (char *)string;
 4050              		.loc 3 65 13
 4051 002b 488B45C8 		movq	-56(%rbp), %rax
 4052 002f 488945E8 		movq	%rax, -24(%rbp)
  66:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     /* this count include \0 character, Must be greater than zero */
  67:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     str.count = (int)(sizeInWchar * sizeof(wchar_t));
 4053              		.loc 3 67 17
 4054 0033 488B45C0 		movq	-64(%rbp), %rax
 4055 0037 C1E002   		sall	$2, %eax
 4056              		.loc 3 67 15
 4057 003a 8945E0   		movl	%eax, -32(%rbp)
  68:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  69:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     retVal = SecOutputSW(&str, format, argList);
 4058              		.loc 3 69 14
 4059 003d 488B55B0 		movq	-80(%rbp), %rdx
 4060 0041 488B4DB8 		movq	-72(%rbp), %rcx
 4061 0045 488D45E0 		leaq	-32(%rbp), %rax
 4062 0049 4889CE   		movq	%rcx, %rsi
 4063 004c 4889C7   		movq	%rax, %rdi
 4064 004f E8000000 		call	SecOutputSW
 4064      00
 4065 0054 8945DC   		movl	%eax, -36(%rbp)
GAS LISTING /tmp/ccgOk6Ic.s 			page 126


  70:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     if ((retVal >= 0) && SecPutWcharStrEndingZero(&str, (int)sizeof(wchar_t))) {
 4066              		.loc 3 70 8
 4067 0057 837DDC00 		cmpl	$0, -36(%rbp)
 4068 005b 781A     		js	.L309
 4069              		.loc 3 70 26 discriminator 1
 4070 005d 488D45E0 		leaq	-32(%rbp), %rax
 4071 0061 BE040000 		movl	$4, %esi
 4071      00
 4072 0066 4889C7   		movq	%rax, %rdi
 4073 0069 E8000000 		call	SecPutWcharStrEndingZero
 4073      00
 4074              		.loc 3 70 23 discriminator 1
 4075 006e 85C0     		testl	%eax, %eax
 4076 0070 7405     		je	.L309
  71:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         return (retVal);
 4077              		.loc 3 71 16
 4078 0072 8B45DC   		movl	-36(%rbp), %eax
 4079 0075 EB36     		jmp	.L312
 4080              	.L309:
  72:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     } else if (str.count < 0) {
 4081              		.loc 3 72 19
 4082 0077 8B45E0   		movl	-32(%rbp), %eax
 4083              		.loc 3 72 15
 4084 007a 85C0     		testl	%eax, %eax
 4085 007c 7920     		jns	.L311
  73:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         /* the buffer was too small; we return truncation */
  74:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         string[sizeInWchar - 1] = L'\0';
 4086              		.loc 3 74 15
 4087 007e 488B45C0 		movq	-64(%rbp), %rax
 4088 0082 48C1E002 		salq	$2, %rax
 4089 0086 488D50FC 		leaq	-4(%rax), %rdx
 4090 008a 488B45C8 		movq	-56(%rbp), %rax
 4091 008e 4801D0   		addq	%rdx, %rax
 4092              		.loc 3 74 33
 4093 0091 C7000000 		movl	$0, (%rax)
 4093      0000
  75:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         return SECUREC_PRINTF_TRUNCATE;
 4094              		.loc 3 75 16
 4095 0097 B8FEFFFF 		movl	$-2, %eax
 4095      FF
 4096 009c EB0F     		jmp	.L312
 4097              	.L311:
  76:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
  77:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     string[0] = L'\0';
 4098              		.loc 3 77 15
 4099 009e 488B45C8 		movq	-56(%rbp), %rax
 4100 00a2 C7000000 		movl	$0, (%rax)
 4100      0000
  78:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     return -1;
 4101              		.loc 3 78 12
 4102 00a8 B8FFFFFF 		movl	$-1, %eax
 4102      FF
 4103              	.L312:
  79:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4104              		.loc 3 79 1 discriminator 1
 4105 00ad 488B4DF8 		movq	-8(%rbp), %rcx
 4106 00b1 6448330C 		xorq	%fs:40, %rcx
GAS LISTING /tmp/ccgOk6Ic.s 			page 127


 4106      25280000 
 4106      00
 4107 00ba 7405     		je	.L313
 4108              		.loc 3 79 1 is_stmt 0
 4109 00bc E8000000 		call	__stack_chk_fail@PLT
 4109      00
 4110              	.L313:
 4111 00c1 C9       		leave
 4112              	.LCFI50:
 4113              		.cfi_def_cfa 7, 8
 4114 00c2 C3       		ret
 4115              		.cfi_endproc
 4116              	.LFE22:
 4118              		.section	.text.SecPutZeroChar,"ax",@progbits
 4120              	SecPutZeroChar:
 4121              	.LFB23:
  80:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  81:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
  82:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Output one zero character zero into the SecPrintfStream structure
  83:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
  84:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static int SecPutZeroChar(SecPrintfStream *str)
  85:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4122              		.loc 3 85 1 is_stmt 1
 4123              		.cfi_startproc
 4124 0000 F30F1EFA 		endbr64
 4125 0004 55       		pushq	%rbp
 4126              	.LCFI51:
 4127              		.cfi_def_cfa_offset 16
 4128              		.cfi_offset 6, -16
 4129 0005 4889E5   		movq	%rsp, %rbp
 4130              	.LCFI52:
 4131              		.cfi_def_cfa_register 6
 4132 0008 4883EC20 		subq	$32, %rsp
 4133 000c 48897DE8 		movq	%rdi, -24(%rbp)
 4134              		.loc 3 85 1
 4135 0010 64488B04 		movq	%fs:40, %rax
 4135      25280000 
 4135      00
 4136 0019 488945F8 		movq	%rax, -8(%rbp)
 4137 001d 31C0     		xorl	%eax, %eax
  86:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     if (str->count > 0) {
 4138              		.loc 3 86 12
 4139 001f 488B45E8 		movq	-24(%rbp), %rax
 4140 0023 8B00     		movl	(%rax), %eax
 4141              		.loc 3 86 8
 4142 0025 85C0     		testl	%eax, %eax
 4143 0027 7E35     		jle	.L315
  87:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         *(str->cur) = (char)('\0');
 4144              		.loc 3 87 14
 4145 0029 488B45E8 		movq	-24(%rbp), %rax
 4146 002d 488B4008 		movq	8(%rax), %rax
 4147              		.loc 3 87 21
 4148 0031 C60000   		movb	$0, (%rax)
  88:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         str->count = str->count - 1;
 4149              		.loc 3 88 25
 4150 0034 488B45E8 		movq	-24(%rbp), %rax
 4151 0038 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 128


 4152              		.loc 3 88 33
 4153 003a 8D50FF   		leal	-1(%rax), %edx
 4154              		.loc 3 88 20
 4155 003d 488B45E8 		movq	-24(%rbp), %rax
 4156 0041 8910     		movl	%edx, (%rax)
  89:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         str->cur = str->cur + 1;
 4157              		.loc 3 89 23
 4158 0043 488B45E8 		movq	-24(%rbp), %rax
 4159 0047 488B4008 		movq	8(%rax), %rax
 4160              		.loc 3 89 29
 4161 004b 488D5001 		leaq	1(%rax), %rdx
 4162              		.loc 3 89 18
 4163 004f 488B45E8 		movq	-24(%rbp), %rax
 4164 0053 48895008 		movq	%rdx, 8(%rax)
  90:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         return 0;
 4165              		.loc 3 90 16
 4166 0057 B8000000 		movl	$0, %eax
 4166      00
 4167 005c EB05     		jmp	.L316
 4168              	.L315:
  91:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
  92:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     return -1;
 4169              		.loc 3 92 12
 4170 005e B8FFFFFF 		movl	$-1, %eax
 4170      FF
 4171              	.L316:
  93:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4172              		.loc 3 93 1
 4173 0063 488B4DF8 		movq	-8(%rbp), %rcx
 4174 0067 6448330C 		xorq	%fs:40, %rcx
 4174      25280000 
 4174      00
 4175 0070 7405     		je	.L317
 4176 0072 E8000000 		call	__stack_chk_fail@PLT
 4176      00
 4177              	.L317:
 4178 0077 C9       		leave
 4179              	.LCFI53:
 4180              		.cfi_def_cfa 7, 8
 4181 0078 C3       		ret
 4182              		.cfi_endproc
 4183              	.LFE23:
 4185              		.section	.text.SecPutWcharStrEndingZero,"ax",@progbits
 4187              	SecPutWcharStrEndingZero:
 4188              	.LFB24:
  94:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
  95:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
  96:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Output a wide character zero end into the SecPrintfStream structure
  97:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
  98:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static int SecPutWcharStrEndingZero(SecPrintfStream *str, int zeroCount)
  99:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4189              		.loc 3 99 1
 4190              		.cfi_startproc
 4191 0000 F30F1EFA 		endbr64
 4192 0004 55       		pushq	%rbp
 4193              	.LCFI54:
 4194              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccgOk6Ic.s 			page 129


 4195              		.cfi_offset 6, -16
 4196 0005 4889E5   		movq	%rsp, %rbp
 4197              	.LCFI55:
 4198              		.cfi_def_cfa_register 6
 4199 0008 4883EC20 		subq	$32, %rsp
 4200 000c 48897DE8 		movq	%rdi, -24(%rbp)
 4201 0010 8975E4   		movl	%esi, -28(%rbp)
 4202              		.loc 3 99 1
 4203 0013 64488B04 		movq	%fs:40, %rax
 4203      25280000 
 4203      00
 4204 001c 488945F8 		movq	%rax, -8(%rbp)
 4205 0020 31C0     		xorl	%eax, %eax
 100:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     int succeed = 0;
 4206              		.loc 3 100 9
 4207 0022 C745F000 		movl	$0, -16(%rbp)
 4207      000000
 101:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     int i = 0;
 4208              		.loc 3 101 9
 4209 0029 C745F400 		movl	$0, -12(%rbp)
 4209      000000
 102:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
 103:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (i < zeroCount && (SecPutZeroChar(str) == 0)) {
 4210              		.loc 3 103 11
 4211 0030 EB04     		jmp	.L319
 4212              	.L321:
 104:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         ++i;
 4213              		.loc 3 104 9
 4214 0032 8345F401 		addl	$1, -12(%rbp)
 4215              	.L319:
 103:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         ++i;
 4216              		.loc 3 103 11
 4217 0036 8B45F4   		movl	-12(%rbp), %eax
 4218 0039 3B45E4   		cmpl	-28(%rbp), %eax
 4219 003c 7D10     		jge	.L320
 103:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         ++i;
 4220              		.loc 3 103 30 discriminator 1
 4221 003e 488B45E8 		movq	-24(%rbp), %rax
 4222 0042 4889C7   		movq	%rax, %rdi
 4223 0045 E8000000 		call	SecPutZeroChar
 4223      00
 103:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         ++i;
 4224              		.loc 3 103 26 discriminator 1
 4225 004a 85C0     		testl	%eax, %eax
 4226 004c 74E4     		je	.L321
 4227              	.L320:
 105:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 106:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     if (i == zeroCount) {
 4228              		.loc 3 106 8
 4229 004e 8B45F4   		movl	-12(%rbp), %eax
 4230 0051 3B45E4   		cmpl	-28(%rbp), %eax
 4231 0054 7507     		jne	.L322
 107:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         succeed = 1;
 4232              		.loc 3 107 17
 4233 0056 C745F001 		movl	$1, -16(%rbp)
 4233      000000
 4234              	.L322:
GAS LISTING /tmp/ccgOk6Ic.s 			page 130


 108:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 109:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     return succeed;
 4235              		.loc 3 109 12
 4236 005d 8B45F0   		movl	-16(%rbp), %eax
 110:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4237              		.loc 3 110 1
 4238 0060 488B55F8 		movq	-8(%rbp), %rdx
 4239 0064 64483314 		xorq	%fs:40, %rdx
 4239      25280000 
 4239      00
 4240 006d 7405     		je	.L324
 4241 006f E8000000 		call	__stack_chk_fail@PLT
 4241      00
 4242              	.L324:
 4243 0074 C9       		leave
 4244              	.LCFI56:
 4245              		.cfi_def_cfa 7, 8
 4246 0075 C3       		ret
 4247              		.cfi_endproc
 4248              	.LFE24:
 4250              		.section	.text.SecPutCharW,"ax",@progbits
 4252              	SecPutCharW:
 4253              	.LFB25:
 111:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
 112:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
 113:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
 114:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Output a wide character into the SecPrintfStream structure
 115:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
 116:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static wchar_t SecPutCharW(wchar_t ch, SecPrintfStream *f)
 117:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4254              		.loc 3 117 1
 4255              		.cfi_startproc
 4256 0000 F30F1EFA 		endbr64
 4257 0004 55       		pushq	%rbp
 4258              	.LCFI57:
 4259              		.cfi_def_cfa_offset 16
 4260              		.cfi_offset 6, -16
 4261 0005 4889E5   		movq	%rsp, %rbp
 4262              	.LCFI58:
 4263              		.cfi_def_cfa_register 6
 4264 0008 4883EC20 		subq	$32, %rsp
 4265 000c 897DEC   		movl	%edi, -20(%rbp)
 4266 000f 488975E0 		movq	%rsi, -32(%rbp)
 4267              		.loc 3 117 1
 4268 0013 64488B04 		movq	%fs:40, %rax
 4268      25280000 
 4268      00
 4269 001c 488945F8 		movq	%rax, -8(%rbp)
 4270 0020 31C0     		xorl	%eax, %eax
 118:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     wchar_t wcRet = 0;
 4271              		.loc 3 118 13
 4272 0022 C745F400 		movl	$0, -12(%rbp)
 4272      000000
 119:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     if (((f)->count -= (int)sizeof(wchar_t)) >= 0) {
 4273              		.loc 3 119 21
 4274 0029 488B45E0 		movq	-32(%rbp), %rax
 4275 002d 8B00     		movl	(%rax), %eax
GAS LISTING /tmp/ccgOk6Ic.s 			page 131


 4276 002f 8D50FC   		leal	-4(%rax), %edx
 4277 0032 488B45E0 		movq	-32(%rbp), %rax
 4278 0036 8910     		movl	%edx, (%rax)
 4279 0038 488B45E0 		movq	-32(%rbp), %rax
 4280 003c 8B00     		movl	(%rax), %eax
 4281              		.loc 3 119 8
 4282 003e 85C0     		testl	%eax, %eax
 4283 0040 7829     		js	.L326
 120:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         *(wchar_t *)(void *)(f->cur) = ch;
 4284              		.loc 3 120 31
 4285 0042 488B45E0 		movq	-32(%rbp), %rax
 4286 0046 488B4008 		movq	8(%rax), %rax
 4287              		.loc 3 120 38
 4288 004a 8B55EC   		movl	-20(%rbp), %edx
 4289 004d 8910     		movl	%edx, (%rax)
 121:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         f->cur += sizeof(wchar_t);
 4290              		.loc 3 121 16
 4291 004f 488B45E0 		movq	-32(%rbp), %rax
 4292 0053 488B4008 		movq	8(%rax), %rax
 4293 0057 488D5004 		leaq	4(%rax), %rdx
 4294 005b 488B45E0 		movq	-32(%rbp), %rax
 4295 005f 48895008 		movq	%rdx, 8(%rax)
 122:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         wcRet = ch;
 4296              		.loc 3 122 15
 4297 0063 8B45EC   		movl	-20(%rbp), %eax
 4298 0066 8945F4   		movl	%eax, -12(%rbp)
 4299 0069 EB07     		jmp	.L327
 4300              	.L326:
 123:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     } else {
 124:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         wcRet = (wchar_t)WEOF;
 4301              		.loc 3 124 15
 4302 006b C745F4FF 		movl	$-1, -12(%rbp)
 4302      FFFFFF
 4303              	.L327:
 125:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 126:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     return wcRet;
 4304              		.loc 3 126 12
 4305 0072 8B45F4   		movl	-12(%rbp), %eax
 127:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4306              		.loc 3 127 1
 4307 0075 488B4DF8 		movq	-8(%rbp), %rcx
 4308 0079 6448330C 		xorq	%fs:40, %rcx
 4308      25280000 
 4308      00
 4309 0082 7405     		je	.L329
 4310 0084 E8000000 		call	__stack_chk_fail@PLT
 4310      00
 4311              	.L329:
 4312 0089 C9       		leave
 4313              	.LCFI59:
 4314              		.cfi_def_cfa 7, 8
 4315 008a C3       		ret
 4316              		.cfi_endproc
 4317              	.LFE25:
 4319              		.section	.text.SecWriteCharW,"ax",@progbits
 4321              	SecWriteCharW:
 4322              	.LFB26:
GAS LISTING /tmp/ccgOk6Ic.s 			page 132


 128:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
 129:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
 130:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Output a wide character into the SecPrintfStream structure, returns the number of characters wri
 131:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
 132:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static void SecWriteCharW(wchar_t ch, SecPrintfStream *f, int *pnumwritten)
 133:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4323              		.loc 3 133 1
 4324              		.cfi_startproc
 4325 0000 F30F1EFA 		endbr64
 4326 0004 55       		pushq	%rbp
 4327              	.LCFI60:
 4328              		.cfi_def_cfa_offset 16
 4329              		.cfi_offset 6, -16
 4330 0005 4889E5   		movq	%rsp, %rbp
 4331              	.LCFI61:
 4332              		.cfi_def_cfa_register 6
 4333 0008 4883EC30 		subq	$48, %rsp
 4334 000c 897DEC   		movl	%edi, -20(%rbp)
 4335 000f 488975E0 		movq	%rsi, -32(%rbp)
 4336 0013 488955D8 		movq	%rdx, -40(%rbp)
 4337              		.loc 3 133 1
 4338 0017 64488B04 		movq	%fs:40, %rax
 4338      25280000 
 4338      00
 4339 0020 488945F8 		movq	%rax, -8(%rbp)
 4340 0024 31C0     		xorl	%eax, %eax
 134:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     if (SecPutCharW(ch, f) == (wchar_t)WEOF) {
 4341              		.loc 3 134 9
 4342 0026 488B55E0 		movq	-32(%rbp), %rdx
 4343 002a 8B45EC   		movl	-20(%rbp), %eax
 4344 002d 4889D6   		movq	%rdx, %rsi
 4345 0030 89C7     		movl	%eax, %edi
 4346 0032 E8000000 		call	SecPutCharW
 4346      00
 4347              		.loc 3 134 8
 4348 0037 83F8FF   		cmpl	$-1, %eax
 4349 003a 750C     		jne	.L331
 135:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         *pnumwritten = -1;
 4350              		.loc 3 135 22
 4351 003c 488B45D8 		movq	-40(%rbp), %rax
 4352 0040 C700FFFF 		movl	$-1, (%rax)
 4352      FFFF
 136:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     } else {
 137:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         *pnumwritten = *pnumwritten + 1;
 138:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 139:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4353              		.loc 3 139 1
 4354 0046 EB0F     		jmp	.L334
 4355              	.L331:
 137:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 4356              		.loc 3 137 24
 4357 0048 488B45D8 		movq	-40(%rbp), %rax
 4358 004c 8B00     		movl	(%rax), %eax
 137:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 4359              		.loc 3 137 37
 4360 004e 8D5001   		leal	1(%rax), %edx
 137:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
GAS LISTING /tmp/ccgOk6Ic.s 			page 133


 4361              		.loc 3 137 22
 4362 0051 488B45D8 		movq	-40(%rbp), %rax
 4363 0055 8910     		movl	%edx, (%rax)
 4364              	.L334:
 4365              		.loc 3 139 1
 4366 0057 90       		nop
 4367 0058 488B45F8 		movq	-8(%rbp), %rax
 4368 005c 64483304 		xorq	%fs:40, %rax
 4368      25280000 
 4368      00
 4369 0065 7405     		je	.L333
 4370 0067 E8000000 		call	__stack_chk_fail@PLT
 4370      00
 4371              	.L333:
 4372 006c C9       		leave
 4373              	.LCFI62:
 4374              		.cfi_def_cfa 7, 8
 4375 006d C3       		ret
 4376              		.cfi_endproc
 4377              	.LFE26:
 4379              		.section	.text.SecWriteMultiCharW,"ax",@progbits
 4381              	SecWriteMultiCharW:
 4382              	.LFB27:
 140:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
 141:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
 142:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Output multiple wide character into the SecPrintfStream structure,  returns the number of charac
 143:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
 144:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static void SecWriteMultiCharW(wchar_t ch, int num, SecPrintfStream *f, int *pnumwritten)
 145:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4383              		.loc 3 145 1
 4384              		.cfi_startproc
 4385 0000 F30F1EFA 		endbr64
 4386 0004 55       		pushq	%rbp
 4387              	.LCFI63:
 4388              		.cfi_def_cfa_offset 16
 4389              		.cfi_offset 6, -16
 4390 0005 4889E5   		movq	%rsp, %rbp
 4391              	.LCFI64:
 4392              		.cfi_def_cfa_register 6
 4393 0008 4883EC30 		subq	$48, %rsp
 4394 000c 897DEC   		movl	%edi, -20(%rbp)
 4395 000f 8975E8   		movl	%esi, -24(%rbp)
 4396 0012 488955E0 		movq	%rdx, -32(%rbp)
 4397 0016 48894DD8 		movq	%rcx, -40(%rbp)
 4398              		.loc 3 145 1
 4399 001a 64488B04 		movq	%fs:40, %rax
 4399      25280000 
 4399      00
 4400 0023 488945F8 		movq	%rax, -8(%rbp)
 4401 0027 31C0     		xorl	%eax, %eax
 146:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     int count = num;
 4402              		.loc 3 146 9
 4403 0029 8B45E8   		movl	-24(%rbp), %eax
 4404 002c 8945F4   		movl	%eax, -12(%rbp)
 147:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (count-- > 0) {
 4405              		.loc 3 147 11
 4406 002f EB20     		jmp	.L336
GAS LISTING /tmp/ccgOk6Ic.s 			page 134


 4407              	.L338:
 148:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         SecWriteCharW(ch, f, pnumwritten);
 4408              		.loc 3 148 9
 4409 0031 488B55D8 		movq	-40(%rbp), %rdx
 4410 0035 488B4DE0 		movq	-32(%rbp), %rcx
 4411 0039 8B45EC   		movl	-20(%rbp), %eax
 4412 003c 4889CE   		movq	%rcx, %rsi
 4413 003f 89C7     		movl	%eax, %edi
 4414 0041 E8000000 		call	SecWriteCharW
 4414      00
 149:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         if (*pnumwritten == -1) {
 4415              		.loc 3 149 13
 4416 0046 488B45D8 		movq	-40(%rbp), %rax
 4417 004a 8B00     		movl	(%rax), %eax
 4418              		.loc 3 149 12
 4419 004c 83F8FF   		cmpl	$-1, %eax
 4420 004f 740F     		je	.L340
 4421              	.L336:
 147:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (count-- > 0) {
 4422              		.loc 3 147 17
 4423 0051 8B45F4   		movl	-12(%rbp), %eax
 4424 0054 8D50FF   		leal	-1(%rax), %edx
 4425 0057 8955F4   		movl	%edx, -12(%rbp)
 147:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (count-- > 0) {
 4426              		.loc 3 147 11
 4427 005a 85C0     		testl	%eax, %eax
 4428 005c 7FD3     		jg	.L338
 150:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****             break;
 151:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         }
 152:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 153:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4429              		.loc 3 153 1
 4430 005e EB01     		jmp	.L337
 4431              	.L340:
 150:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****             break;
 4432              		.loc 3 150 13
 4433 0060 90       		nop
 4434              	.L337:
 4435              		.loc 3 153 1
 4436 0061 90       		nop
 4437 0062 488B45F8 		movq	-8(%rbp), %rax
 4438 0066 64483304 		xorq	%fs:40, %rax
 4438      25280000 
 4438      00
 4439 006f 7405     		je	.L339
 4440 0071 E8000000 		call	__stack_chk_fail@PLT
 4440      00
 4441              	.L339:
 4442 0076 C9       		leave
 4443              	.LCFI65:
 4444              		.cfi_def_cfa 7, 8
 4445 0077 C3       		ret
 4446              		.cfi_endproc
 4447              	.LFE27:
 4449              		.section	.text.SecWriteStringW,"ax",@progbits
 4451              	SecWriteStringW:
 4452              	.LFB28:
GAS LISTING /tmp/ccgOk6Ic.s 			page 135


 154:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** 
 155:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** /*
 156:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  * Output a wide string into the SecPrintfStream structure,  returns the number of characters writt
 157:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****  */
 158:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** static void SecWriteStringW(const wchar_t *string, int len, SecPrintfStream *f, int *pnumwritten)
 159:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** {
 4453              		.loc 3 159 1
 4454              		.cfi_startproc
 4455 0000 F30F1EFA 		endbr64
 4456 0004 55       		pushq	%rbp
 4457              	.LCFI66:
 4458              		.cfi_def_cfa_offset 16
 4459              		.cfi_offset 6, -16
 4460 0005 4889E5   		movq	%rsp, %rbp
 4461              	.LCFI67:
 4462              		.cfi_def_cfa_register 6
 4463 0008 4883EC40 		subq	$64, %rsp
 4464 000c 48897DD8 		movq	%rdi, -40(%rbp)
 4465 0010 8975D4   		movl	%esi, -44(%rbp)
 4466 0013 488955C8 		movq	%rdx, -56(%rbp)
 4467 0017 48894DC0 		movq	%rcx, -64(%rbp)
 4468              		.loc 3 159 1
 4469 001b 64488B04 		movq	%fs:40, %rax
 4469      25280000 
 4469      00
 4470 0024 488945F8 		movq	%rax, -8(%rbp)
 4471 0028 31C0     		xorl	%eax, %eax
 160:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     const wchar_t *str = string;
 4472              		.loc 3 160 20
 4473 002a 488B45D8 		movq	-40(%rbp), %rax
 4474 002e 488945F0 		movq	%rax, -16(%rbp)
 161:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     int count = len;
 4475              		.loc 3 161 9
 4476 0032 8B45D4   		movl	-44(%rbp), %eax
 4477 0035 8945EC   		movl	%eax, -20(%rbp)
 162:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (count-- > 0) {
 4478              		.loc 3 162 11
 4479 0038 EB2B     		jmp	.L342
 4480              	.L344:
 163:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         SecWriteCharW(*str++, f, pnumwritten);
 4481              		.loc 3 163 27
 4482 003a 488B45F0 		movq	-16(%rbp), %rax
 4483 003e 488D5004 		leaq	4(%rax), %rdx
 4484 0042 488955F0 		movq	%rdx, -16(%rbp)
 4485              		.loc 3 163 9
 4486 0046 8B00     		movl	(%rax), %eax
 4487 0048 488B55C0 		movq	-64(%rbp), %rdx
 4488 004c 488B4DC8 		movq	-56(%rbp), %rcx
 4489 0050 4889CE   		movq	%rcx, %rsi
 4490 0053 89C7     		movl	%eax, %edi
 4491 0055 E8000000 		call	SecWriteCharW
 4491      00
 164:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         if (*pnumwritten == -1) {
 4492              		.loc 3 164 13
 4493 005a 488B45C0 		movq	-64(%rbp), %rax
 4494 005e 8B00     		movl	(%rax), %eax
 4495              		.loc 3 164 12
GAS LISTING /tmp/ccgOk6Ic.s 			page 136


 4496 0060 83F8FF   		cmpl	$-1, %eax
 4497 0063 740F     		je	.L346
 4498              	.L342:
 162:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (count-- > 0) {
 4499              		.loc 3 162 17
 4500 0065 8B45EC   		movl	-20(%rbp), %eax
 4501 0068 8D50FF   		leal	-1(%rax), %edx
 4502 006b 8955EC   		movl	%edx, -20(%rbp)
 162:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     while (count-- > 0) {
 4503              		.loc 3 162 11
 4504 006e 85C0     		testl	%eax, %eax
 4505 0070 7FC8     		jg	.L344
 165:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****             break;
 166:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****         }
 167:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****     }
 168:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c **** }
 4506              		.loc 3 168 1
 4507 0072 EB01     		jmp	.L343
 4508              	.L346:
 165:/home/xingli/share/1205tiny/secure_c/src/secureprintoutput_w.c ****             break;
 4509              		.loc 3 165 13
 4510 0074 90       		nop
 4511              	.L343:
 4512              		.loc 3 168 1
 4513 0075 90       		nop
 4514 0076 488B45F8 		movq	-8(%rbp), %rax
 4515 007a 64483304 		xorq	%fs:40, %rax
 4515      25280000 
 4515      00
 4516 0083 7405     		je	.L345
 4517 0085 E8000000 		call	__stack_chk_fail@PLT
 4517      00
 4518              	.L345:
 4519 008a C9       		leave
 4520              	.LCFI68:
 4521              		.cfi_def_cfa 7, 8
 4522 008b C3       		ret
 4523              		.cfi_endproc
 4524              	.LFE28:
 4526              		.section	.rodata
 4527              	.LC1:
 4528 0000 30313233 		.string	"0123456789ABCDEFX"
 4528      34353637 
 4528      38394142 
 4528      43444546 
 4528      5800
 4529              		.section	.data.rel.local.itoaUpperDigits.3798,"aw"
 4530              		.align 8
 4533              	itoaUpperDigits.3798:
 4534 0000 00000000 		.quad	.LC1
 4534      00000000 
 4535              		.section	.rodata.stateTable.3811,"a"
 4536              		.align 32
 4539              	stateTable.3811:
 4540 0000 00       		.string	""
 4541 0001 00       		.string	""
 4542 0002 00       		.string	""
GAS LISTING /tmp/ccgOk6Ic.s 			page 137


 4543 0003 00       		.string	""
 4544 0004 00       		.string	""
 4545 0005 00       		.string	""
 4546 0006 00       		.string	""
 4547 0007 00       		.string	""
 4548 0008 00       		.string	""
 4549 0009 00       		.string	""
 4550 000a 00       		.string	""
 4551 000b 00       		.string	""
 4552 000c 00       		.string	""
 4553 000d 00       		.string	""
 4554 000e 00       		.string	""
 4555 000f 00       		.string	""
 4556 0010 00       		.string	""
 4557 0011 00       		.string	""
 4558 0012 00       		.string	""
 4559 0013 00       		.string	""
 4560 0014 00       		.string	""
 4561 0015 00       		.string	""
 4562 0016 00       		.string	""
 4563 0017 00       		.string	""
 4564 0018 00       		.string	""
 4565 0019 00       		.string	""
 4566 001a 00       		.string	""
 4567 001b 00       		.string	""
 4568 001c 00       		.string	""
 4569 001d 00       		.string	""
 4570 001e 00       		.string	""
 4571 001f 00       		.string	""
 4572 0020 0600     		.string	"\006"
 4573 0022 00       		.string	""
 4574 0023 0600     		.string	"\006"
 4575 0025 0100     		.string	"\001"
 4576 0027 00       		.string	""
 4577 0028 00       		.string	""
 4578 0029 00       		.string	""
 4579 002a 030600   		.string	"\003\006"
 4580 002d 060200   		.string	"\006\002"
 4581 0030 04050505 		.string	"\004\005\005\005\005\005\005\005\005\005"
 4581      05050505 
 4581      050500
 4582 003b 00       		.string	""
 4583 003c 00       		.string	""
 4584 003d 00       		.string	""
 4585 003e 00       		.string	""
 4586 003f 00       		.string	""
 4587 0040 00       		.string	""
 4588 0041 00       		.string	""
 4589 0042 00       		.string	""
 4590 0043 0800     		.string	"\b"
 4591 0045 08080800 		.string	"\b\b\b"
 4592 0049 0700     		.string	"\007"
 4593 004b 00       		.string	""
 4594 004c 0700     		.string	"\007"
 4595 004e 0700     		.string	"\007"
 4596 0050 00       		.string	""
 4597 0051 00       		.string	""
GAS LISTING /tmp/ccgOk6Ic.s 			page 138


 4598 0052 00       		.string	""
 4599 0053 0800     		.string	"\b"
 4600 0055 00       		.string	""
 4601 0056 00       		.string	""
 4602 0057 00       		.string	""
 4603 0058 0800     		.string	"\b"
 4604 005a 0700     		.string	"\007"
 4605 005c 00       		.string	""
 4606 005d 00       		.string	""
 4607 005e 00       		.string	""
 4608 005f 00       		.string	""
 4609 0060 00       		.string	""
 4610 0061 00       		.string	""
 4611 0062 00       		.string	""
 4612 0063 08080808 		.string	"\b\b\b\b\b\007\b\007"
 4612      08070807 
 4612      00
 4613 006c 0700     		.string	"\007"
 4614 006e 00       		.string	""
 4615 006f 08080700 		.string	"\b\b\007"
 4616 0073 08070800 		.string	"\b\007\b"
 4617 0077 070800   		.string	"\007\b"
 4618 007a 0700     		.string	"\007"
 4619 007c 00       		.string	""
 4620 007d 00       		.string	""
 4621 007e 00       		.string	""
 4622 007f 00       		.string	""
 4623 0080 00       		.string	""
 4624 0081 00       		.string	""
 4625 0082 00       		.string	""
 4626 0083 00       		.string	""
 4627 0084 00       		.string	""
 4628 0085 00       		.string	""
 4629 0086 00       		.string	""
 4630 0087 00       		.string	""
 4631 0088 00       		.string	""
 4632 0089 00       		.string	""
 4633 008a 00       		.string	""
 4634 008b 00       		.string	""
 4635 008c 00       		.string	""
 4636 008d 00       		.string	""
 4637 008e 00       		.string	""
 4638 008f 00       		.string	""
 4639 0090 00       		.string	""
 4640 0091 00       		.string	""
 4641 0092 00       		.string	""
 4642 0093 00       		.string	""
 4643 0094 00       		.string	""
 4644 0095 00       		.string	""
 4645 0096 00       		.string	""
 4646 0097 00       		.string	""
 4647 0098 00       		.string	""
 4648 0099 00       		.string	""
 4649 009a 00       		.string	""
 4650 009b 00       		.string	""
 4651 009c 00       		.string	""
 4652 009d 00       		.string	""
GAS LISTING /tmp/ccgOk6Ic.s 			page 139


 4653 009e 00       		.string	""
 4654 009f 00       		.string	""
 4655 00a0 00       		.string	""
 4656 00a1 00       		.string	""
 4657 00a2 00       		.string	""
 4658 00a3 00       		.string	""
 4659 00a4 00       		.string	""
 4660 00a5 00       		.string	""
 4661 00a6 00       		.string	""
 4662 00a7 00       		.string	""
 4663 00a8 00       		.string	""
 4664 00a9 00       		.string	""
 4665 00aa 00       		.string	""
 4666 00ab 00       		.string	""
 4667 00ac 00       		.string	""
 4668 00ad 00       		.string	""
 4669 00ae 00       		.string	""
 4670 00af 00       		.string	""
 4671 00b0 00       		.string	""
 4672 00b1 00       		.string	""
 4673 00b2 00       		.string	""
 4674 00b3 00       		.string	""
 4675 00b4 00       		.string	""
 4676 00b5 00       		.string	""
 4677 00b6 00       		.string	""
 4678 00b7 00       		.string	""
 4679 00b8 00       		.string	""
 4680 00b9 00       		.string	""
 4681 00ba 00       		.string	""
 4682 00bb 00       		.string	""
 4683 00bc 00       		.string	""
 4684 00bd 00       		.string	""
 4685 00be 00       		.string	""
 4686 00bf 00       		.string	""
 4687 00c0 00       		.string	""
 4688 00c1 00       		.string	""
 4689 00c2 00       		.string	""
 4690 00c3 00       		.string	""
 4691 00c4 00       		.string	""
 4692 00c5 00       		.string	""
 4693 00c6 00       		.string	""
 4694 00c7 00       		.string	""
 4695 00c8 00       		.string	""
 4696 00c9 00       		.string	""
 4697 00ca 00       		.string	""
 4698 00cb 00       		.string	""
 4699 00cc 00       		.string	""
 4700 00cd 00       		.string	""
 4701 00ce 00       		.string	""
 4702 00cf 00       		.string	""
 4703 00d0 00       		.string	""
 4704 00d1 00       		.string	""
 4705 00d2 00       		.string	""
 4706 00d3 00       		.string	""
 4707 00d4 00       		.string	""
 4708 00d5 00       		.string	""
 4709 00d6 00       		.string	""
GAS LISTING /tmp/ccgOk6Ic.s 			page 140


 4710 00d7 00       		.string	""
 4711 00d8 00       		.string	""
 4712 00d9 00       		.string	""
 4713 00da 00       		.string	""
 4714 00db 00       		.string	""
 4715 00dc 00       		.string	""
 4716 00dd 00       		.string	""
 4717 00de 00       		.string	""
 4718 00df 00       		.string	""
 4719 00e0 00       		.string	""
 4720 00e1 00       		.string	""
 4721 00e2 00       		.string	""
 4722 00e3 00       		.string	""
 4723 00e4 00       		.string	""
 4724 00e5 00       		.string	""
 4725 00e6 00       		.string	""
 4726 00e7 00       		.string	""
 4727 00e8 00       		.string	""
 4728 00e9 00       		.string	""
 4729 00ea 00       		.string	""
 4730 00eb 00       		.string	""
 4731 00ec 00       		.string	""
 4732 00ed 00       		.string	""
 4733 00ee 00       		.string	""
 4734 00ef 00       		.string	""
 4735 00f0 00       		.string	""
 4736 00f1 00       		.string	""
 4737 00f2 00       		.string	""
 4738 00f3 00       		.string	""
 4739 00f4 00       		.string	""
 4740 00f5 00       		.string	""
 4741 00f6 00       		.string	""
 4742 00f7 00       		.string	""
 4743 00f8 00       		.string	""
 4744 00f9 00       		.string	""
 4745 00fa 00       		.string	""
 4746 00fb 00       		.string	""
 4747 00fc 00       		.string	""
 4748 00fd 00       		.string	""
 4749 00fe 00       		.string	""
 4750 00ff 00       		.string	""
 4751 0100 00       		.string	""
 4752 0101 08080808 		.string	"\b\b\b\b\b\b"
 4752      080800
 4753 0108 00       		.string	""
 4754 0109 0100     		.string	"\001"
 4755 010b 08080808 		.string	"\b\b\b\b\b\001"
 4755      080100
 4756 0112 00       		.string	""
 4757 0113 04040408 		.string	"\004\004\004\b\b\b"
 4757      080800
 4758 011a 00       		.string	""
 4759 011b 00       		.string	""
 4760 011c 03030805 		.string	"\003\003\b\005\b\b"
 4760      080800
 4761 0123 00       		.string	""
 4762 0124 00       		.string	""
GAS LISTING /tmp/ccgOk6Ic.s 			page 141


 4763 0125 02020305 		.string	"\002\002\003\005\005\b"
 4763      050800
 4764 012c 00       		.string	""
 4765 012d 00       		.string	""
 4766 012e 03030305 		.string	"\003\003\003\005\005\b"
 4766      050800
 4767 0135 00       		.string	""
 4768 0136 00       		.string	""
 4769 0137 02020208 		.string	"\002\002\002\b\b\b"
 4769      080800
 4770 013e 00       		.string	""
 4771 013f 00       		.string	""
 4772 0140 06060606 		.string	"\006\006\006\006\006\006"
 4772      060600
 4773 0147 00       		.string	""
 4774 0148 00       		.string	""
 4775 0149 07070707 		.string	"\007\007\007\007\007\007"
 4775      070700
 4776 0150 00       		.string	""
 4777              		.section	.rodata
 4778              	.LC2:
 4779 0012 30313233 		.string	"0123456789abcdefx"
 4779      34353637 
 4779      38396162 
 4779      63646566 
 4779      7800
 4780              		.section	.data.rel.local.itoaLowerDigits.3799,"aw"
 4781              		.align 8
 4784              	itoaLowerDigits.3799:
 4785 0000 00000000 		.quad	.LC2
 4785      00000000 
 4786              		.text
 4787              	.Letext0:
 4788              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 4789              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h"
 4790              		.file 6 "<built-in>"
 4791              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 4792              		.file 8 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 4793              		.file 9 "/usr/include/x86_64-linux-gnu/bits/types.h"
 4794              		.file 10 "/usr/include/stdio.h"
 4795              		.file 11 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 4796              		.file 12 "/home/xingli/share/1205tiny/secure_c/src/secureprintoutput.h"
 8911              		.section	.note.gnu.property,"a"
 8912              		.align 8
 8913 0000 04000000 		.long	 1f - 0f
 8914 0004 10000000 		.long	 4f - 1f
 8915 0008 05000000 		.long	 5
 8916              	0:
 8917 000c 474E5500 		.string	 "GNU"
 8918              	1:
 8919              		.align 8
 8920 0010 020000C0 		.long	 0xc0000002
 8921 0014 04000000 		.long	 3f - 2f
 8922              	2:
 8923 0018 03000000 		.long	 0x3
 8924              	3:
 8925 001c 00000000 		.align 8
GAS LISTING /tmp/ccgOk6Ic.s 			page 142


 8926              	4:
GAS LISTING /tmp/ccgOk6Ic.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 secureprintoutput_w.c
     /tmp/ccgOk6Ic.s:6      .text.SecDoMemcpy:0000000000000000 SecDoMemcpy
     /tmp/ccgOk6Ic.s:50     .text.SecIndirectSprintf:0000000000000000 SecIndirectSprintf
     /tmp/ccgOk6Ic.s:117    .text.SecFormatLongDboule:0000000000000000 SecFormatLongDboule
     /tmp/ccgOk6Ic.s:253    .text.SecFormatDboule:0000000000000000 SecFormatDboule
     /tmp/ccgOk6Ic.s:382    .text.SecIsSameSize:0000000000000000 SecIsSameSize
     /tmp/ccgOk6Ic.s:421    .text.SecDecodeFlags:0000000000000000 SecDecodeFlags
     /tmp/ccgOk6Ic.s:545    .text.SecDecodeSizeI:0000000000000000 SecDecodeSizeI
     /tmp/ccgOk6Ic.s:707    .text.SecDecodeSize:0000000000000000 SecDecodeSize
     /tmp/ccgOk6Ic.s:947    .text.SecDecodeTypeC:0000000000000000 SecDecodeTypeC
     /tmp/ccgOk6Ic.s:1040   .data.g_wStrNullString:0000000000000000 g_wStrNullString
     /tmp/ccgOk6Ic.s:1053   .data.g_strNullString:0000000000000000 g_strNullString
     /tmp/ccgOk6Ic.s:1058   .text.SecDecodeTypeSchar:0000000000000000 SecDecodeTypeSchar
     /tmp/ccgOk6Ic.s:1150   .text.SecDecodeTypeSwchar:0000000000000000 SecDecodeTypeSwchar
     /tmp/ccgOk6Ic.s:1241   .text.SecDecodeTypeS:0000000000000000 SecDecodeTypeS
     /tmp/ccgOk6Ic.s:1330   .text.SecOutputOneChar:0000000000000000 SecOutputOneChar
     /tmp/ccgOk6Ic.s:4321   .text.SecWriteCharW:0000000000000000 SecWriteCharW
     /tmp/ccgOk6Ic.s:1403   .text.SecDecodePrecision:0000000000000000 SecDecodePrecision
     /tmp/ccgOk6Ic.s:1497   .text.SecDecodeWidth:0000000000000000 SecDecodeWidth
     /tmp/ccgOk6Ic.s:1611   .text.SecOutputSW:0000000000000000 SecOutputSW
     /tmp/ccgOk6Ic.s:4533   .data.rel.local.itoaUpperDigits.3798:0000000000000000 itoaUpperDigits.3798
     /tmp/ccgOk6Ic.s:4539   .rodata.stateTable.3811:0000000000000000 stateTable.3811
     /tmp/ccgOk6Ic.s:4784   .data.rel.local.itoaLowerDigits.3799:0000000000000000 itoaLowerDigits.3799
     /tmp/ccgOk6Ic.s:4381   .text.SecWriteMultiCharW:0000000000000000 SecWriteMultiCharW
     /tmp/ccgOk6Ic.s:4451   .text.SecWriteStringW:0000000000000000 SecWriteStringW
     /tmp/ccgOk6Ic.s:4028   .text.SecVswprintfImpl:0000000000000000 SecVswprintfImpl
     /tmp/ccgOk6Ic.s:4187   .text.SecPutWcharStrEndingZero:0000000000000000 SecPutWcharStrEndingZero
     /tmp/ccgOk6Ic.s:4120   .text.SecPutZeroChar:0000000000000000 SecPutZeroChar
     /tmp/ccgOk6Ic.s:4252   .text.SecPutCharW:0000000000000000 SecPutCharW

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memcpy
__stack_chk_fail
vsprintf
mbtowc
strlen
strnlen
malloc
free
__ctype_get_mb_cur_max
